
soft_10.elf:     file format elf32-littlenios2
soft_10.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000f094 memsz 0x0000f094 flags r-x
    LOAD off    0x000100b4 vaddr 0x0002f0b4 paddr 0x00030cfc align 2**12
         filesz 0x00001c48 memsz 0x00001c48 flags rw-
    LOAD off    0x00012944 vaddr 0x00032944 paddr 0x00032944 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e870  000201b4  000201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000690  0002ea24  0002ea24  0000fa24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c48  0002f0b4  00030cfc  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00032944  00032944  00012944  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00011cfc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e58  00000000  00000000  00011d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001649  00000000  00000000  00012b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002aad6  00000000  00000000  000141c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008eb7  00000000  00000000  0003ec9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016aef  00000000  00000000  00047b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001cc8  00000000  00000000  0005e648  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002521  00000000  00000000  00060310  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000caef  00000000  00000000  00062831  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006f320  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0006f380  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000732b7  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000732ba  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000732c4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000732c5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000732c6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000732ca  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000732ce  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000732d2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000732db  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000732e4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  000732ed  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000038  00000000  00000000  000732f2  2**0
                  CONTENTS, READONLY
 29 .jdi          00004936  00000000  00000000  0007332a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b4 l    d  .text	00000000 .text
0002ea24 l    d  .rodata	00000000 .rodata
0002f0b4 l    d  .rwdata	00000000 .rwdata
00032944 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000201fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0002f0b4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000216f8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00021944 l     F .text	00000058 __sprint_r
0002eb52 l     O .rodata	00000010 blanks.3452
0002eb42 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00023a90 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002548c l     F .text	00000058 std
00025598 l     F .text	00000008 __fp_lock
000255a0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00030cc8 l     O .rwdata	00000004 charset
0002eb84 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002eccc l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00028be0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00029d0c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0002a580 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002a5e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002a6e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002a800 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002a8e0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002aa3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0002ab48 l     F .text	000000dc alt_file_locked
0002adac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0002af2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00030ce4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002b1c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002fa70 l     O .rwdata	00001060 jtag_uart
00030ad0 l     O .rwdata	00000120 lcd
00030bf0 l     O .rwdata	000000c4 uart
0002b2f0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002b530 l     F .text	00000228 altera_avalon_jtag_uart_irq
0002b758 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00030ce8 l     O .rwdata	00000004 colstart
0002bdd4 l     F .text	000000b8 lcd_write_command
0002be8c l     F .text	000000d4 lcd_write_data
0002bf60 l     F .text	000000c4 lcd_clear_screen
0002c024 l     F .text	000001ec lcd_repaint_screen
0002c210 l     F .text	000000c8 lcd_scroll_up
0002c2d8 l     F .text	000002d0 lcd_handle_escape
0002cab4 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002cd14 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002cfd4 l     F .text	0000009c altera_avalon_uart_irq
0002d070 l     F .text	000000e0 altera_avalon_uart_rxirq
0002d150 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0002d53c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0002d764 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002da10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002e0a0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0002ef31 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0002e7a0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0002e954 l     F .text	00000040 alt_sim_halt
00026afc g     F .text	00000094 _mprec_log10
00026be8 g     F .text	00000088 __any_on
00026248 g     F .text	00000070 _isatty_r
0002eca4 g     O .rodata	00000028 __mprec_tinytens
0002aa9c g     F .text	0000006c alt_main
00021480 g     F .text	000000a0 _puts_r
000329a0 g     O .bss	00000100 alt_irq
0002637c g     F .text	00000078 _lseek_r
00030cfc g       *ABS*	00000000 __flash_rwdata_start
0002574c g     F .text	000000a0 __sflags
00029700 g     F .text	00000088 __eqdf2
00032c30 g       *ABS*	00000000 __alt_heap_start
00021408 g     F .text	00000044 printf
0002178c g     F .text	00000068 __sseek
000254f4 g     F .text	000000a4 __sinit
000262dc g     F .text	00000084 _setlocale_r
000255f4 g     F .text	00000068 __sfmoreglue
0002ab28 g     F .text	00000020 __malloc_unlock
00026578 g     F .text	000000e0 memmove
000255e4 g     F .text	00000010 _cleanup
00026c70 g     F .text	000000bc _Balloc
00029810 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002096c g     F .text	00000074 _fstat_r
00032944 g     O .bss	00000004 errno
00032964 g     O .bss	00000004 alt_argv
00038cb4 g       *ABS*	00000000 _gp
0002e380 g     F .text	00000030 usleep
0002f8f0 g     O .rwdata	00000180 alt_fd_list
0002db38 g     F .text	00000094 alt_find_dev
000264d8 g     F .text	000000a0 memcpy
000255d8 g     F .text	0000000c _cleanup_r
000299a8 g     F .text	000000f8 __floatsidf
0002e164 g     F .text	00000078 alt_io_redirect
00029920 g     F .text	00000088 __ltdf2
0002ea24 g       *ABS*	00000000 __DTOR_END__
00021520 g     F .text	00000014 puts
00026a4c g     F .text	000000b0 __ratio
0002b970 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0002144c g     F .text	00000034 _printf_r
00029e48 g     F .text	00000008 __udivsi3
0002a740 g     F .text	000000c0 isatty
0002ebb4 g     O .rodata	000000c8 __mprec_tens
000262b8 g     F .text	00000008 __locale_charset
0002e51c g     F .text	00000090 alt_icache_flush
00032948 g     O .bss	00000004 __malloc_top_pad
00030cc4 g     O .rwdata	00000004 __mb_cur_max
000262c0 g     F .text	0000000c _localeconv_r
00027368 g     F .text	0000003c __i2b
00025c2c g     F .text	0000049c __sfvwrite_r
00021714 g     F .text	00000070 _sbrk_r
000276e4 g     F .text	00000078 _read_r
0002f8bc g     O .rwdata	0000000c __lc_ctype
00030cdc g     O .rwdata	00000004 alt_max_fd
0002a284 g     F .text	00000138 __unpack_d
00027f30 g     F .text	00000110 _fclose_r
00025458 g     F .text	00000034 fflush
0003294c g     O .bss	00000004 __malloc_max_sbrked_mem
00029070 g     F .text	00000074 __adddf3
0002692c g     F .text	00000120 __b2d
00028630 g     F .text	000005b0 __umoddi3
0002a94c g     F .text	000000f0 lseek
00030cb8 g     O .rwdata	00000004 _global_impure_ptr
0002775c g     F .text	000005f4 _realloc_r
00032c30 g       *ABS*	00000000 __bss_end
0002dfa8 g     F .text	000000f8 alt_iic_isr_register
0002e274 g     F .text	0000010c alt_tick
00028054 g     F .text	000005dc __udivdi3
0002ec7c g     O .rodata	00000028 __mprec_bigtens
000275c4 g     F .text	00000120 __s2b
00029b78 g     F .text	00000194 __floatunsidf
0002684c g     F .text	00000060 __mcmp
0002cf0c g     F .text	000000c8 altera_avalon_uart_init
00030cf8 g     O .rwdata	00000004 __ctype_ptr
000255c0 g     F .text	00000018 __fp_lock_all
0002df60 g     F .text	00000048 alt_ic_irq_enabled
0002e1dc g     F .text	00000098 alt_alarm_stop
0003296c g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000c8 alt_irq_handler
0002f8c8 g     O .rwdata	00000028 alt_dev_null
0002d918 g     F .text	00000044 alt_dcache_flush_all
00026718 g     F .text	00000070 __hi0bits
00029aa0 g     F .text	000000d8 __fixdfsi
00030cfc g       *ABS*	00000000 __ram_rwdata_end
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory
00030cd4 g     O .rwdata	00000008 alt_dev_list
0002b0a8 g     F .text	00000120 write
0002f0b4 g       *ABS*	00000000 __ram_rodata_end
0002a60c g     F .text	000000d4 fstat
000204ac g     F .text	0000002c fprintf
000274a4 g     F .text	00000120 __pow5mult
00032954 g     O .bss	00000004 __nlocale_changed
00029e50 g     F .text	00000008 __umodsi3
00032c30 g       *ABS*	00000000 end
0002c5a8 g     F .text	0000050c altera_avalon_lcd_16207_write
0002d59c g     F .text	000001c8 altera_avalon_uart_write
00020948 g     F .text	00000024 fseek
0002b470 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002ea20 g       *ABS*	00000000 __CTOR_LIST__
0003f400 g       *ABS*	00000000 __alt_stack_pointer
0002cd84 g     F .text	00000090 alt_avalon_timer_sc_init
0002ce6c g     F .text	00000058 altera_avalon_uart_write_fd
00029ef0 g     F .text	00000080 __clzsi2
0002cec4 g     F .text	00000048 altera_avalon_uart_close_fd
0002bb94 g     F .text	00000240 altera_avalon_jtag_uart_write
000254e4 g     F .text	00000004 __sfp_lock_acquire
000263f4 g     F .text	000000e4 memchr
0002199c g     F .text	00001eac ___vfprintf_internal_r
00025918 g     F .text	00000314 _free_r
0002e7a4 g     F .text	000001b0 __call_exitprocs
00032958 g     O .bss	00000004 __mlocale_changed
00030cc0 g     O .rwdata	00000004 __malloc_sbrk_base
000201b4 g     F .text	0000004c _start
00032970 g     O .bss	00000004 _alt_tick_rate
00027034 g     F .text	0000014c __lshift
00032974 g     O .bss	00000004 _alt_nticks
0002ae0c g     F .text	00000120 read
0002b25c g     F .text	00000094 alt_sys_init
00021390 g     F .text	00000078 _open_r
0002e66c g     F .text	00000134 __register_exitproc
00027180 g     F .text	000001e8 __multiply
0002b808 g     F .text	00000074 altera_avalon_jtag_uart_close
0002f0b4 g       *ABS*	00000000 __ram_rwdata_start
0002ea24 g       *ABS*	00000000 __ram_rodata_start
00032978 g     O .bss	00000028 __malloc_current_mallinfo
00026d2c g     F .text	0000017c __d2b
0002b328 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0002dcec g     F .text	000000b8 alt_get_fd
0002e3d0 g     F .text	0000014c alt_busy_sleep
0002a3bc g     F .text	000000c8 __fpcmp_parts_d
00023a20 g     F .text	00000070 _close_r
0002e5f8 g     F .text	00000074 memcmp
0002b3d8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00032c30 g       *ABS*	00000000 __alt_stack_base
0002b420 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000209e0 g     F .text	0000009c _fwrite_r
000238e4 g     F .text	0000013c __swsetup_r
000294a8 g     F .text	00000258 __divdf3
0002565c g     F .text	000000f0 __sfp
00026b90 g     F .text	00000058 __copybits
0002f4b4 g     O .rwdata	00000408 __malloc_av_
000254f0 g     F .text	00000004 __sinit_lock_release
000290e4 g     F .text	000003c4 __muldf3
00021870 g     F .text	00000060 __sread
0002dbcc g     F .text	00000120 alt_find_file
0002d95c g     F .text	000000b4 alt_dev_llist_insert
0002ab08 g     F .text	00000020 __malloc_lock
000204d8 g     F .text	00000034 _fprintf_r
0002afec g     F .text	000000bc sbrk
0002525c g     F .text	000001fc _fflush_r
00027e7c g     F .text	000000b4 _calloc_r
00020490 g     F .text	0000001c fopen
00032944 g       *ABS*	00000000 __bss_start
00026658 g     F .text	00000098 memset
00020200 g     F .text	0000019c main
00032968 g     O .bss	00000004 alt_envp
00032950 g     O .bss	00000004 __malloc_max_total_mem
0002b380 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0002cb80 g     F .text	0000013c altera_avalon_lcd_16207_init
00021784 g     F .text	00000008 __sclose
0003f400 g       *ABS*	00000000 __alt_heap_limit
00028040 g     F .text	00000014 fclose
00032aa0 g     O .bss	00000190 _atexit0
00023ca8 g     F .text	000015b4 _dtoa_r
00020c50 g     F .text	00000740 _malloc_r
00030ce0 g     O .rwdata	00000004 alt_errno
00026190 g     F .text	000000b8 _fwalk
00029d88 g     F .text	00000060 __divsi3
0002ecd8 g     O .rodata	00000014 __thenan_df
000257ec g     F .text	0000012c _malloc_trim_r
0002ea24 g       *ABS*	00000000 __CTOR_END__
00027dc0 g     F .text	000000bc strcmp
0002ea24 g       *ABS*	00000000 __flash_rodata_start
0002ea24 g       *ABS*	00000000 __DTOR_LIST__
00029788 g     F .text	00000088 __nedf2
0002b228 g     F .text	00000034 alt_irq_init
0002af8c g     F .text	00000060 alt_release_fd
0002ecec g     O .rodata	00000100 __clz_tab
0003295c g     O .bss	00000004 _PathLocale
0002e5ac g     F .text	00000014 atexit
0002386c g     F .text	00000078 _write_r
00026360 g     F .text	0000001c setlocale
00030cb4 g     O .rwdata	00000004 _impure_ptr
00032960 g     O .bss	00000004 alt_argc
0002dad4 g     F .text	00000064 _do_dtors
0002050c g     F .text	0000043c _fseek_r
00021534 g     F .text	000001c4 __srefill_r
00020020 g       .exceptions	00000000 alt_irq_entry
000268ac g     F .text	00000080 __ulp
00027d50 g     F .text	00000040 __isinfd
000255a8 g     F .text	00000018 __fp_unlock_all
0002ccbc g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00030ccc g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000262cc g     F .text	00000010 localeconv
0002ddd4 g     F .text	00000050 alt_ic_isr_register
00020a7c g     F .text	00000040 fwrite
00030cfc g       *ABS*	00000000 _edata
0002ce14 g     F .text	00000058 altera_avalon_uart_read_fd
00032c30 g       *ABS*	00000000 _end
000201b4 g       *ABS*	00000000 __ram_exceptions_end
0002b87c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002dec0 g     F .text	000000a0 alt_ic_irq_disable
000217f4 g     F .text	0000007c __swrite
00030cbc g     O .rwdata	00000004 __malloc_trim_threshold
0002e3b0 g     F .text	00000020 altera_nios2_qsys_irq_init
0002e5c0 g     F .text	00000038 exit
000260c8 g     F .text	000000c8 _fwalk_reent
00026ea8 g     F .text	0000018c __mdiff
00029de8 g     F .text	00000060 __modsi3
0003f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000254e8 g     F .text	00000004 __sfp_lock_release
0002ee30 g     O .rodata	00000101 _ctype_
0002d2ac g     F .text	00000060 altera_avalon_uart_close
0002039c g     F .text	000000f4 _fopen_r
0002e994 g     F .text	00000020 _exit
00027d90 g     F .text	00000030 __isnand
0002d7c4 g     F .text	00000154 alt_alarm_start
00029e58 g     F .text	00000098 __muldi3
00020abc g     F .text	00000194 __smakebuf_r
000218d0 g     F .text	00000074 strlen
0002ac24 g     F .text	00000188 open
00029898 g     F .text	00000088 __gedf2
0002dda4 g     F .text	00000030 alt_icache_flush_all
00030cec g     O .rwdata	00000004 alt_priority_mask
0002de24 g     F .text	0000009c alt_ic_irq_enable
00023848 g     F .text	00000024 __vfprintf_internal
0002d30c g     F .text	00000230 altera_avalon_uart_read
00028ff0 g     F .text	00000080 __subdf3
00026788 g     F .text	000000c4 __lo0bits
00030cf0 g     O .rwdata	00000008 alt_alarm_list
0002da70 g     F .text	00000064 _do_ctors
0002a484 g     F .text	000000fc close
0002a860 g     F .text	00000080 alt_load
00029f70 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000254ec g     F .text	00000004 __sinit_lock_acquire
000273a4 g     F .text	00000100 __multadd
000266f0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08406d14 	ori	at,at,436
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   20044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   200fc:	0005313a 	rdctl	r2,ipending
   20100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   20108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   2010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20110:	00800044 	movi	r2,1
   20114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20118:	e0ffff17 	ldw	r3,-4(fp)
   2011c:	e0bffe17 	ldw	r2,-8(fp)
   20120:	1884703a 	and	r2,r3,r2
   20124:	1005003a 	cmpeq	r2,r2,zero
   20128:	1000161e 	bne	r2,zero,20184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	e0bffd17 	ldw	r2,-12(fp)
   20130:	00c000f4 	movhi	r3,3
   20134:	18ca6804 	addi	r3,r3,10656
   20138:	100490fa 	slli	r2,r2,3
   2013c:	10c5883a 	add	r2,r2,r3
   20140:	11400017 	ldw	r5,0(r2)
   20144:	e0bffd17 	ldw	r2,-12(fp)
   20148:	00c000f4 	movhi	r3,3
   2014c:	18ca6804 	addi	r3,r3,10656
   20150:	100490fa 	slli	r2,r2,3
   20154:	10c5883a 	add	r2,r2,r3
   20158:	10800104 	addi	r2,r2,4
   2015c:	11000017 	ldw	r4,0(r2)
   20160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20164:	0005313a 	rdctl	r2,ipending
   20168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   2016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   20174:	e0bfff17 	ldw	r2,-4(fp)
   20178:	1004c03a 	cmpne	r2,r2,zero
   2017c:	103fe31e 	bne	r2,zero,2010c <alt_irq_handler+0x20>
   20180:	00000706 	br	201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20184:	e0bffe17 	ldw	r2,-8(fp)
   20188:	1085883a 	add	r2,r2,r2
   2018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	10800044 	addi	r2,r2,1
   20198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   2019c:	003fde06 	br	20118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a0:	e037883a 	mov	sp,fp
   201a4:	dfc00117 	ldw	ra,4(sp)
   201a8:	df000017 	ldw	fp,0(sp)
   201ac:	dec00204 	addi	sp,sp,8
   201b0:	f800283a 	ret

Disassembly of section .text:

000201b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   201b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   201b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   201bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   201c0:	00bffd16 	blt	zero,r2,201b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201c4:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   201c8:	defd0014 	ori	sp,sp,62464

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   201cc:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201d0:	d6a32d14 	ori	gp,gp,36020
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201d4:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   201d8:	108a5114 	ori	r2,r2,10564

    movhi r3, %hi(__bss_end)
   201dc:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   201e0:	18cb0c14 	ori	r3,r3,11312

    beq r2, r3, 1f
   201e4:	10c00326 	beq	r2,r3,201f4 <_start+0x40>

0:
    stw zero, (r2)
   201e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201f0:	10fffd36 	bltu	r2,r3,201e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201f4:	002a8600 	call	2a860 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201f8:	002aa9c0 	call	2aa9c <alt_main>

000201fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201fc:	003fff06 	br	201fc <alt_after_alt_main>

00020200 <main>:
#include "altera_avalon_lcd_16207_regs.h"



int main()
{
   20200:	defff604 	addi	sp,sp,-40
   20204:	dfc00915 	stw	ra,36(sp)
   20208:	df000815 	stw	fp,32(sp)
   2020c:	df000804 	addi	fp,sp,32

  char c[10];
  int count = 1;
   20210:	00800044 	movi	r2,1
   20214:	e0bffc15 	stw	r2,-16(fp)
  int delay;
  int aux;



  FILE *fp_UART=0;
   20218:	e03ff915 	stw	zero,-28(fp)

  FILE *fp_LCD=0;
   2021c:	e03ff815 	stw	zero,-32(fp)


  fp_UART = fopen(UART_NAME,"w"); // open UART for write
   20220:	010000f4 	movhi	r4,3
   20224:	213a8904 	addi	r4,r4,-5596
   20228:	014000f4 	movhi	r5,3
   2022c:	297a8c04 	addi	r5,r5,-5584
   20230:	00204900 	call	20490 <fopen>
   20234:	e0bff915 	stw	r2,-28(fp)
  fp_LCD = fopen(LCD_NAME,"w"); // open LCD for write
   20238:	010000f4 	movhi	r4,3
   2023c:	213a8d04 	addi	r4,r4,-5580
   20240:	014000f4 	movhi	r5,3
   20244:	297a8c04 	addi	r5,r5,-5584
   20248:	00204900 	call	20490 <fopen>
   2024c:	e0bff815 	stw	r2,-32(fp)

  if(fp_LCD==0) {
   20250:	e0bff817 	ldw	r2,-32(fp)
   20254:	1004c03a 	cmpne	r2,r2,zero
   20258:	1000061e 	bne	r2,zero,20274 <main+0x74>
	  printf("\nError Opening %s\n\n",LCD_NAME);
   2025c:	010000f4 	movhi	r4,3
   20260:	213a9004 	addi	r4,r4,-5568
   20264:	014000f4 	movhi	r5,3
   20268:	297a8d04 	addi	r5,r5,-5580
   2026c:	00214080 	call	21408 <printf>
   20270:	00000906 	br	20298 <main+0x98>
  }
  else {
	  printf("LCD opened, ready for access\n");
   20274:	010000f4 	movhi	r4,3
   20278:	213a9504 	addi	r4,r4,-5548
   2027c:	00215200 	call	21520 <puts>
  	  fprintf(fp_LCD,"Primer mensaje");
   20280:	010000f4 	movhi	r4,3
   20284:	213a9d04 	addi	r4,r4,-5516
   20288:	01400044 	movi	r5,1
   2028c:	01800384 	movi	r6,14
   20290:	e1fff817 	ldw	r7,-32(fp)
   20294:	0020a7c0 	call	20a7c <fwrite>
  }

  if(fp_UART==0) {
   20298:	e0bff917 	ldw	r2,-28(fp)
   2029c:	1004c03a 	cmpne	r2,r2,zero
   202a0:	1000061e 	bne	r2,zero,202bc <main+0xbc>
	  printf("\nError Opening %s\n\n",UART_NAME);
   202a4:	010000f4 	movhi	r4,3
   202a8:	213a9004 	addi	r4,r4,-5568
   202ac:	014000f4 	movhi	r5,3
   202b0:	297a8904 	addi	r5,r5,-5596
   202b4:	00214080 	call	21408 <printf>
   202b8:	00000306 	br	202c8 <main+0xc8>
  }
  else {
	  printf("UART opened, ready for access\n");
   202bc:	010000f4 	movhi	r4,3
   202c0:	213aa104 	addi	r4,r4,-5500
   202c4:	00215200 	call	21520 <puts>

  }

  printf("Hello from Nios 15!\n");
   202c8:	010000f4 	movhi	r4,3
   202cc:	213aa904 	addi	r4,r4,-5468
   202d0:	00215200 	call	21520 <puts>

  //fprintf(fp_UART,"--------------------------\r\n");

  fprintf(fp_LCD,"Hola guapo");
   202d4:	010000f4 	movhi	r4,3
   202d8:	213aae04 	addi	r4,r4,-5448
   202dc:	01400044 	movi	r5,1
   202e0:	01800284 	movi	r6,10
   202e4:	e1fff817 	ldw	r7,-32(fp)
   202e8:	0020a7c0 	call	20a7c <fwrite>
  while(1) {
	  //aux=IORD_ALTERA_AVALON_PIO_DATA(PIO_SW_BASE);

	  //IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDR_BASE, aux);

	  if (IORD_ALTERA_AVALON_PIO_DATA(PIO_RDYDATA_BASE) == 1) { // !Empty
   202ec:	00800134 	movhi	r2,4
   202f0:	10843804 	addi	r2,r2,4320
   202f4:	10800037 	ldwio	r2,0(r2)
   202f8:	10800058 	cmpnei	r2,r2,1
   202fc:	10001f1e 	bne	r2,zero,2037c <main+0x17c>
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_DATAREAD_BASE, 0x02); //Enable
   20300:	00c00134 	movhi	r3,4
   20304:	18c42004 	addi	r3,r3,4224
   20308:	00800084 	movi	r2,2
   2030c:	18800035 	stwio	r2,0(r3)
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_DATAREAD_BASE, 0x03); //ENABLE +CLCK
   20310:	00c00134 	movhi	r3,4
   20314:	18c42004 	addi	r3,r3,4224
   20318:	008000c4 	movi	r2,3
   2031c:	18800035 	stwio	r2,0(r3)
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_DATAREAD_BASE, 0x00);
   20320:	00800134 	movhi	r2,4
   20324:	10842004 	addi	r2,r2,4224
   20328:	10000035 	stwio	zero,0(r2)
		  aux=IORD_ALTERA_AVALON_PIO_DATA(PIO_DATA_BASE);
   2032c:	00800134 	movhi	r2,4
   20330:	10843404 	addi	r2,r2,4304
   20334:	10800037 	ldwio	r2,0(r2)
   20338:	e0bffa15 	stw	r2,-24(fp)
		  //sprintf(c,"%b",aux);
		  fprintf(fp_UART,"%d\r\n",(aux&(0x0800)) >> 12 );
   2033c:	e0bffa17 	ldw	r2,-24(fp)
   20340:	1082000c 	andi	r2,r2,2048
   20344:	100dd33a 	srai	r6,r2,12
   20348:	e13ff917 	ldw	r4,-28(fp)
   2034c:	014000f4 	movhi	r5,3
   20350:	297ab104 	addi	r5,r5,-5436
   20354:	00204ac0 	call	204ac <fprintf>
		  fprintf(fp_LCD,"D: %d N: %d\r\n\r\n", aux , count);
   20358:	e13ff817 	ldw	r4,-32(fp)
   2035c:	014000f4 	movhi	r5,3
   20360:	297ab304 	addi	r5,r5,-5428
   20364:	e1bffa17 	ldw	r6,-24(fp)
   20368:	e1fffc17 	ldw	r7,-16(fp)
   2036c:	00204ac0 	call	204ac <fprintf>
		  count++;
   20370:	e0bffc17 	ldw	r2,-16(fp)
   20374:	10800044 	addi	r2,r2,1
   20378:	e0bffc15 	stw	r2,-16(fp)
	  }


	 IOWR_ALTERA_AVALON_PIO_DATA(PIO_DATAREAD_BASE, 0x01);
   2037c:	00800134 	movhi	r2,4
   20380:	10842004 	addi	r2,r2,4224
   20384:	00c00044 	movi	r3,1
   20388:	10c00035 	stwio	r3,0(r2)
	 IOWR_ALTERA_AVALON_PIO_DATA(PIO_DATAREAD_BASE, 0x00);  //0x00 clock
   2038c:	00800134 	movhi	r2,4
   20390:	10842004 	addi	r2,r2,4224
   20394:	10000035 	stwio	zero,0(r2)



	 // printf("Laura es gorrina %d!\n",count);
	//  fprintf(fp,"%s:%d%s","Hola UART",count,"\n");
  }
   20398:	003fd406 	br	202ec <main+0xec>

0002039c <_fopen_r>:
   2039c:	defffa04 	addi	sp,sp,-24
   203a0:	dcc00415 	stw	r19,16(sp)
   203a4:	2827883a 	mov	r19,r5
   203a8:	300b883a 	mov	r5,r6
   203ac:	d80d883a 	mov	r6,sp
   203b0:	dc800315 	stw	r18,12(sp)
   203b4:	dc400215 	stw	r17,8(sp)
   203b8:	dc000115 	stw	r16,4(sp)
   203bc:	dfc00515 	stw	ra,20(sp)
   203c0:	2021883a 	mov	r16,r4
   203c4:	002574c0 	call	2574c <__sflags>
   203c8:	1025883a 	mov	r18,r2
   203cc:	8009883a 	mov	r4,r16
   203d0:	0023883a 	mov	r17,zero
   203d4:	1000081e 	bne	r2,zero,203f8 <_fopen_r+0x5c>
   203d8:	8805883a 	mov	r2,r17
   203dc:	dfc00517 	ldw	ra,20(sp)
   203e0:	dcc00417 	ldw	r19,16(sp)
   203e4:	dc800317 	ldw	r18,12(sp)
   203e8:	dc400217 	ldw	r17,8(sp)
   203ec:	dc000117 	ldw	r16,4(sp)
   203f0:	dec00604 	addi	sp,sp,24
   203f4:	f800283a 	ret
   203f8:	002565c0 	call	2565c <__sfp>
   203fc:	1023883a 	mov	r17,r2
   20400:	980b883a 	mov	r5,r19
   20404:	8009883a 	mov	r4,r16
   20408:	01c06d84 	movi	r7,438
   2040c:	103ff226 	beq	r2,zero,203d8 <_fopen_r+0x3c>
   20410:	d9800017 	ldw	r6,0(sp)
   20414:	00213900 	call	21390 <_open_r>
   20418:	10001816 	blt	r2,zero,2047c <_fopen_r+0xe0>
   2041c:	00c000b4 	movhi	r3,2
   20420:	18c5fd04 	addi	r3,r3,6132
   20424:	923fffcc 	andi	r8,r18,65535
   20428:	8880038d 	sth	r2,14(r17)
   2042c:	008000b4 	movhi	r2,2
   20430:	10861c04 	addi	r2,r2,6256
   20434:	88800815 	stw	r2,32(r17)
   20438:	88c00915 	stw	r3,36(r17)
   2043c:	008000b4 	movhi	r2,2
   20440:	1085e304 	addi	r2,r2,6028
   20444:	00c000b4 	movhi	r3,2
   20448:	18c5e104 	addi	r3,r3,6020
   2044c:	4200400c 	andi	r8,r8,256
   20450:	8c80030d 	sth	r18,12(r17)
   20454:	8009883a 	mov	r4,r16
   20458:	880b883a 	mov	r5,r17
   2045c:	000d883a 	mov	r6,zero
   20460:	01c00084 	movi	r7,2
   20464:	88800a15 	stw	r2,40(r17)
   20468:	88c00b15 	stw	r3,44(r17)
   2046c:	8c400715 	stw	r17,28(r17)
   20470:	403fd926 	beq	r8,zero,203d8 <_fopen_r+0x3c>
   20474:	002050c0 	call	2050c <_fseek_r>
   20478:	003fd706 	br	203d8 <_fopen_r+0x3c>
   2047c:	00254e40 	call	254e4 <__sfp_lock_acquire>
   20480:	8800030d 	sth	zero,12(r17)
   20484:	00254e80 	call	254e8 <__sfp_lock_release>
   20488:	0023883a 	mov	r17,zero
   2048c:	003fd206 	br	203d8 <_fopen_r+0x3c>

00020490 <fopen>:
   20490:	018000f4 	movhi	r6,3
   20494:	31832d04 	addi	r6,r6,3252
   20498:	2007883a 	mov	r3,r4
   2049c:	31000017 	ldw	r4,0(r6)
   204a0:	280d883a 	mov	r6,r5
   204a4:	180b883a 	mov	r5,r3
   204a8:	002039c1 	jmpi	2039c <_fopen_r>

000204ac <fprintf>:
   204ac:	defffc04 	addi	sp,sp,-16
   204b0:	dfc00115 	stw	ra,4(sp)
   204b4:	d9800215 	stw	r6,8(sp)
   204b8:	d9c00315 	stw	r7,12(sp)
   204bc:	d8800204 	addi	r2,sp,8
   204c0:	100d883a 	mov	r6,r2
   204c4:	d8800015 	stw	r2,0(sp)
   204c8:	00238480 	call	23848 <__vfprintf_internal>
   204cc:	dfc00117 	ldw	ra,4(sp)
   204d0:	dec00404 	addi	sp,sp,16
   204d4:	f800283a 	ret

000204d8 <_fprintf_r>:
   204d8:	defffd04 	addi	sp,sp,-12
   204dc:	2807883a 	mov	r3,r5
   204e0:	dfc00115 	stw	ra,4(sp)
   204e4:	d9c00215 	stw	r7,8(sp)
   204e8:	d8800204 	addi	r2,sp,8
   204ec:	300b883a 	mov	r5,r6
   204f0:	1809883a 	mov	r4,r3
   204f4:	100d883a 	mov	r6,r2
   204f8:	d8800015 	stw	r2,0(sp)
   204fc:	00238480 	call	23848 <__vfprintf_internal>
   20500:	dfc00117 	ldw	ra,4(sp)
   20504:	dec00304 	addi	sp,sp,12
   20508:	f800283a 	ret

0002050c <_fseek_r>:
   2050c:	deffe804 	addi	sp,sp,-96
   20510:	dd801515 	stw	r22,84(sp)
   20514:	dcc01215 	stw	r19,72(sp)
   20518:	dc801115 	stw	r18,68(sp)
   2051c:	dc000f15 	stw	r16,60(sp)
   20520:	dfc01715 	stw	ra,92(sp)
   20524:	ddc01615 	stw	r23,88(sp)
   20528:	dd401415 	stw	r21,80(sp)
   2052c:	dd001315 	stw	r20,76(sp)
   20530:	dc401015 	stw	r17,64(sp)
   20534:	2025883a 	mov	r18,r4
   20538:	2821883a 	mov	r16,r5
   2053c:	302d883a 	mov	r22,r6
   20540:	3827883a 	mov	r19,r7
   20544:	20000226 	beq	r4,zero,20550 <_fseek_r+0x44>
   20548:	20800e17 	ldw	r2,56(r4)
   2054c:	10007826 	beq	r2,zero,20730 <_fseek_r+0x224>
   20550:	8080030b 	ldhu	r2,12(r16)
   20554:	00c04204 	movi	r3,264
   20558:	1080420c 	andi	r2,r2,264
   2055c:	10c07926 	beq	r2,r3,20744 <_fseek_r+0x238>
   20560:	85400a17 	ldw	r21,40(r16)
   20564:	a800ea26 	beq	r21,zero,20910 <_fseek_r+0x404>
   20568:	00800044 	movi	r2,1
   2056c:	98805f26 	beq	r19,r2,206ec <_fseek_r+0x1e0>
   20570:	00800084 	movi	r2,2
   20574:	98801026 	beq	r19,r2,205b8 <_fseek_r+0xac>
   20578:	98000f26 	beq	r19,zero,205b8 <_fseek_r+0xac>
   2057c:	00800584 	movi	r2,22
   20580:	013fffc4 	movi	r4,-1
   20584:	90800015 	stw	r2,0(r18)
   20588:	2005883a 	mov	r2,r4
   2058c:	dfc01717 	ldw	ra,92(sp)
   20590:	ddc01617 	ldw	r23,88(sp)
   20594:	dd801517 	ldw	r22,84(sp)
   20598:	dd401417 	ldw	r21,80(sp)
   2059c:	dd001317 	ldw	r20,76(sp)
   205a0:	dcc01217 	ldw	r19,72(sp)
   205a4:	dc801117 	ldw	r18,68(sp)
   205a8:	dc401017 	ldw	r17,64(sp)
   205ac:	dc000f17 	ldw	r16,60(sp)
   205b0:	dec01804 	addi	sp,sp,96
   205b4:	f800283a 	ret
   205b8:	81800417 	ldw	r6,16(r16)
   205bc:	0023883a 	mov	r17,zero
   205c0:	002f883a 	mov	r23,zero
   205c4:	3000a626 	beq	r6,zero,20860 <_fseek_r+0x354>
   205c8:	8100030b 	ldhu	r4,12(r16)
   205cc:	2082068c 	andi	r2,r4,2074
   205d0:	1000081e 	bne	r2,zero,205f4 <_fseek_r+0xe8>
   205d4:	2081000c 	andi	r2,r4,1024
   205d8:	10001b1e 	bne	r2,zero,20648 <_fseek_r+0x13c>
   205dc:	008000b4 	movhi	r2,2
   205e0:	1085e304 	addi	r2,r2,6028
   205e4:	a8800926 	beq	r21,r2,2060c <_fseek_r+0x100>
   205e8:	8080030b 	ldhu	r2,12(r16)
   205ec:	10820014 	ori	r2,r2,2048
   205f0:	8080030d 	sth	r2,12(r16)
   205f4:	9009883a 	mov	r4,r18
   205f8:	800b883a 	mov	r5,r16
   205fc:	002525c0 	call	2525c <_fflush_r>
   20600:	1000a326 	beq	r2,zero,20890 <_fseek_r+0x384>
   20604:	013fffc4 	movi	r4,-1
   20608:	003fdf06 	br	20588 <_fseek_r+0x7c>
   2060c:	8140038f 	ldh	r5,14(r16)
   20610:	283ff516 	blt	r5,zero,205e8 <_fseek_r+0xdc>
   20614:	9009883a 	mov	r4,r18
   20618:	d80d883a 	mov	r6,sp
   2061c:	002096c0 	call	2096c <_fstat_r>
   20620:	103ff11e 	bne	r2,zero,205e8 <_fseek_r+0xdc>
   20624:	d8800117 	ldw	r2,4(sp)
   20628:	00e00014 	movui	r3,32768
   2062c:	10bc000c 	andi	r2,r2,61440
   20630:	10ffed1e 	bne	r2,r3,205e8 <_fseek_r+0xdc>
   20634:	80c0030b 	ldhu	r3,12(r16)
   20638:	00810004 	movi	r2,1024
   2063c:	80801315 	stw	r2,76(r16)
   20640:	1886b03a 	or	r3,r3,r2
   20644:	80c0030d 	sth	r3,12(r16)
   20648:	9800701e 	bne	r19,zero,2080c <_fseek_r+0x300>
   2064c:	b029883a 	mov	r20,r22
   20650:	b804c03a 	cmpne	r2,r23,zero
   20654:	10003f1e 	bne	r2,zero,20754 <_fseek_r+0x248>
   20658:	8100030b 	ldhu	r4,12(r16)
   2065c:	2084000c 	andi	r2,r4,4096
   20660:	1000a126 	beq	r2,zero,208e8 <_fseek_r+0x3dc>
   20664:	81801417 	ldw	r6,80(r16)
   20668:	80c00117 	ldw	r3,4(r16)
   2066c:	81400c17 	ldw	r5,48(r16)
   20670:	30e3c83a 	sub	r17,r6,r3
   20674:	28008026 	beq	r5,zero,20878 <_fseek_r+0x36c>
   20678:	81c00f17 	ldw	r7,60(r16)
   2067c:	89e3c83a 	sub	r17,r17,r7
   20680:	80800e17 	ldw	r2,56(r16)
   20684:	81800417 	ldw	r6,16(r16)
   20688:	88c7883a 	add	r3,r17,r3
   2068c:	1185c83a 	sub	r2,r2,r6
   20690:	11cf883a 	add	r7,r2,r7
   20694:	1887c83a 	sub	r3,r3,r2
   20698:	2088000c 	andi	r2,r4,8192
   2069c:	10003e1e 	bne	r2,zero,20798 <_fseek_r+0x28c>
   206a0:	a0c03d16 	blt	r20,r3,20798 <_fseek_r+0x28c>
   206a4:	38c5883a 	add	r2,r7,r3
   206a8:	a0803b2e 	bgeu	r20,r2,20798 <_fseek_r+0x28c>
   206ac:	a0c5c83a 	sub	r2,r20,r3
   206b0:	3887c83a 	sub	r3,r7,r2
   206b4:	3085883a 	add	r2,r6,r2
   206b8:	80800015 	stw	r2,0(r16)
   206bc:	80c00115 	stw	r3,4(r16)
   206c0:	28000526 	beq	r5,zero,206d8 <_fseek_r+0x1cc>
   206c4:	80801004 	addi	r2,r16,64
   206c8:	28800226 	beq	r5,r2,206d4 <_fseek_r+0x1c8>
   206cc:	9009883a 	mov	r4,r18
   206d0:	00259180 	call	25918 <_free_r>
   206d4:	80000c15 	stw	zero,48(r16)
   206d8:	8080030b 	ldhu	r2,12(r16)
   206dc:	0009883a 	mov	r4,zero
   206e0:	10bff7cc 	andi	r2,r2,65503
   206e4:	8080030d 	sth	r2,12(r16)
   206e8:	003fa706 	br	20588 <_fseek_r+0x7c>
   206ec:	9009883a 	mov	r4,r18
   206f0:	800b883a 	mov	r5,r16
   206f4:	002525c0 	call	2525c <_fflush_r>
   206f8:	8100030b 	ldhu	r4,12(r16)
   206fc:	2084000c 	andi	r2,r4,4096
   20700:	10008726 	beq	r2,zero,20920 <_fseek_r+0x414>
   20704:	84401417 	ldw	r17,80(r16)
   20708:	2080010c 	andi	r2,r4,4
   2070c:	1000171e 	bne	r2,zero,2076c <_fseek_r+0x260>
   20710:	2080020c 	andi	r2,r4,8
   20714:	10003b26 	beq	r2,zero,20804 <_fseek_r+0x2f8>
   20718:	80800017 	ldw	r2,0(r16)
   2071c:	10003926 	beq	r2,zero,20804 <_fseek_r+0x2f8>
   20720:	81800417 	ldw	r6,16(r16)
   20724:	1185c83a 	sub	r2,r2,r6
   20728:	88a3883a 	add	r17,r17,r2
   2072c:	00001606 	br	20788 <_fseek_r+0x27c>
   20730:	00254f40 	call	254f4 <__sinit>
   20734:	8080030b 	ldhu	r2,12(r16)
   20738:	00c04204 	movi	r3,264
   2073c:	1080420c 	andi	r2,r2,264
   20740:	10ff871e 	bne	r2,r3,20560 <_fseek_r+0x54>
   20744:	9009883a 	mov	r4,r18
   20748:	800b883a 	mov	r5,r16
   2074c:	002525c0 	call	2525c <_fflush_r>
   20750:	003f8306 	br	20560 <_fseek_r+0x54>
   20754:	81400c17 	ldw	r5,48(r16)
   20758:	28004526 	beq	r5,zero,20870 <_fseek_r+0x364>
   2075c:	8100030b 	ldhu	r4,12(r16)
   20760:	80c00117 	ldw	r3,4(r16)
   20764:	81c00f17 	ldw	r7,60(r16)
   20768:	003fc506 	br	20680 <_fseek_r+0x174>
   2076c:	80c00117 	ldw	r3,4(r16)
   20770:	80800c17 	ldw	r2,48(r16)
   20774:	88e3c83a 	sub	r17,r17,r3
   20778:	10002226 	beq	r2,zero,20804 <_fseek_r+0x2f8>
   2077c:	81c00f17 	ldw	r7,60(r16)
   20780:	81800417 	ldw	r6,16(r16)
   20784:	89e3c83a 	sub	r17,r17,r7
   20788:	b46d883a 	add	r22,r22,r17
   2078c:	0027883a 	mov	r19,zero
   20790:	05c00044 	movi	r23,1
   20794:	003f8b06 	br	205c4 <_fseek_r+0xb8>
   20798:	80801317 	ldw	r2,76(r16)
   2079c:	81400717 	ldw	r5,28(r16)
   207a0:	9009883a 	mov	r4,r18
   207a4:	0085c83a 	sub	r2,zero,r2
   207a8:	a0a2703a 	and	r17,r20,r2
   207ac:	880d883a 	mov	r6,r17
   207b0:	000f883a 	mov	r7,zero
   207b4:	a83ee83a 	callr	r21
   207b8:	00ffffc4 	movi	r3,-1
   207bc:	10ff8d26 	beq	r2,r3,205f4 <_fseek_r+0xe8>
   207c0:	80800417 	ldw	r2,16(r16)
   207c4:	81400c17 	ldw	r5,48(r16)
   207c8:	80000115 	stw	zero,4(r16)
   207cc:	80800015 	stw	r2,0(r16)
   207d0:	28000526 	beq	r5,zero,207e8 <_fseek_r+0x2dc>
   207d4:	80801004 	addi	r2,r16,64
   207d8:	28800226 	beq	r5,r2,207e4 <_fseek_r+0x2d8>
   207dc:	9009883a 	mov	r4,r18
   207e0:	00259180 	call	25918 <_free_r>
   207e4:	80000c15 	stw	zero,48(r16)
   207e8:	8080030b 	ldhu	r2,12(r16)
   207ec:	a463c83a 	sub	r17,r20,r17
   207f0:	10bff7cc 	andi	r2,r2,65503
   207f4:	8080030d 	sth	r2,12(r16)
   207f8:	88000c1e 	bne	r17,zero,2082c <_fseek_r+0x320>
   207fc:	0009883a 	mov	r4,zero
   20800:	003f6106 	br	20588 <_fseek_r+0x7c>
   20804:	81800417 	ldw	r6,16(r16)
   20808:	003fdf06 	br	20788 <_fseek_r+0x27c>
   2080c:	8140038f 	ldh	r5,14(r16)
   20810:	9009883a 	mov	r4,r18
   20814:	d80d883a 	mov	r6,sp
   20818:	002096c0 	call	2096c <_fstat_r>
   2081c:	103f751e 	bne	r2,zero,205f4 <_fseek_r+0xe8>
   20820:	d8800417 	ldw	r2,16(sp)
   20824:	b0a9883a 	add	r20,r22,r2
   20828:	003f8906 	br	20650 <_fseek_r+0x144>
   2082c:	9009883a 	mov	r4,r18
   20830:	800b883a 	mov	r5,r16
   20834:	00215340 	call	21534 <__srefill_r>
   20838:	103f6e1e 	bne	r2,zero,205f4 <_fseek_r+0xe8>
   2083c:	80c00117 	ldw	r3,4(r16)
   20840:	1c7f6c36 	bltu	r3,r17,205f4 <_fseek_r+0xe8>
   20844:	80800017 	ldw	r2,0(r16)
   20848:	1c47c83a 	sub	r3,r3,r17
   2084c:	0009883a 	mov	r4,zero
   20850:	1445883a 	add	r2,r2,r17
   20854:	80c00115 	stw	r3,4(r16)
   20858:	80800015 	stw	r2,0(r16)
   2085c:	003f4a06 	br	20588 <_fseek_r+0x7c>
   20860:	9009883a 	mov	r4,r18
   20864:	800b883a 	mov	r5,r16
   20868:	0020abc0 	call	20abc <__smakebuf_r>
   2086c:	003f5606 	br	205c8 <_fseek_r+0xbc>
   20870:	8100030b 	ldhu	r4,12(r16)
   20874:	80c00117 	ldw	r3,4(r16)
   20878:	80800017 	ldw	r2,0(r16)
   2087c:	81800417 	ldw	r6,16(r16)
   20880:	1185c83a 	sub	r2,r2,r6
   20884:	10cf883a 	add	r7,r2,r3
   20888:	8887c83a 	sub	r3,r17,r2
   2088c:	003f8206 	br	20698 <_fseek_r+0x18c>
   20890:	81400717 	ldw	r5,28(r16)
   20894:	b00d883a 	mov	r6,r22
   20898:	980f883a 	mov	r7,r19
   2089c:	9009883a 	mov	r4,r18
   208a0:	a83ee83a 	callr	r21
   208a4:	00ffffc4 	movi	r3,-1
   208a8:	10ff5626 	beq	r2,r3,20604 <_fseek_r+0xf8>
   208ac:	81400c17 	ldw	r5,48(r16)
   208b0:	28000526 	beq	r5,zero,208c8 <_fseek_r+0x3bc>
   208b4:	80801004 	addi	r2,r16,64
   208b8:	28800226 	beq	r5,r2,208c4 <_fseek_r+0x3b8>
   208bc:	9009883a 	mov	r4,r18
   208c0:	00259180 	call	25918 <_free_r>
   208c4:	80000c15 	stw	zero,48(r16)
   208c8:	8080030b 	ldhu	r2,12(r16)
   208cc:	80c00417 	ldw	r3,16(r16)
   208d0:	0009883a 	mov	r4,zero
   208d4:	10bdf7cc 	andi	r2,r2,63455
   208d8:	8080030d 	sth	r2,12(r16)
   208dc:	80c00015 	stw	r3,0(r16)
   208e0:	80000115 	stw	zero,4(r16)
   208e4:	003f2806 	br	20588 <_fseek_r+0x7c>
   208e8:	81400717 	ldw	r5,28(r16)
   208ec:	000d883a 	mov	r6,zero
   208f0:	9009883a 	mov	r4,r18
   208f4:	01c00044 	movi	r7,1
   208f8:	a83ee83a 	callr	r21
   208fc:	100d883a 	mov	r6,r2
   20900:	00bfffc4 	movi	r2,-1
   20904:	30bf3b26 	beq	r6,r2,205f4 <_fseek_r+0xe8>
   20908:	8100030b 	ldhu	r4,12(r16)
   2090c:	003f5606 	br	20668 <_fseek_r+0x15c>
   20910:	00800744 	movi	r2,29
   20914:	013fffc4 	movi	r4,-1
   20918:	90800015 	stw	r2,0(r18)
   2091c:	003f1a06 	br	20588 <_fseek_r+0x7c>
   20920:	81400717 	ldw	r5,28(r16)
   20924:	980f883a 	mov	r7,r19
   20928:	9009883a 	mov	r4,r18
   2092c:	000d883a 	mov	r6,zero
   20930:	a83ee83a 	callr	r21
   20934:	1023883a 	mov	r17,r2
   20938:	00bfffc4 	movi	r2,-1
   2093c:	88bf3126 	beq	r17,r2,20604 <_fseek_r+0xf8>
   20940:	8100030b 	ldhu	r4,12(r16)
   20944:	003f7006 	br	20708 <_fseek_r+0x1fc>

00020948 <fseek>:
   20948:	008000f4 	movhi	r2,3
   2094c:	10832d04 	addi	r2,r2,3252
   20950:	2013883a 	mov	r9,r4
   20954:	11000017 	ldw	r4,0(r2)
   20958:	2805883a 	mov	r2,r5
   2095c:	300f883a 	mov	r7,r6
   20960:	480b883a 	mov	r5,r9
   20964:	100d883a 	mov	r6,r2
   20968:	002050c1 	jmpi	2050c <_fseek_r>

0002096c <_fstat_r>:
   2096c:	defffd04 	addi	sp,sp,-12
   20970:	dc000015 	stw	r16,0(sp)
   20974:	040000f4 	movhi	r16,3
   20978:	840a5104 	addi	r16,r16,10564
   2097c:	dc400115 	stw	r17,4(sp)
   20980:	80000015 	stw	zero,0(r16)
   20984:	2023883a 	mov	r17,r4
   20988:	2809883a 	mov	r4,r5
   2098c:	300b883a 	mov	r5,r6
   20990:	dfc00215 	stw	ra,8(sp)
   20994:	002a60c0 	call	2a60c <fstat>
   20998:	1007883a 	mov	r3,r2
   2099c:	00bfffc4 	movi	r2,-1
   209a0:	18800626 	beq	r3,r2,209bc <_fstat_r+0x50>
   209a4:	1805883a 	mov	r2,r3
   209a8:	dfc00217 	ldw	ra,8(sp)
   209ac:	dc400117 	ldw	r17,4(sp)
   209b0:	dc000017 	ldw	r16,0(sp)
   209b4:	dec00304 	addi	sp,sp,12
   209b8:	f800283a 	ret
   209bc:	80800017 	ldw	r2,0(r16)
   209c0:	103ff826 	beq	r2,zero,209a4 <_fstat_r+0x38>
   209c4:	88800015 	stw	r2,0(r17)
   209c8:	1805883a 	mov	r2,r3
   209cc:	dfc00217 	ldw	ra,8(sp)
   209d0:	dc400117 	ldw	r17,4(sp)
   209d4:	dc000017 	ldw	r16,0(sp)
   209d8:	dec00304 	addi	sp,sp,12
   209dc:	f800283a 	ret

000209e0 <_fwrite_r>:
   209e0:	defff604 	addi	sp,sp,-40
   209e4:	dc400615 	stw	r17,24(sp)
   209e8:	39a3383a 	mul	r17,r7,r6
   209ec:	00800044 	movi	r2,1
   209f0:	dcc00815 	stw	r19,32(sp)
   209f4:	dc800715 	stw	r18,28(sp)
   209f8:	dc000515 	stw	r16,20(sp)
   209fc:	dfc00915 	stw	ra,36(sp)
   20a00:	3825883a 	mov	r18,r7
   20a04:	3027883a 	mov	r19,r6
   20a08:	2021883a 	mov	r16,r4
   20a0c:	d9400015 	stw	r5,0(sp)
   20a10:	d8800315 	stw	r2,12(sp)
   20a14:	dc400115 	stw	r17,4(sp)
   20a18:	dc400415 	stw	r17,16(sp)
   20a1c:	dec00215 	stw	sp,8(sp)
   20a20:	20000226 	beq	r4,zero,20a2c <_fwrite_r+0x4c>
   20a24:	20800e17 	ldw	r2,56(r4)
   20a28:	10001226 	beq	r2,zero,20a74 <_fwrite_r+0x94>
   20a2c:	d9400a17 	ldw	r5,40(sp)
   20a30:	8009883a 	mov	r4,r16
   20a34:	d9800204 	addi	r6,sp,8
   20a38:	0025c2c0 	call	25c2c <__sfvwrite_r>
   20a3c:	980b883a 	mov	r5,r19
   20a40:	10000426 	beq	r2,zero,20a54 <_fwrite_r+0x74>
   20a44:	d9000417 	ldw	r4,16(sp)
   20a48:	8909c83a 	sub	r4,r17,r4
   20a4c:	0029e480 	call	29e48 <__udivsi3>
   20a50:	1025883a 	mov	r18,r2
   20a54:	9005883a 	mov	r2,r18
   20a58:	dfc00917 	ldw	ra,36(sp)
   20a5c:	dcc00817 	ldw	r19,32(sp)
   20a60:	dc800717 	ldw	r18,28(sp)
   20a64:	dc400617 	ldw	r17,24(sp)
   20a68:	dc000517 	ldw	r16,20(sp)
   20a6c:	dec00a04 	addi	sp,sp,40
   20a70:	f800283a 	ret
   20a74:	00254f40 	call	254f4 <__sinit>
   20a78:	003fec06 	br	20a2c <_fwrite_r+0x4c>

00020a7c <fwrite>:
   20a7c:	008000f4 	movhi	r2,3
   20a80:	10832d04 	addi	r2,r2,3252
   20a84:	2017883a 	mov	r11,r4
   20a88:	11000017 	ldw	r4,0(r2)
   20a8c:	defffe04 	addi	sp,sp,-8
   20a90:	3013883a 	mov	r9,r6
   20a94:	2805883a 	mov	r2,r5
   20a98:	d9c00015 	stw	r7,0(sp)
   20a9c:	580b883a 	mov	r5,r11
   20aa0:	100d883a 	mov	r6,r2
   20aa4:	480f883a 	mov	r7,r9
   20aa8:	dfc00115 	stw	ra,4(sp)
   20aac:	00209e00 	call	209e0 <_fwrite_r>
   20ab0:	dfc00117 	ldw	ra,4(sp)
   20ab4:	dec00204 	addi	sp,sp,8
   20ab8:	f800283a 	ret

00020abc <__smakebuf_r>:
   20abc:	2880030b 	ldhu	r2,12(r5)
   20ac0:	deffed04 	addi	sp,sp,-76
   20ac4:	dc401015 	stw	r17,64(sp)
   20ac8:	1080008c 	andi	r2,r2,2
   20acc:	dc000f15 	stw	r16,60(sp)
   20ad0:	dfc01215 	stw	ra,72(sp)
   20ad4:	dc801115 	stw	r18,68(sp)
   20ad8:	2821883a 	mov	r16,r5
   20adc:	2023883a 	mov	r17,r4
   20ae0:	10000b26 	beq	r2,zero,20b10 <__smakebuf_r+0x54>
   20ae4:	28c010c4 	addi	r3,r5,67
   20ae8:	00800044 	movi	r2,1
   20aec:	28800515 	stw	r2,20(r5)
   20af0:	28c00415 	stw	r3,16(r5)
   20af4:	28c00015 	stw	r3,0(r5)
   20af8:	dfc01217 	ldw	ra,72(sp)
   20afc:	dc801117 	ldw	r18,68(sp)
   20b00:	dc401017 	ldw	r17,64(sp)
   20b04:	dc000f17 	ldw	r16,60(sp)
   20b08:	dec01304 	addi	sp,sp,76
   20b0c:	f800283a 	ret
   20b10:	2940038f 	ldh	r5,14(r5)
   20b14:	28002116 	blt	r5,zero,20b9c <__smakebuf_r+0xe0>
   20b18:	d80d883a 	mov	r6,sp
   20b1c:	002096c0 	call	2096c <_fstat_r>
   20b20:	10001e16 	blt	r2,zero,20b9c <__smakebuf_r+0xe0>
   20b24:	d8800117 	ldw	r2,4(sp)
   20b28:	00e00014 	movui	r3,32768
   20b2c:	113c000c 	andi	r4,r2,61440
   20b30:	20c03126 	beq	r4,r3,20bf8 <__smakebuf_r+0x13c>
   20b34:	8080030b 	ldhu	r2,12(r16)
   20b38:	00c80004 	movi	r3,8192
   20b3c:	10820014 	ori	r2,r2,2048
   20b40:	8080030d 	sth	r2,12(r16)
   20b44:	20c01e26 	beq	r4,r3,20bc0 <__smakebuf_r+0x104>
   20b48:	04810004 	movi	r18,1024
   20b4c:	8809883a 	mov	r4,r17
   20b50:	900b883a 	mov	r5,r18
   20b54:	0020c500 	call	20c50 <_malloc_r>
   20b58:	1009883a 	mov	r4,r2
   20b5c:	10003126 	beq	r2,zero,20c24 <__smakebuf_r+0x168>
   20b60:	80c0030b 	ldhu	r3,12(r16)
   20b64:	008000b4 	movhi	r2,2
   20b68:	10957604 	addi	r2,r2,21976
   20b6c:	88800f15 	stw	r2,60(r17)
   20b70:	18c02014 	ori	r3,r3,128
   20b74:	84800515 	stw	r18,20(r16)
   20b78:	80c0030d 	sth	r3,12(r16)
   20b7c:	81000415 	stw	r4,16(r16)
   20b80:	81000015 	stw	r4,0(r16)
   20b84:	dfc01217 	ldw	ra,72(sp)
   20b88:	dc801117 	ldw	r18,68(sp)
   20b8c:	dc401017 	ldw	r17,64(sp)
   20b90:	dc000f17 	ldw	r16,60(sp)
   20b94:	dec01304 	addi	sp,sp,76
   20b98:	f800283a 	ret
   20b9c:	80c0030b 	ldhu	r3,12(r16)
   20ba0:	1880200c 	andi	r2,r3,128
   20ba4:	10000426 	beq	r2,zero,20bb8 <__smakebuf_r+0xfc>
   20ba8:	04801004 	movi	r18,64
   20bac:	18820014 	ori	r2,r3,2048
   20bb0:	8080030d 	sth	r2,12(r16)
   20bb4:	003fe506 	br	20b4c <__smakebuf_r+0x90>
   20bb8:	04810004 	movi	r18,1024
   20bbc:	003ffb06 	br	20bac <__smakebuf_r+0xf0>
   20bc0:	8140038f 	ldh	r5,14(r16)
   20bc4:	8809883a 	mov	r4,r17
   20bc8:	00262480 	call	26248 <_isatty_r>
   20bcc:	103fde26 	beq	r2,zero,20b48 <__smakebuf_r+0x8c>
   20bd0:	8080030b 	ldhu	r2,12(r16)
   20bd4:	80c010c4 	addi	r3,r16,67
   20bd8:	04810004 	movi	r18,1024
   20bdc:	10800054 	ori	r2,r2,1
   20be0:	8080030d 	sth	r2,12(r16)
   20be4:	00800044 	movi	r2,1
   20be8:	80c00415 	stw	r3,16(r16)
   20bec:	80800515 	stw	r2,20(r16)
   20bf0:	80c00015 	stw	r3,0(r16)
   20bf4:	003fd506 	br	20b4c <__smakebuf_r+0x90>
   20bf8:	80c00a17 	ldw	r3,40(r16)
   20bfc:	008000b4 	movhi	r2,2
   20c00:	1085e304 	addi	r2,r2,6028
   20c04:	18bfcb1e 	bne	r3,r2,20b34 <__smakebuf_r+0x78>
   20c08:	8080030b 	ldhu	r2,12(r16)
   20c0c:	00c10004 	movi	r3,1024
   20c10:	1825883a 	mov	r18,r3
   20c14:	10c4b03a 	or	r2,r2,r3
   20c18:	8080030d 	sth	r2,12(r16)
   20c1c:	80c01315 	stw	r3,76(r16)
   20c20:	003fca06 	br	20b4c <__smakebuf_r+0x90>
   20c24:	8100030b 	ldhu	r4,12(r16)
   20c28:	2080800c 	andi	r2,r4,512
   20c2c:	103fb21e 	bne	r2,zero,20af8 <__smakebuf_r+0x3c>
   20c30:	80c010c4 	addi	r3,r16,67
   20c34:	21000094 	ori	r4,r4,2
   20c38:	00800044 	movi	r2,1
   20c3c:	80800515 	stw	r2,20(r16)
   20c40:	8100030d 	sth	r4,12(r16)
   20c44:	80c00415 	stw	r3,16(r16)
   20c48:	80c00015 	stw	r3,0(r16)
   20c4c:	003faa06 	br	20af8 <__smakebuf_r+0x3c>

00020c50 <_malloc_r>:
   20c50:	defff604 	addi	sp,sp,-40
   20c54:	28c002c4 	addi	r3,r5,11
   20c58:	00800584 	movi	r2,22
   20c5c:	dc800215 	stw	r18,8(sp)
   20c60:	dfc00915 	stw	ra,36(sp)
   20c64:	df000815 	stw	fp,32(sp)
   20c68:	ddc00715 	stw	r23,28(sp)
   20c6c:	dd800615 	stw	r22,24(sp)
   20c70:	dd400515 	stw	r21,20(sp)
   20c74:	dd000415 	stw	r20,16(sp)
   20c78:	dcc00315 	stw	r19,12(sp)
   20c7c:	dc400115 	stw	r17,4(sp)
   20c80:	dc000015 	stw	r16,0(sp)
   20c84:	2025883a 	mov	r18,r4
   20c88:	10c01236 	bltu	r2,r3,20cd4 <_malloc_r+0x84>
   20c8c:	04400404 	movi	r17,16
   20c90:	8940142e 	bgeu	r17,r5,20ce4 <_malloc_r+0x94>
   20c94:	00800304 	movi	r2,12
   20c98:	0007883a 	mov	r3,zero
   20c9c:	90800015 	stw	r2,0(r18)
   20ca0:	1805883a 	mov	r2,r3
   20ca4:	dfc00917 	ldw	ra,36(sp)
   20ca8:	df000817 	ldw	fp,32(sp)
   20cac:	ddc00717 	ldw	r23,28(sp)
   20cb0:	dd800617 	ldw	r22,24(sp)
   20cb4:	dd400517 	ldw	r21,20(sp)
   20cb8:	dd000417 	ldw	r20,16(sp)
   20cbc:	dcc00317 	ldw	r19,12(sp)
   20cc0:	dc800217 	ldw	r18,8(sp)
   20cc4:	dc400117 	ldw	r17,4(sp)
   20cc8:	dc000017 	ldw	r16,0(sp)
   20ccc:	dec00a04 	addi	sp,sp,40
   20cd0:	f800283a 	ret
   20cd4:	00bffe04 	movi	r2,-8
   20cd8:	18a2703a 	and	r17,r3,r2
   20cdc:	883fed16 	blt	r17,zero,20c94 <_malloc_r+0x44>
   20ce0:	897fec36 	bltu	r17,r5,20c94 <_malloc_r+0x44>
   20ce4:	9009883a 	mov	r4,r18
   20ce8:	002ab080 	call	2ab08 <__malloc_lock>
   20cec:	00807dc4 	movi	r2,503
   20cf0:	14402b2e 	bgeu	r2,r17,20da0 <_malloc_r+0x150>
   20cf4:	8806d27a 	srli	r3,r17,9
   20cf8:	18003f1e 	bne	r3,zero,20df8 <_malloc_r+0x1a8>
   20cfc:	880cd0fa 	srli	r6,r17,3
   20d00:	300490fa 	slli	r2,r6,3
   20d04:	02c000f4 	movhi	r11,3
   20d08:	5afd2d04 	addi	r11,r11,-2892
   20d0c:	12cb883a 	add	r5,r2,r11
   20d10:	2c000317 	ldw	r16,12(r5)
   20d14:	580f883a 	mov	r7,r11
   20d18:	2c00041e 	bne	r5,r16,20d2c <_malloc_r+0xdc>
   20d1c:	00000a06 	br	20d48 <_malloc_r+0xf8>
   20d20:	1800860e 	bge	r3,zero,20f3c <_malloc_r+0x2ec>
   20d24:	84000317 	ldw	r16,12(r16)
   20d28:	2c000726 	beq	r5,r16,20d48 <_malloc_r+0xf8>
   20d2c:	80800117 	ldw	r2,4(r16)
   20d30:	00ffff04 	movi	r3,-4
   20d34:	10c8703a 	and	r4,r2,r3
   20d38:	2447c83a 	sub	r3,r4,r17
   20d3c:	008003c4 	movi	r2,15
   20d40:	10fff70e 	bge	r2,r3,20d20 <_malloc_r+0xd0>
   20d44:	31bfffc4 	addi	r6,r6,-1
   20d48:	32400044 	addi	r9,r6,1
   20d4c:	028000f4 	movhi	r10,3
   20d50:	52bd2f04 	addi	r10,r10,-2884
   20d54:	54000217 	ldw	r16,8(r10)
   20d58:	8280a026 	beq	r16,r10,20fdc <_malloc_r+0x38c>
   20d5c:	80800117 	ldw	r2,4(r16)
   20d60:	00ffff04 	movi	r3,-4
   20d64:	10ca703a 	and	r5,r2,r3
   20d68:	2c4dc83a 	sub	r6,r5,r17
   20d6c:	008003c4 	movi	r2,15
   20d70:	11808316 	blt	r2,r6,20f80 <_malloc_r+0x330>
   20d74:	52800315 	stw	r10,12(r10)
   20d78:	52800215 	stw	r10,8(r10)
   20d7c:	30002916 	blt	r6,zero,20e24 <_malloc_r+0x1d4>
   20d80:	8147883a 	add	r3,r16,r5
   20d84:	18800117 	ldw	r2,4(r3)
   20d88:	9009883a 	mov	r4,r18
   20d8c:	10800054 	ori	r2,r2,1
   20d90:	18800115 	stw	r2,4(r3)
   20d94:	002ab280 	call	2ab28 <__malloc_unlock>
   20d98:	80c00204 	addi	r3,r16,8
   20d9c:	003fc006 	br	20ca0 <_malloc_r+0x50>
   20da0:	02c000f4 	movhi	r11,3
   20da4:	5afd2d04 	addi	r11,r11,-2892
   20da8:	8ac5883a 	add	r2,r17,r11
   20dac:	14000317 	ldw	r16,12(r2)
   20db0:	580f883a 	mov	r7,r11
   20db4:	8806d0fa 	srli	r3,r17,3
   20db8:	14006c26 	beq	r2,r16,20f6c <_malloc_r+0x31c>
   20dbc:	80c00117 	ldw	r3,4(r16)
   20dc0:	00bfff04 	movi	r2,-4
   20dc4:	81800317 	ldw	r6,12(r16)
   20dc8:	1886703a 	and	r3,r3,r2
   20dcc:	80c7883a 	add	r3,r16,r3
   20dd0:	18800117 	ldw	r2,4(r3)
   20dd4:	81400217 	ldw	r5,8(r16)
   20dd8:	9009883a 	mov	r4,r18
   20ddc:	10800054 	ori	r2,r2,1
   20de0:	18800115 	stw	r2,4(r3)
   20de4:	31400215 	stw	r5,8(r6)
   20de8:	29800315 	stw	r6,12(r5)
   20dec:	002ab280 	call	2ab28 <__malloc_unlock>
   20df0:	80c00204 	addi	r3,r16,8
   20df4:	003faa06 	br	20ca0 <_malloc_r+0x50>
   20df8:	00800104 	movi	r2,4
   20dfc:	10c0052e 	bgeu	r2,r3,20e14 <_malloc_r+0x1c4>
   20e00:	00800504 	movi	r2,20
   20e04:	10c07836 	bltu	r2,r3,20fe8 <_malloc_r+0x398>
   20e08:	198016c4 	addi	r6,r3,91
   20e0c:	300490fa 	slli	r2,r6,3
   20e10:	003fbc06 	br	20d04 <_malloc_r+0xb4>
   20e14:	8804d1ba 	srli	r2,r17,6
   20e18:	11800e04 	addi	r6,r2,56
   20e1c:	300490fa 	slli	r2,r6,3
   20e20:	003fb806 	br	20d04 <_malloc_r+0xb4>
   20e24:	00807fc4 	movi	r2,511
   20e28:	1140bb36 	bltu	r2,r5,21118 <_malloc_r+0x4c8>
   20e2c:	2806d0fa 	srli	r3,r5,3
   20e30:	573ffe04 	addi	fp,r10,-8
   20e34:	00800044 	movi	r2,1
   20e38:	180890fa 	slli	r4,r3,3
   20e3c:	1807d0ba 	srai	r3,r3,2
   20e40:	e1c00117 	ldw	r7,4(fp)
   20e44:	5909883a 	add	r4,r11,r4
   20e48:	21400217 	ldw	r5,8(r4)
   20e4c:	10c4983a 	sll	r2,r2,r3
   20e50:	81000315 	stw	r4,12(r16)
   20e54:	81400215 	stw	r5,8(r16)
   20e58:	388eb03a 	or	r7,r7,r2
   20e5c:	2c000315 	stw	r16,12(r5)
   20e60:	24000215 	stw	r16,8(r4)
   20e64:	e1c00115 	stw	r7,4(fp)
   20e68:	4807883a 	mov	r3,r9
   20e6c:	4800cd16 	blt	r9,zero,211a4 <_malloc_r+0x554>
   20e70:	1807d0ba 	srai	r3,r3,2
   20e74:	00800044 	movi	r2,1
   20e78:	10c8983a 	sll	r4,r2,r3
   20e7c:	39004436 	bltu	r7,r4,20f90 <_malloc_r+0x340>
   20e80:	21c4703a 	and	r2,r4,r7
   20e84:	10000a1e 	bne	r2,zero,20eb0 <_malloc_r+0x260>
   20e88:	2109883a 	add	r4,r4,r4
   20e8c:	00bfff04 	movi	r2,-4
   20e90:	4884703a 	and	r2,r9,r2
   20e94:	3906703a 	and	r3,r7,r4
   20e98:	12400104 	addi	r9,r2,4
   20e9c:	1800041e 	bne	r3,zero,20eb0 <_malloc_r+0x260>
   20ea0:	2109883a 	add	r4,r4,r4
   20ea4:	3904703a 	and	r2,r7,r4
   20ea8:	4a400104 	addi	r9,r9,4
   20eac:	103ffc26 	beq	r2,zero,20ea0 <_malloc_r+0x250>
   20eb0:	480490fa 	slli	r2,r9,3
   20eb4:	4819883a 	mov	r12,r9
   20eb8:	023fff04 	movi	r8,-4
   20ebc:	589b883a 	add	r13,r11,r2
   20ec0:	6807883a 	mov	r3,r13
   20ec4:	014003c4 	movi	r5,15
   20ec8:	1c000317 	ldw	r16,12(r3)
   20ecc:	1c00041e 	bne	r3,r16,20ee0 <_malloc_r+0x290>
   20ed0:	0000a706 	br	21170 <_malloc_r+0x520>
   20ed4:	3000ab0e 	bge	r6,zero,21184 <_malloc_r+0x534>
   20ed8:	84000317 	ldw	r16,12(r16)
   20edc:	1c00a426 	beq	r3,r16,21170 <_malloc_r+0x520>
   20ee0:	80800117 	ldw	r2,4(r16)
   20ee4:	1204703a 	and	r2,r2,r8
   20ee8:	144dc83a 	sub	r6,r2,r17
   20eec:	29bff90e 	bge	r5,r6,20ed4 <_malloc_r+0x284>
   20ef0:	81000317 	ldw	r4,12(r16)
   20ef4:	80c00217 	ldw	r3,8(r16)
   20ef8:	89400054 	ori	r5,r17,1
   20efc:	8445883a 	add	r2,r16,r17
   20f00:	20c00215 	stw	r3,8(r4)
   20f04:	19000315 	stw	r4,12(r3)
   20f08:	81400115 	stw	r5,4(r16)
   20f0c:	1187883a 	add	r3,r2,r6
   20f10:	31000054 	ori	r4,r6,1
   20f14:	50800315 	stw	r2,12(r10)
   20f18:	50800215 	stw	r2,8(r10)
   20f1c:	19800015 	stw	r6,0(r3)
   20f20:	11000115 	stw	r4,4(r2)
   20f24:	12800215 	stw	r10,8(r2)
   20f28:	12800315 	stw	r10,12(r2)
   20f2c:	9009883a 	mov	r4,r18
   20f30:	002ab280 	call	2ab28 <__malloc_unlock>
   20f34:	80c00204 	addi	r3,r16,8
   20f38:	003f5906 	br	20ca0 <_malloc_r+0x50>
   20f3c:	8109883a 	add	r4,r16,r4
   20f40:	20800117 	ldw	r2,4(r4)
   20f44:	80c00217 	ldw	r3,8(r16)
   20f48:	81400317 	ldw	r5,12(r16)
   20f4c:	10800054 	ori	r2,r2,1
   20f50:	20800115 	stw	r2,4(r4)
   20f54:	28c00215 	stw	r3,8(r5)
   20f58:	19400315 	stw	r5,12(r3)
   20f5c:	9009883a 	mov	r4,r18
   20f60:	002ab280 	call	2ab28 <__malloc_unlock>
   20f64:	80c00204 	addi	r3,r16,8
   20f68:	003f4d06 	br	20ca0 <_malloc_r+0x50>
   20f6c:	80800204 	addi	r2,r16,8
   20f70:	14000317 	ldw	r16,12(r2)
   20f74:	143f911e 	bne	r2,r16,20dbc <_malloc_r+0x16c>
   20f78:	1a400084 	addi	r9,r3,2
   20f7c:	003f7306 	br	20d4c <_malloc_r+0xfc>
   20f80:	88c00054 	ori	r3,r17,1
   20f84:	8445883a 	add	r2,r16,r17
   20f88:	80c00115 	stw	r3,4(r16)
   20f8c:	003fdf06 	br	20f0c <_malloc_r+0x2bc>
   20f90:	e4000217 	ldw	r16,8(fp)
   20f94:	00bfff04 	movi	r2,-4
   20f98:	80c00117 	ldw	r3,4(r16)
   20f9c:	802d883a 	mov	r22,r16
   20fa0:	18aa703a 	and	r21,r3,r2
   20fa4:	ac401636 	bltu	r21,r17,21000 <_malloc_r+0x3b0>
   20fa8:	ac49c83a 	sub	r4,r21,r17
   20fac:	008003c4 	movi	r2,15
   20fb0:	1100130e 	bge	r2,r4,21000 <_malloc_r+0x3b0>
   20fb4:	88800054 	ori	r2,r17,1
   20fb8:	8447883a 	add	r3,r16,r17
   20fbc:	80800115 	stw	r2,4(r16)
   20fc0:	20800054 	ori	r2,r4,1
   20fc4:	18800115 	stw	r2,4(r3)
   20fc8:	e0c00215 	stw	r3,8(fp)
   20fcc:	9009883a 	mov	r4,r18
   20fd0:	002ab280 	call	2ab28 <__malloc_unlock>
   20fd4:	80c00204 	addi	r3,r16,8
   20fd8:	003f3106 	br	20ca0 <_malloc_r+0x50>
   20fdc:	39c00117 	ldw	r7,4(r7)
   20fe0:	573ffe04 	addi	fp,r10,-8
   20fe4:	003fa006 	br	20e68 <_malloc_r+0x218>
   20fe8:	00801504 	movi	r2,84
   20fec:	10c06736 	bltu	r2,r3,2118c <_malloc_r+0x53c>
   20ff0:	8804d33a 	srli	r2,r17,12
   20ff4:	11801b84 	addi	r6,r2,110
   20ff8:	300490fa 	slli	r2,r6,3
   20ffc:	003f4106 	br	20d04 <_malloc_r+0xb4>
   21000:	d0a72517 	ldw	r2,-25452(gp)
   21004:	d0e00317 	ldw	r3,-32756(gp)
   21008:	053fffc4 	movi	r20,-1
   2100c:	10800404 	addi	r2,r2,16
   21010:	88a7883a 	add	r19,r17,r2
   21014:	1d000326 	beq	r3,r20,21024 <_malloc_r+0x3d4>
   21018:	98c3ffc4 	addi	r3,r19,4095
   2101c:	00bc0004 	movi	r2,-4096
   21020:	18a6703a 	and	r19,r3,r2
   21024:	9009883a 	mov	r4,r18
   21028:	980b883a 	mov	r5,r19
   2102c:	00217140 	call	21714 <_sbrk_r>
   21030:	1009883a 	mov	r4,r2
   21034:	15000426 	beq	r2,r20,21048 <_malloc_r+0x3f8>
   21038:	854b883a 	add	r5,r16,r21
   2103c:	1029883a 	mov	r20,r2
   21040:	11405a2e 	bgeu	r2,r5,211ac <_malloc_r+0x55c>
   21044:	87000c26 	beq	r16,fp,21078 <_malloc_r+0x428>
   21048:	e4000217 	ldw	r16,8(fp)
   2104c:	80c00117 	ldw	r3,4(r16)
   21050:	00bfff04 	movi	r2,-4
   21054:	1884703a 	and	r2,r3,r2
   21058:	14400336 	bltu	r2,r17,21068 <_malloc_r+0x418>
   2105c:	1449c83a 	sub	r4,r2,r17
   21060:	008003c4 	movi	r2,15
   21064:	113fd316 	blt	r2,r4,20fb4 <_malloc_r+0x364>
   21068:	9009883a 	mov	r4,r18
   2106c:	002ab280 	call	2ab28 <__malloc_unlock>
   21070:	0007883a 	mov	r3,zero
   21074:	003f0a06 	br	20ca0 <_malloc_r+0x50>
   21078:	05c000f4 	movhi	r23,3
   2107c:	bdca5e04 	addi	r23,r23,10616
   21080:	b8800017 	ldw	r2,0(r23)
   21084:	988d883a 	add	r6,r19,r2
   21088:	b9800015 	stw	r6,0(r23)
   2108c:	d0e00317 	ldw	r3,-32756(gp)
   21090:	00bfffc4 	movi	r2,-1
   21094:	18808e26 	beq	r3,r2,212d0 <_malloc_r+0x680>
   21098:	2145c83a 	sub	r2,r4,r5
   2109c:	3085883a 	add	r2,r6,r2
   210a0:	b8800015 	stw	r2,0(r23)
   210a4:	20c001cc 	andi	r3,r4,7
   210a8:	18005f1e 	bne	r3,zero,21228 <_malloc_r+0x5d8>
   210ac:	000b883a 	mov	r5,zero
   210b0:	a4c5883a 	add	r2,r20,r19
   210b4:	1083ffcc 	andi	r2,r2,4095
   210b8:	00c40004 	movi	r3,4096
   210bc:	1887c83a 	sub	r3,r3,r2
   210c0:	28e7883a 	add	r19,r5,r3
   210c4:	9009883a 	mov	r4,r18
   210c8:	980b883a 	mov	r5,r19
   210cc:	00217140 	call	21714 <_sbrk_r>
   210d0:	1007883a 	mov	r3,r2
   210d4:	00bfffc4 	movi	r2,-1
   210d8:	18807a26 	beq	r3,r2,212c4 <_malloc_r+0x674>
   210dc:	1d05c83a 	sub	r2,r3,r20
   210e0:	9885883a 	add	r2,r19,r2
   210e4:	10c00054 	ori	r3,r2,1
   210e8:	b8800017 	ldw	r2,0(r23)
   210ec:	a021883a 	mov	r16,r20
   210f0:	a0c00115 	stw	r3,4(r20)
   210f4:	9885883a 	add	r2,r19,r2
   210f8:	b8800015 	stw	r2,0(r23)
   210fc:	e5000215 	stw	r20,8(fp)
   21100:	b7003626 	beq	r22,fp,211dc <_malloc_r+0x58c>
   21104:	018003c4 	movi	r6,15
   21108:	35404b36 	bltu	r6,r21,21238 <_malloc_r+0x5e8>
   2110c:	00800044 	movi	r2,1
   21110:	a0800115 	stw	r2,4(r20)
   21114:	003fcd06 	br	2104c <_malloc_r+0x3fc>
   21118:	2808d27a 	srli	r4,r5,9
   2111c:	2000371e 	bne	r4,zero,211fc <_malloc_r+0x5ac>
   21120:	2808d0fa 	srli	r4,r5,3
   21124:	200690fa 	slli	r3,r4,3
   21128:	1ad1883a 	add	r8,r3,r11
   2112c:	41800217 	ldw	r6,8(r8)
   21130:	41805b26 	beq	r8,r6,212a0 <_malloc_r+0x650>
   21134:	30800117 	ldw	r2,4(r6)
   21138:	00ffff04 	movi	r3,-4
   2113c:	10c4703a 	and	r2,r2,r3
   21140:	2880022e 	bgeu	r5,r2,2114c <_malloc_r+0x4fc>
   21144:	31800217 	ldw	r6,8(r6)
   21148:	41bffa1e 	bne	r8,r6,21134 <_malloc_r+0x4e4>
   2114c:	32000317 	ldw	r8,12(r6)
   21150:	39c00117 	ldw	r7,4(r7)
   21154:	82000315 	stw	r8,12(r16)
   21158:	81800215 	stw	r6,8(r16)
   2115c:	070000f4 	movhi	fp,3
   21160:	e73d2d04 	addi	fp,fp,-2892
   21164:	34000315 	stw	r16,12(r6)
   21168:	44000215 	stw	r16,8(r8)
   2116c:	003f3e06 	br	20e68 <_malloc_r+0x218>
   21170:	63000044 	addi	r12,r12,1
   21174:	608000cc 	andi	r2,r12,3
   21178:	10005d26 	beq	r2,zero,212f0 <_malloc_r+0x6a0>
   2117c:	18c00204 	addi	r3,r3,8
   21180:	003f5106 	br	20ec8 <_malloc_r+0x278>
   21184:	8089883a 	add	r4,r16,r2
   21188:	003f6d06 	br	20f40 <_malloc_r+0x2f0>
   2118c:	00805504 	movi	r2,340
   21190:	10c02036 	bltu	r2,r3,21214 <_malloc_r+0x5c4>
   21194:	8804d3fa 	srli	r2,r17,15
   21198:	11801dc4 	addi	r6,r2,119
   2119c:	300490fa 	slli	r2,r6,3
   211a0:	003ed806 	br	20d04 <_malloc_r+0xb4>
   211a4:	48c000c4 	addi	r3,r9,3
   211a8:	003f3106 	br	20e70 <_malloc_r+0x220>
   211ac:	05c000f4 	movhi	r23,3
   211b0:	bdca5e04 	addi	r23,r23,10616
   211b4:	b8800017 	ldw	r2,0(r23)
   211b8:	988d883a 	add	r6,r19,r2
   211bc:	b9800015 	stw	r6,0(r23)
   211c0:	293fb21e 	bne	r5,r4,2108c <_malloc_r+0x43c>
   211c4:	2083ffcc 	andi	r2,r4,4095
   211c8:	103fb01e 	bne	r2,zero,2108c <_malloc_r+0x43c>
   211cc:	e4000217 	ldw	r16,8(fp)
   211d0:	9d45883a 	add	r2,r19,r21
   211d4:	10800054 	ori	r2,r2,1
   211d8:	80800115 	stw	r2,4(r16)
   211dc:	b8c00017 	ldw	r3,0(r23)
   211e0:	d0a72617 	ldw	r2,-25448(gp)
   211e4:	10c0012e 	bgeu	r2,r3,211ec <_malloc_r+0x59c>
   211e8:	d0e72615 	stw	r3,-25448(gp)
   211ec:	d0a72717 	ldw	r2,-25444(gp)
   211f0:	10ff962e 	bgeu	r2,r3,2104c <_malloc_r+0x3fc>
   211f4:	d0e72715 	stw	r3,-25444(gp)
   211f8:	003f9406 	br	2104c <_malloc_r+0x3fc>
   211fc:	00800104 	movi	r2,4
   21200:	11001e36 	bltu	r2,r4,2127c <_malloc_r+0x62c>
   21204:	2804d1ba 	srli	r2,r5,6
   21208:	11000e04 	addi	r4,r2,56
   2120c:	200690fa 	slli	r3,r4,3
   21210:	003fc506 	br	21128 <_malloc_r+0x4d8>
   21214:	00815504 	movi	r2,1364
   21218:	10c01d2e 	bgeu	r2,r3,21290 <_malloc_r+0x640>
   2121c:	01801f84 	movi	r6,126
   21220:	0080fc04 	movi	r2,1008
   21224:	003eb706 	br	20d04 <_malloc_r+0xb4>
   21228:	00800204 	movi	r2,8
   2122c:	10cbc83a 	sub	r5,r2,r3
   21230:	2169883a 	add	r20,r4,r5
   21234:	003f9e06 	br	210b0 <_malloc_r+0x460>
   21238:	00bffe04 	movi	r2,-8
   2123c:	a93ffd04 	addi	r4,r21,-12
   21240:	2088703a 	and	r4,r4,r2
   21244:	b10b883a 	add	r5,r22,r4
   21248:	00c00144 	movi	r3,5
   2124c:	28c00215 	stw	r3,8(r5)
   21250:	28c00115 	stw	r3,4(r5)
   21254:	b0800117 	ldw	r2,4(r22)
   21258:	1080004c 	andi	r2,r2,1
   2125c:	2084b03a 	or	r2,r4,r2
   21260:	b0800115 	stw	r2,4(r22)
   21264:	313fdd2e 	bgeu	r6,r4,211dc <_malloc_r+0x58c>
   21268:	b1400204 	addi	r5,r22,8
   2126c:	9009883a 	mov	r4,r18
   21270:	00259180 	call	25918 <_free_r>
   21274:	e4000217 	ldw	r16,8(fp)
   21278:	003fd806 	br	211dc <_malloc_r+0x58c>
   2127c:	00800504 	movi	r2,20
   21280:	11001536 	bltu	r2,r4,212d8 <_malloc_r+0x688>
   21284:	210016c4 	addi	r4,r4,91
   21288:	200690fa 	slli	r3,r4,3
   2128c:	003fa606 	br	21128 <_malloc_r+0x4d8>
   21290:	8804d4ba 	srli	r2,r17,18
   21294:	11801f04 	addi	r6,r2,124
   21298:	300490fa 	slli	r2,r6,3
   2129c:	003e9906 	br	20d04 <_malloc_r+0xb4>
   212a0:	2009d0ba 	srai	r4,r4,2
   212a4:	014000f4 	movhi	r5,3
   212a8:	297d2d04 	addi	r5,r5,-2892
   212ac:	00c00044 	movi	r3,1
   212b0:	28800117 	ldw	r2,4(r5)
   212b4:	1906983a 	sll	r3,r3,r4
   212b8:	10c4b03a 	or	r2,r2,r3
   212bc:	28800115 	stw	r2,4(r5)
   212c0:	003fa306 	br	21150 <_malloc_r+0x500>
   212c4:	0027883a 	mov	r19,zero
   212c8:	00c00044 	movi	r3,1
   212cc:	003f8606 	br	210e8 <_malloc_r+0x498>
   212d0:	d1200315 	stw	r4,-32756(gp)
   212d4:	003f7306 	br	210a4 <_malloc_r+0x454>
   212d8:	00801504 	movi	r2,84
   212dc:	11001936 	bltu	r2,r4,21344 <_malloc_r+0x6f4>
   212e0:	2804d33a 	srli	r2,r5,12
   212e4:	11001b84 	addi	r4,r2,110
   212e8:	200690fa 	slli	r3,r4,3
   212ec:	003f8e06 	br	21128 <_malloc_r+0x4d8>
   212f0:	480b883a 	mov	r5,r9
   212f4:	6807883a 	mov	r3,r13
   212f8:	288000cc 	andi	r2,r5,3
   212fc:	18fffe04 	addi	r3,r3,-8
   21300:	297fffc4 	addi	r5,r5,-1
   21304:	10001526 	beq	r2,zero,2135c <_malloc_r+0x70c>
   21308:	18800217 	ldw	r2,8(r3)
   2130c:	10fffa26 	beq	r2,r3,212f8 <_malloc_r+0x6a8>
   21310:	2109883a 	add	r4,r4,r4
   21314:	393f1e36 	bltu	r7,r4,20f90 <_malloc_r+0x340>
   21318:	203f1d26 	beq	r4,zero,20f90 <_malloc_r+0x340>
   2131c:	21c4703a 	and	r2,r4,r7
   21320:	10000226 	beq	r2,zero,2132c <_malloc_r+0x6dc>
   21324:	6013883a 	mov	r9,r12
   21328:	003ee106 	br	20eb0 <_malloc_r+0x260>
   2132c:	2109883a 	add	r4,r4,r4
   21330:	3904703a 	and	r2,r7,r4
   21334:	63000104 	addi	r12,r12,4
   21338:	103ffc26 	beq	r2,zero,2132c <_malloc_r+0x6dc>
   2133c:	6013883a 	mov	r9,r12
   21340:	003edb06 	br	20eb0 <_malloc_r+0x260>
   21344:	00805504 	movi	r2,340
   21348:	11000836 	bltu	r2,r4,2136c <_malloc_r+0x71c>
   2134c:	2804d3fa 	srli	r2,r5,15
   21350:	11001dc4 	addi	r4,r2,119
   21354:	200690fa 	slli	r3,r4,3
   21358:	003f7306 	br	21128 <_malloc_r+0x4d8>
   2135c:	0104303a 	nor	r2,zero,r4
   21360:	388e703a 	and	r7,r7,r2
   21364:	e1c00115 	stw	r7,4(fp)
   21368:	003fe906 	br	21310 <_malloc_r+0x6c0>
   2136c:	00815504 	movi	r2,1364
   21370:	1100032e 	bgeu	r2,r4,21380 <_malloc_r+0x730>
   21374:	01001f84 	movi	r4,126
   21378:	00c0fc04 	movi	r3,1008
   2137c:	003f6a06 	br	21128 <_malloc_r+0x4d8>
   21380:	2804d4ba 	srli	r2,r5,18
   21384:	11001f04 	addi	r4,r2,124
   21388:	200690fa 	slli	r3,r4,3
   2138c:	003f6606 	br	21128 <_malloc_r+0x4d8>

00021390 <_open_r>:
   21390:	defffd04 	addi	sp,sp,-12
   21394:	dc000015 	stw	r16,0(sp)
   21398:	040000f4 	movhi	r16,3
   2139c:	840a5104 	addi	r16,r16,10564
   213a0:	dc400115 	stw	r17,4(sp)
   213a4:	80000015 	stw	zero,0(r16)
   213a8:	2023883a 	mov	r17,r4
   213ac:	2809883a 	mov	r4,r5
   213b0:	300b883a 	mov	r5,r6
   213b4:	380d883a 	mov	r6,r7
   213b8:	dfc00215 	stw	ra,8(sp)
   213bc:	002ac240 	call	2ac24 <open>
   213c0:	1007883a 	mov	r3,r2
   213c4:	00bfffc4 	movi	r2,-1
   213c8:	18800626 	beq	r3,r2,213e4 <_open_r+0x54>
   213cc:	1805883a 	mov	r2,r3
   213d0:	dfc00217 	ldw	ra,8(sp)
   213d4:	dc400117 	ldw	r17,4(sp)
   213d8:	dc000017 	ldw	r16,0(sp)
   213dc:	dec00304 	addi	sp,sp,12
   213e0:	f800283a 	ret
   213e4:	80800017 	ldw	r2,0(r16)
   213e8:	103ff826 	beq	r2,zero,213cc <_open_r+0x3c>
   213ec:	88800015 	stw	r2,0(r17)
   213f0:	1805883a 	mov	r2,r3
   213f4:	dfc00217 	ldw	ra,8(sp)
   213f8:	dc400117 	ldw	r17,4(sp)
   213fc:	dc000017 	ldw	r16,0(sp)
   21400:	dec00304 	addi	sp,sp,12
   21404:	f800283a 	ret

00021408 <printf>:
   21408:	defffb04 	addi	sp,sp,-20
   2140c:	dfc00115 	stw	ra,4(sp)
   21410:	d9400215 	stw	r5,8(sp)
   21414:	d9800315 	stw	r6,12(sp)
   21418:	d9c00415 	stw	r7,16(sp)
   2141c:	008000f4 	movhi	r2,3
   21420:	10832d04 	addi	r2,r2,3252
   21424:	10c00017 	ldw	r3,0(r2)
   21428:	200b883a 	mov	r5,r4
   2142c:	d8800204 	addi	r2,sp,8
   21430:	19000217 	ldw	r4,8(r3)
   21434:	100d883a 	mov	r6,r2
   21438:	d8800015 	stw	r2,0(sp)
   2143c:	00238480 	call	23848 <__vfprintf_internal>
   21440:	dfc00117 	ldw	ra,4(sp)
   21444:	dec00504 	addi	sp,sp,20
   21448:	f800283a 	ret

0002144c <_printf_r>:
   2144c:	defffc04 	addi	sp,sp,-16
   21450:	dfc00115 	stw	ra,4(sp)
   21454:	d9800215 	stw	r6,8(sp)
   21458:	d9c00315 	stw	r7,12(sp)
   2145c:	280d883a 	mov	r6,r5
   21460:	21400217 	ldw	r5,8(r4)
   21464:	d8c00204 	addi	r3,sp,8
   21468:	180f883a 	mov	r7,r3
   2146c:	d8c00015 	stw	r3,0(sp)
   21470:	002199c0 	call	2199c <___vfprintf_internal_r>
   21474:	dfc00117 	ldw	ra,4(sp)
   21478:	dec00404 	addi	sp,sp,16
   2147c:	f800283a 	ret

00021480 <_puts_r>:
   21480:	defff604 	addi	sp,sp,-40
   21484:	dc400715 	stw	r17,28(sp)
   21488:	2023883a 	mov	r17,r4
   2148c:	2809883a 	mov	r4,r5
   21490:	dfc00915 	stw	ra,36(sp)
   21494:	dcc00815 	stw	r19,32(sp)
   21498:	2827883a 	mov	r19,r5
   2149c:	00218d00 	call	218d0 <strlen>
   214a0:	89400217 	ldw	r5,8(r17)
   214a4:	00c000f4 	movhi	r3,3
   214a8:	18fab804 	addi	r3,r3,-5408
   214ac:	01c00044 	movi	r7,1
   214b0:	12000044 	addi	r8,r2,1
   214b4:	d8c00515 	stw	r3,20(sp)
   214b8:	d9c00615 	stw	r7,24(sp)
   214bc:	d8c00304 	addi	r3,sp,12
   214c0:	01c00084 	movi	r7,2
   214c4:	8809883a 	mov	r4,r17
   214c8:	d80d883a 	mov	r6,sp
   214cc:	d8c00015 	stw	r3,0(sp)
   214d0:	dcc00315 	stw	r19,12(sp)
   214d4:	da000215 	stw	r8,8(sp)
   214d8:	d9c00115 	stw	r7,4(sp)
   214dc:	d8800415 	stw	r2,16(sp)
   214e0:	0025c2c0 	call	25c2c <__sfvwrite_r>
   214e4:	00ffffc4 	movi	r3,-1
   214e8:	10000626 	beq	r2,zero,21504 <_puts_r+0x84>
   214ec:	1805883a 	mov	r2,r3
   214f0:	dfc00917 	ldw	ra,36(sp)
   214f4:	dcc00817 	ldw	r19,32(sp)
   214f8:	dc400717 	ldw	r17,28(sp)
   214fc:	dec00a04 	addi	sp,sp,40
   21500:	f800283a 	ret
   21504:	00c00284 	movi	r3,10
   21508:	1805883a 	mov	r2,r3
   2150c:	dfc00917 	ldw	ra,36(sp)
   21510:	dcc00817 	ldw	r19,32(sp)
   21514:	dc400717 	ldw	r17,28(sp)
   21518:	dec00a04 	addi	sp,sp,40
   2151c:	f800283a 	ret

00021520 <puts>:
   21520:	008000f4 	movhi	r2,3
   21524:	10832d04 	addi	r2,r2,3252
   21528:	200b883a 	mov	r5,r4
   2152c:	11000017 	ldw	r4,0(r2)
   21530:	00214801 	jmpi	21480 <_puts_r>

00021534 <__srefill_r>:
   21534:	defffd04 	addi	sp,sp,-12
   21538:	dc400115 	stw	r17,4(sp)
   2153c:	dc000015 	stw	r16,0(sp)
   21540:	dfc00215 	stw	ra,8(sp)
   21544:	2023883a 	mov	r17,r4
   21548:	2821883a 	mov	r16,r5
   2154c:	20000226 	beq	r4,zero,21558 <__srefill_r+0x24>
   21550:	20800e17 	ldw	r2,56(r4)
   21554:	10004126 	beq	r2,zero,2165c <__srefill_r+0x128>
   21558:	80c0030b 	ldhu	r3,12(r16)
   2155c:	80000115 	stw	zero,4(r16)
   21560:	1880080c 	andi	r2,r3,32
   21564:	1000361e 	bne	r2,zero,21640 <__srefill_r+0x10c>
   21568:	1880010c 	andi	r2,r3,4
   2156c:	1000211e 	bne	r2,zero,215f4 <__srefill_r+0xc0>
   21570:	1880040c 	andi	r2,r3,16
   21574:	10005026 	beq	r2,zero,216b8 <__srefill_r+0x184>
   21578:	1880020c 	andi	r2,r3,8
   2157c:	1000541e 	bne	r2,zero,216d0 <__srefill_r+0x19c>
   21580:	8080030b 	ldhu	r2,12(r16)
   21584:	10800114 	ori	r2,r2,4
   21588:	8080030d 	sth	r2,12(r16)
   2158c:	80800417 	ldw	r2,16(r16)
   21590:	10004526 	beq	r2,zero,216a8 <__srefill_r+0x174>
   21594:	8080030b 	ldhu	r2,12(r16)
   21598:	108000cc 	andi	r2,r2,3
   2159c:	1000361e 	bne	r2,zero,21678 <__srefill_r+0x144>
   215a0:	81800417 	ldw	r6,16(r16)
   215a4:	80c00817 	ldw	r3,32(r16)
   215a8:	81400717 	ldw	r5,28(r16)
   215ac:	81c00517 	ldw	r7,20(r16)
   215b0:	8809883a 	mov	r4,r17
   215b4:	81800015 	stw	r6,0(r16)
   215b8:	183ee83a 	callr	r3
   215bc:	80c0030b 	ldhu	r3,12(r16)
   215c0:	1009883a 	mov	r4,r2
   215c4:	80800115 	stw	r2,4(r16)
   215c8:	00b7ffc4 	movi	r2,-8193
   215cc:	1884703a 	and	r2,r3,r2
   215d0:	8080030d 	sth	r2,12(r16)
   215d4:	0100230e 	bge	zero,r4,21664 <__srefill_r+0x130>
   215d8:	0009883a 	mov	r4,zero
   215dc:	2005883a 	mov	r2,r4
   215e0:	dfc00217 	ldw	ra,8(sp)
   215e4:	dc400117 	ldw	r17,4(sp)
   215e8:	dc000017 	ldw	r16,0(sp)
   215ec:	dec00304 	addi	sp,sp,12
   215f0:	f800283a 	ret
   215f4:	81400c17 	ldw	r5,48(r16)
   215f8:	283fe426 	beq	r5,zero,2158c <__srefill_r+0x58>
   215fc:	80801004 	addi	r2,r16,64
   21600:	28800226 	beq	r5,r2,2160c <__srefill_r+0xd8>
   21604:	8809883a 	mov	r4,r17
   21608:	00259180 	call	25918 <_free_r>
   2160c:	80800f17 	ldw	r2,60(r16)
   21610:	80000c15 	stw	zero,48(r16)
   21614:	80800115 	stw	r2,4(r16)
   21618:	103fdc26 	beq	r2,zero,2158c <__srefill_r+0x58>
   2161c:	80800e17 	ldw	r2,56(r16)
   21620:	0009883a 	mov	r4,zero
   21624:	80800015 	stw	r2,0(r16)
   21628:	2005883a 	mov	r2,r4
   2162c:	dfc00217 	ldw	ra,8(sp)
   21630:	dc400117 	ldw	r17,4(sp)
   21634:	dc000017 	ldw	r16,0(sp)
   21638:	dec00304 	addi	sp,sp,12
   2163c:	f800283a 	ret
   21640:	013fffc4 	movi	r4,-1
   21644:	2005883a 	mov	r2,r4
   21648:	dfc00217 	ldw	ra,8(sp)
   2164c:	dc400117 	ldw	r17,4(sp)
   21650:	dc000017 	ldw	r16,0(sp)
   21654:	dec00304 	addi	sp,sp,12
   21658:	f800283a 	ret
   2165c:	00254f40 	call	254f4 <__sinit>
   21660:	003fbd06 	br	21558 <__srefill_r+0x24>
   21664:	20000b1e 	bne	r4,zero,21694 <__srefill_r+0x160>
   21668:	10800814 	ori	r2,r2,32
   2166c:	013fffc4 	movi	r4,-1
   21670:	8080030d 	sth	r2,12(r16)
   21674:	003fd906 	br	215dc <__srefill_r+0xa8>
   21678:	008000f4 	movhi	r2,3
   2167c:	10832e04 	addi	r2,r2,3256
   21680:	11000017 	ldw	r4,0(r2)
   21684:	014000b4 	movhi	r5,2
   21688:	2945be04 	addi	r5,r5,5880
   2168c:	00261900 	call	26190 <_fwalk>
   21690:	003fc306 	br	215a0 <__srefill_r+0x6c>
   21694:	10801014 	ori	r2,r2,64
   21698:	013fffc4 	movi	r4,-1
   2169c:	8080030d 	sth	r2,12(r16)
   216a0:	80000115 	stw	zero,4(r16)
   216a4:	003fcd06 	br	215dc <__srefill_r+0xa8>
   216a8:	8809883a 	mov	r4,r17
   216ac:	800b883a 	mov	r5,r16
   216b0:	0020abc0 	call	20abc <__smakebuf_r>
   216b4:	003fb706 	br	21594 <__srefill_r+0x60>
   216b8:	18c01014 	ori	r3,r3,64
   216bc:	00800244 	movi	r2,9
   216c0:	013fffc4 	movi	r4,-1
   216c4:	88800015 	stw	r2,0(r17)
   216c8:	80c0030d 	sth	r3,12(r16)
   216cc:	003fc306 	br	215dc <__srefill_r+0xa8>
   216d0:	8809883a 	mov	r4,r17
   216d4:	800b883a 	mov	r5,r16
   216d8:	002525c0 	call	2525c <_fflush_r>
   216dc:	103fd81e 	bne	r2,zero,21640 <__srefill_r+0x10c>
   216e0:	8080030b 	ldhu	r2,12(r16)
   216e4:	80000215 	stw	zero,8(r16)
   216e8:	80000615 	stw	zero,24(r16)
   216ec:	10bffdcc 	andi	r2,r2,65527
   216f0:	8080030d 	sth	r2,12(r16)
   216f4:	003fa206 	br	21580 <__srefill_r+0x4c>

000216f8 <lflush>:
   216f8:	20c0030b 	ldhu	r3,12(r4)
   216fc:	01400244 	movi	r5,9
   21700:	0005883a 	mov	r2,zero
   21704:	18c0024c 	andi	r3,r3,9
   21708:	19400126 	beq	r3,r5,21710 <lflush+0x18>
   2170c:	f800283a 	ret
   21710:	00254581 	jmpi	25458 <fflush>

00021714 <_sbrk_r>:
   21714:	defffd04 	addi	sp,sp,-12
   21718:	dc000015 	stw	r16,0(sp)
   2171c:	040000f4 	movhi	r16,3
   21720:	840a5104 	addi	r16,r16,10564
   21724:	dc400115 	stw	r17,4(sp)
   21728:	80000015 	stw	zero,0(r16)
   2172c:	2023883a 	mov	r17,r4
   21730:	2809883a 	mov	r4,r5
   21734:	dfc00215 	stw	ra,8(sp)
   21738:	002afec0 	call	2afec <sbrk>
   2173c:	1007883a 	mov	r3,r2
   21740:	00bfffc4 	movi	r2,-1
   21744:	18800626 	beq	r3,r2,21760 <_sbrk_r+0x4c>
   21748:	1805883a 	mov	r2,r3
   2174c:	dfc00217 	ldw	ra,8(sp)
   21750:	dc400117 	ldw	r17,4(sp)
   21754:	dc000017 	ldw	r16,0(sp)
   21758:	dec00304 	addi	sp,sp,12
   2175c:	f800283a 	ret
   21760:	80800017 	ldw	r2,0(r16)
   21764:	103ff826 	beq	r2,zero,21748 <_sbrk_r+0x34>
   21768:	88800015 	stw	r2,0(r17)
   2176c:	1805883a 	mov	r2,r3
   21770:	dfc00217 	ldw	ra,8(sp)
   21774:	dc400117 	ldw	r17,4(sp)
   21778:	dc000017 	ldw	r16,0(sp)
   2177c:	dec00304 	addi	sp,sp,12
   21780:	f800283a 	ret

00021784 <__sclose>:
   21784:	2940038f 	ldh	r5,14(r5)
   21788:	0023a201 	jmpi	23a20 <_close_r>

0002178c <__sseek>:
   2178c:	defffe04 	addi	sp,sp,-8
   21790:	dc000015 	stw	r16,0(sp)
   21794:	2821883a 	mov	r16,r5
   21798:	2940038f 	ldh	r5,14(r5)
   2179c:	dfc00115 	stw	ra,4(sp)
   217a0:	002637c0 	call	2637c <_lseek_r>
   217a4:	1007883a 	mov	r3,r2
   217a8:	00bfffc4 	movi	r2,-1
   217ac:	18800926 	beq	r3,r2,217d4 <__sseek+0x48>
   217b0:	8080030b 	ldhu	r2,12(r16)
   217b4:	80c01415 	stw	r3,80(r16)
   217b8:	10840014 	ori	r2,r2,4096
   217bc:	8080030d 	sth	r2,12(r16)
   217c0:	1805883a 	mov	r2,r3
   217c4:	dfc00117 	ldw	ra,4(sp)
   217c8:	dc000017 	ldw	r16,0(sp)
   217cc:	dec00204 	addi	sp,sp,8
   217d0:	f800283a 	ret
   217d4:	8080030b 	ldhu	r2,12(r16)
   217d8:	10bbffcc 	andi	r2,r2,61439
   217dc:	8080030d 	sth	r2,12(r16)
   217e0:	1805883a 	mov	r2,r3
   217e4:	dfc00117 	ldw	ra,4(sp)
   217e8:	dc000017 	ldw	r16,0(sp)
   217ec:	dec00204 	addi	sp,sp,8
   217f0:	f800283a 	ret

000217f4 <__swrite>:
   217f4:	2880030b 	ldhu	r2,12(r5)
   217f8:	defffb04 	addi	sp,sp,-20
   217fc:	dcc00315 	stw	r19,12(sp)
   21800:	1080400c 	andi	r2,r2,256
   21804:	dc800215 	stw	r18,8(sp)
   21808:	dc400115 	stw	r17,4(sp)
   2180c:	dc000015 	stw	r16,0(sp)
   21810:	3027883a 	mov	r19,r6
   21814:	3825883a 	mov	r18,r7
   21818:	dfc00415 	stw	ra,16(sp)
   2181c:	2821883a 	mov	r16,r5
   21820:	000d883a 	mov	r6,zero
   21824:	01c00084 	movi	r7,2
   21828:	2023883a 	mov	r17,r4
   2182c:	10000226 	beq	r2,zero,21838 <__swrite+0x44>
   21830:	2940038f 	ldh	r5,14(r5)
   21834:	002637c0 	call	2637c <_lseek_r>
   21838:	8080030b 	ldhu	r2,12(r16)
   2183c:	8140038f 	ldh	r5,14(r16)
   21840:	8809883a 	mov	r4,r17
   21844:	10bbffcc 	andi	r2,r2,61439
   21848:	980d883a 	mov	r6,r19
   2184c:	900f883a 	mov	r7,r18
   21850:	8080030d 	sth	r2,12(r16)
   21854:	dfc00417 	ldw	ra,16(sp)
   21858:	dcc00317 	ldw	r19,12(sp)
   2185c:	dc800217 	ldw	r18,8(sp)
   21860:	dc400117 	ldw	r17,4(sp)
   21864:	dc000017 	ldw	r16,0(sp)
   21868:	dec00504 	addi	sp,sp,20
   2186c:	002386c1 	jmpi	2386c <_write_r>

00021870 <__sread>:
   21870:	defffe04 	addi	sp,sp,-8
   21874:	dc000015 	stw	r16,0(sp)
   21878:	2821883a 	mov	r16,r5
   2187c:	2940038f 	ldh	r5,14(r5)
   21880:	dfc00115 	stw	ra,4(sp)
   21884:	00276e40 	call	276e4 <_read_r>
   21888:	1007883a 	mov	r3,r2
   2188c:	10000816 	blt	r2,zero,218b0 <__sread+0x40>
   21890:	80801417 	ldw	r2,80(r16)
   21894:	10c5883a 	add	r2,r2,r3
   21898:	80801415 	stw	r2,80(r16)
   2189c:	1805883a 	mov	r2,r3
   218a0:	dfc00117 	ldw	ra,4(sp)
   218a4:	dc000017 	ldw	r16,0(sp)
   218a8:	dec00204 	addi	sp,sp,8
   218ac:	f800283a 	ret
   218b0:	8080030b 	ldhu	r2,12(r16)
   218b4:	10bbffcc 	andi	r2,r2,61439
   218b8:	8080030d 	sth	r2,12(r16)
   218bc:	1805883a 	mov	r2,r3
   218c0:	dfc00117 	ldw	ra,4(sp)
   218c4:	dc000017 	ldw	r16,0(sp)
   218c8:	dec00204 	addi	sp,sp,8
   218cc:	f800283a 	ret

000218d0 <strlen>:
   218d0:	208000cc 	andi	r2,r4,3
   218d4:	2011883a 	mov	r8,r4
   218d8:	1000161e 	bne	r2,zero,21934 <strlen+0x64>
   218dc:	20c00017 	ldw	r3,0(r4)
   218e0:	017fbff4 	movhi	r5,65279
   218e4:	297fbfc4 	addi	r5,r5,-257
   218e8:	01e02074 	movhi	r7,32897
   218ec:	39e02004 	addi	r7,r7,-32640
   218f0:	1945883a 	add	r2,r3,r5
   218f4:	11c4703a 	and	r2,r2,r7
   218f8:	00c6303a 	nor	r3,zero,r3
   218fc:	1886703a 	and	r3,r3,r2
   21900:	18000c1e 	bne	r3,zero,21934 <strlen+0x64>
   21904:	280d883a 	mov	r6,r5
   21908:	380b883a 	mov	r5,r7
   2190c:	21000104 	addi	r4,r4,4
   21910:	20800017 	ldw	r2,0(r4)
   21914:	1187883a 	add	r3,r2,r6
   21918:	1946703a 	and	r3,r3,r5
   2191c:	0084303a 	nor	r2,zero,r2
   21920:	10c4703a 	and	r2,r2,r3
   21924:	103ff926 	beq	r2,zero,2190c <strlen+0x3c>
   21928:	20800007 	ldb	r2,0(r4)
   2192c:	10000326 	beq	r2,zero,2193c <strlen+0x6c>
   21930:	21000044 	addi	r4,r4,1
   21934:	20800007 	ldb	r2,0(r4)
   21938:	103ffd1e 	bne	r2,zero,21930 <strlen+0x60>
   2193c:	2205c83a 	sub	r2,r4,r8
   21940:	f800283a 	ret

00021944 <__sprint_r>:
   21944:	30800217 	ldw	r2,8(r6)
   21948:	defffe04 	addi	sp,sp,-8
   2194c:	dc000015 	stw	r16,0(sp)
   21950:	dfc00115 	stw	ra,4(sp)
   21954:	3021883a 	mov	r16,r6
   21958:	0007883a 	mov	r3,zero
   2195c:	1000061e 	bne	r2,zero,21978 <__sprint_r+0x34>
   21960:	1805883a 	mov	r2,r3
   21964:	30000115 	stw	zero,4(r6)
   21968:	dfc00117 	ldw	ra,4(sp)
   2196c:	dc000017 	ldw	r16,0(sp)
   21970:	dec00204 	addi	sp,sp,8
   21974:	f800283a 	ret
   21978:	0025c2c0 	call	25c2c <__sfvwrite_r>
   2197c:	1007883a 	mov	r3,r2
   21980:	1805883a 	mov	r2,r3
   21984:	80000115 	stw	zero,4(r16)
   21988:	80000215 	stw	zero,8(r16)
   2198c:	dfc00117 	ldw	ra,4(sp)
   21990:	dc000017 	ldw	r16,0(sp)
   21994:	dec00204 	addi	sp,sp,8
   21998:	f800283a 	ret

0002199c <___vfprintf_internal_r>:
   2199c:	defea404 	addi	sp,sp,-1392
   219a0:	dd815815 	stw	r22,1376(sp)
   219a4:	dc015215 	stw	r16,1352(sp)
   219a8:	d9c15115 	stw	r7,1348(sp)
   219ac:	dfc15b15 	stw	ra,1388(sp)
   219b0:	df015a15 	stw	fp,1384(sp)
   219b4:	ddc15915 	stw	r23,1380(sp)
   219b8:	dd415715 	stw	r21,1372(sp)
   219bc:	dd015615 	stw	r20,1368(sp)
   219c0:	dcc15515 	stw	r19,1364(sp)
   219c4:	dc815415 	stw	r18,1360(sp)
   219c8:	dc415315 	stw	r17,1356(sp)
   219cc:	282d883a 	mov	r22,r5
   219d0:	3021883a 	mov	r16,r6
   219d4:	d9014f15 	stw	r4,1340(sp)
   219d8:	00262c00 	call	262c0 <_localeconv_r>
   219dc:	10800017 	ldw	r2,0(r2)
   219e0:	d9c15117 	ldw	r7,1348(sp)
   219e4:	d8814915 	stw	r2,1316(sp)
   219e8:	d8814f17 	ldw	r2,1340(sp)
   219ec:	10000226 	beq	r2,zero,219f8 <___vfprintf_internal_r+0x5c>
   219f0:	10800e17 	ldw	r2,56(r2)
   219f4:	10020d26 	beq	r2,zero,2222c <___vfprintf_internal_r+0x890>
   219f8:	b080030b 	ldhu	r2,12(r22)
   219fc:	1080020c 	andi	r2,r2,8
   21a00:	10020e26 	beq	r2,zero,2223c <___vfprintf_internal_r+0x8a0>
   21a04:	b0800417 	ldw	r2,16(r22)
   21a08:	10020c26 	beq	r2,zero,2223c <___vfprintf_internal_r+0x8a0>
   21a0c:	b200030b 	ldhu	r8,12(r22)
   21a10:	00800284 	movi	r2,10
   21a14:	40c0068c 	andi	r3,r8,26
   21a18:	18802f1e 	bne	r3,r2,21ad8 <___vfprintf_internal_r+0x13c>
   21a1c:	b080038f 	ldh	r2,14(r22)
   21a20:	10002d16 	blt	r2,zero,21ad8 <___vfprintf_internal_r+0x13c>
   21a24:	b240038b 	ldhu	r9,14(r22)
   21a28:	b2800717 	ldw	r10,28(r22)
   21a2c:	b2c00917 	ldw	r11,36(r22)
   21a30:	d9014f17 	ldw	r4,1340(sp)
   21a34:	dc402904 	addi	r17,sp,164
   21a38:	d8804004 	addi	r2,sp,256
   21a3c:	00c10004 	movi	r3,1024
   21a40:	423fff4c 	andi	r8,r8,65533
   21a44:	800d883a 	mov	r6,r16
   21a48:	880b883a 	mov	r5,r17
   21a4c:	da002c0d 	sth	r8,176(sp)
   21a50:	da402c8d 	sth	r9,178(sp)
   21a54:	da803015 	stw	r10,192(sp)
   21a58:	dac03215 	stw	r11,200(sp)
   21a5c:	d8802d15 	stw	r2,180(sp)
   21a60:	d8c02e15 	stw	r3,184(sp)
   21a64:	d8802915 	stw	r2,164(sp)
   21a68:	d8c02b15 	stw	r3,172(sp)
   21a6c:	d8002f15 	stw	zero,188(sp)
   21a70:	002199c0 	call	2199c <___vfprintf_internal_r>
   21a74:	d8814b15 	stw	r2,1324(sp)
   21a78:	10000416 	blt	r2,zero,21a8c <___vfprintf_internal_r+0xf0>
   21a7c:	d9014f17 	ldw	r4,1340(sp)
   21a80:	880b883a 	mov	r5,r17
   21a84:	002525c0 	call	2525c <_fflush_r>
   21a88:	1002321e 	bne	r2,zero,22354 <___vfprintf_internal_r+0x9b8>
   21a8c:	d8802c0b 	ldhu	r2,176(sp)
   21a90:	1080100c 	andi	r2,r2,64
   21a94:	10000326 	beq	r2,zero,21aa4 <___vfprintf_internal_r+0x108>
   21a98:	b080030b 	ldhu	r2,12(r22)
   21a9c:	10801014 	ori	r2,r2,64
   21aa0:	b080030d 	sth	r2,12(r22)
   21aa4:	d8814b17 	ldw	r2,1324(sp)
   21aa8:	dfc15b17 	ldw	ra,1388(sp)
   21aac:	df015a17 	ldw	fp,1384(sp)
   21ab0:	ddc15917 	ldw	r23,1380(sp)
   21ab4:	dd815817 	ldw	r22,1376(sp)
   21ab8:	dd415717 	ldw	r21,1372(sp)
   21abc:	dd015617 	ldw	r20,1368(sp)
   21ac0:	dcc15517 	ldw	r19,1364(sp)
   21ac4:	dc815417 	ldw	r18,1360(sp)
   21ac8:	dc415317 	ldw	r17,1356(sp)
   21acc:	dc015217 	ldw	r16,1352(sp)
   21ad0:	dec15c04 	addi	sp,sp,1392
   21ad4:	f800283a 	ret
   21ad8:	0005883a 	mov	r2,zero
   21adc:	0007883a 	mov	r3,zero
   21ae0:	dd401904 	addi	r21,sp,100
   21ae4:	d8814215 	stw	r2,1288(sp)
   21ae8:	802f883a 	mov	r23,r16
   21aec:	d8c14315 	stw	r3,1292(sp)
   21af0:	d8014b15 	stw	zero,1324(sp)
   21af4:	d8014815 	stw	zero,1312(sp)
   21af8:	d8014415 	stw	zero,1296(sp)
   21afc:	d8014715 	stw	zero,1308(sp)
   21b00:	dd400c15 	stw	r21,48(sp)
   21b04:	d8000e15 	stw	zero,56(sp)
   21b08:	d8000d15 	stw	zero,52(sp)
   21b0c:	b8800007 	ldb	r2,0(r23)
   21b10:	10001926 	beq	r2,zero,21b78 <___vfprintf_internal_r+0x1dc>
   21b14:	00c00944 	movi	r3,37
   21b18:	10c01726 	beq	r2,r3,21b78 <___vfprintf_internal_r+0x1dc>
   21b1c:	b821883a 	mov	r16,r23
   21b20:	00000106 	br	21b28 <___vfprintf_internal_r+0x18c>
   21b24:	10c00326 	beq	r2,r3,21b34 <___vfprintf_internal_r+0x198>
   21b28:	84000044 	addi	r16,r16,1
   21b2c:	80800007 	ldb	r2,0(r16)
   21b30:	103ffc1e 	bne	r2,zero,21b24 <___vfprintf_internal_r+0x188>
   21b34:	85e7c83a 	sub	r19,r16,r23
   21b38:	98000e26 	beq	r19,zero,21b74 <___vfprintf_internal_r+0x1d8>
   21b3c:	dc800e17 	ldw	r18,56(sp)
   21b40:	dc400d17 	ldw	r17,52(sp)
   21b44:	008001c4 	movi	r2,7
   21b48:	94e5883a 	add	r18,r18,r19
   21b4c:	8c400044 	addi	r17,r17,1
   21b50:	adc00015 	stw	r23,0(r21)
   21b54:	dc800e15 	stw	r18,56(sp)
   21b58:	acc00115 	stw	r19,4(r21)
   21b5c:	dc400d15 	stw	r17,52(sp)
   21b60:	14428b16 	blt	r2,r17,22590 <___vfprintf_internal_r+0xbf4>
   21b64:	ad400204 	addi	r21,r21,8
   21b68:	d9014b17 	ldw	r4,1324(sp)
   21b6c:	24c9883a 	add	r4,r4,r19
   21b70:	d9014b15 	stw	r4,1324(sp)
   21b74:	802f883a 	mov	r23,r16
   21b78:	b8800007 	ldb	r2,0(r23)
   21b7c:	10013c26 	beq	r2,zero,22070 <___vfprintf_internal_r+0x6d4>
   21b80:	bdc00044 	addi	r23,r23,1
   21b84:	d8000405 	stb	zero,16(sp)
   21b88:	b8c00007 	ldb	r3,0(r23)
   21b8c:	04ffffc4 	movi	r19,-1
   21b90:	d8014c15 	stw	zero,1328(sp)
   21b94:	d8014a15 	stw	zero,1320(sp)
   21b98:	d8c14d15 	stw	r3,1332(sp)
   21b9c:	bdc00044 	addi	r23,r23,1
   21ba0:	d9414d17 	ldw	r5,1332(sp)
   21ba4:	00801604 	movi	r2,88
   21ba8:	28fff804 	addi	r3,r5,-32
   21bac:	10c06036 	bltu	r2,r3,21d30 <___vfprintf_internal_r+0x394>
   21bb0:	18c5883a 	add	r2,r3,r3
   21bb4:	1085883a 	add	r2,r2,r2
   21bb8:	00c000b4 	movhi	r3,2
   21bbc:	18c6f304 	addi	r3,r3,7116
   21bc0:	10c5883a 	add	r2,r2,r3
   21bc4:	11000017 	ldw	r4,0(r2)
   21bc8:	2000683a 	jmp	r4
   21bcc:	00022b40 	call	22b4 <__reset-0x1dd4c>
   21bd0:	00021d30 	cmpltui	zero,zero,2164
   21bd4:	00021d30 	cmpltui	zero,zero,2164
   21bd8:	00022b2c 	andhi	zero,zero,2220
   21bdc:	00021d30 	cmpltui	zero,zero,2164
   21be0:	00021d30 	cmpltui	zero,zero,2164
   21be4:	00021d30 	cmpltui	zero,zero,2164
   21be8:	00021d30 	cmpltui	zero,zero,2164
   21bec:	00021d30 	cmpltui	zero,zero,2164
   21bf0:	00021d30 	cmpltui	zero,zero,2164
   21bf4:	0002290c 	andi	zero,zero,2212
   21bf8:	00022b1c 	xori	zero,zero,2220
   21bfc:	00021d30 	cmpltui	zero,zero,2164
   21c00:	00022924 	muli	zero,zero,2212
   21c04:	00022bb8 	rdprs	zero,zero,2222
   21c08:	00021d30 	cmpltui	zero,zero,2164
   21c0c:	00022ba4 	muli	zero,zero,2222
   21c10:	00022b6c 	andhi	zero,zero,2221
   21c14:	00022b6c 	andhi	zero,zero,2221
   21c18:	00022b6c 	andhi	zero,zero,2221
   21c1c:	00022b6c 	andhi	zero,zero,2221
   21c20:	00022b6c 	andhi	zero,zero,2221
   21c24:	00022b6c 	andhi	zero,zero,2221
   21c28:	00022b6c 	andhi	zero,zero,2221
   21c2c:	00022b6c 	andhi	zero,zero,2221
   21c30:	00022b6c 	andhi	zero,zero,2221
   21c34:	00021d30 	cmpltui	zero,zero,2164
   21c38:	00021d30 	cmpltui	zero,zero,2164
   21c3c:	00021d30 	cmpltui	zero,zero,2164
   21c40:	00021d30 	cmpltui	zero,zero,2164
   21c44:	00021d30 	cmpltui	zero,zero,2164
   21c48:	00021d30 	cmpltui	zero,zero,2164
   21c4c:	00021d30 	cmpltui	zero,zero,2164
   21c50:	00021d30 	cmpltui	zero,zero,2164
   21c54:	00021d30 	cmpltui	zero,zero,2164
   21c58:	00021d30 	cmpltui	zero,zero,2164
   21c5c:	00022388 	cmpgei	zero,zero,2190
   21c60:	000229f4 	movhi	zero,2215
   21c64:	00021d30 	cmpltui	zero,zero,2164
   21c68:	000229f4 	movhi	zero,2215
   21c6c:	00021d30 	cmpltui	zero,zero,2164
   21c70:	00021d30 	cmpltui	zero,zero,2164
   21c74:	00021d30 	cmpltui	zero,zero,2164
   21c78:	00021d30 	cmpltui	zero,zero,2164
   21c7c:	00022b58 	cmpnei	zero,zero,2221
   21c80:	00021d30 	cmpltui	zero,zero,2164
   21c84:	00021d30 	cmpltui	zero,zero,2164
   21c88:	0002243c 	xorhi	zero,zero,2192
   21c8c:	00021d30 	cmpltui	zero,zero,2164
   21c90:	00021d30 	cmpltui	zero,zero,2164
   21c94:	00021d30 	cmpltui	zero,zero,2164
   21c98:	00021d30 	cmpltui	zero,zero,2164
   21c9c:	00021d30 	cmpltui	zero,zero,2164
   21ca0:	00022488 	cmpgei	zero,zero,2194
   21ca4:	00021d30 	cmpltui	zero,zero,2164
   21ca8:	00021d30 	cmpltui	zero,zero,2164
   21cac:	00022aa8 	cmpgeui	zero,zero,2218
   21cb0:	00021d30 	cmpltui	zero,zero,2164
   21cb4:	00021d30 	cmpltui	zero,zero,2164
   21cb8:	00021d30 	cmpltui	zero,zero,2164
   21cbc:	00021d30 	cmpltui	zero,zero,2164
   21cc0:	00021d30 	cmpltui	zero,zero,2164
   21cc4:	00021d30 	cmpltui	zero,zero,2164
   21cc8:	00021d30 	cmpltui	zero,zero,2164
   21ccc:	00021d30 	cmpltui	zero,zero,2164
   21cd0:	00021d30 	cmpltui	zero,zero,2164
   21cd4:	00021d30 	cmpltui	zero,zero,2164
   21cd8:	00022a7c 	xorhi	zero,zero,2217
   21cdc:	00022394 	movui	zero,2190
   21ce0:	000229f4 	movhi	zero,2215
   21ce4:	000229f4 	movhi	zero,2215
   21ce8:	000229f4 	movhi	zero,2215
   21cec:	000229e0 	cmpeqi	zero,zero,2215
   21cf0:	00022394 	movui	zero,2190
   21cf4:	00021d30 	cmpltui	zero,zero,2164
   21cf8:	00021d30 	cmpltui	zero,zero,2164
   21cfc:	00022968 	cmpgeui	zero,zero,2213
   21d00:	00021d30 	cmpltui	zero,zero,2164
   21d04:	00022938 	rdprs	zero,zero,2212
   21d08:	00022448 	cmpgei	zero,zero,2193
   21d0c:	00022998 	cmpnei	zero,zero,2214
   21d10:	00022984 	movi	zero,2214
   21d14:	00021d30 	cmpltui	zero,zero,2164
   21d18:	00022c14 	movui	zero,2224
   21d1c:	00021d30 	cmpltui	zero,zero,2164
   21d20:	00022494 	movui	zero,2194
   21d24:	00021d30 	cmpltui	zero,zero,2164
   21d28:	00021d30 	cmpltui	zero,zero,2164
   21d2c:	00022b0c 	andi	zero,zero,2220
   21d30:	d9014d17 	ldw	r4,1332(sp)
   21d34:	2000ce26 	beq	r4,zero,22070 <___vfprintf_internal_r+0x6d4>
   21d38:	01400044 	movi	r5,1
   21d3c:	d9800f04 	addi	r6,sp,60
   21d40:	d9c14015 	stw	r7,1280(sp)
   21d44:	d9414515 	stw	r5,1300(sp)
   21d48:	d9814115 	stw	r6,1284(sp)
   21d4c:	280f883a 	mov	r7,r5
   21d50:	d9000f05 	stb	r4,60(sp)
   21d54:	d8000405 	stb	zero,16(sp)
   21d58:	d8014615 	stw	zero,1304(sp)
   21d5c:	d8c14c17 	ldw	r3,1328(sp)
   21d60:	1880008c 	andi	r2,r3,2
   21d64:	1005003a 	cmpeq	r2,r2,zero
   21d68:	d8815015 	stw	r2,1344(sp)
   21d6c:	1000031e 	bne	r2,zero,21d7c <___vfprintf_internal_r+0x3e0>
   21d70:	d9014517 	ldw	r4,1300(sp)
   21d74:	21000084 	addi	r4,r4,2
   21d78:	d9014515 	stw	r4,1300(sp)
   21d7c:	d9414c17 	ldw	r5,1328(sp)
   21d80:	2940210c 	andi	r5,r5,132
   21d84:	d9414e15 	stw	r5,1336(sp)
   21d88:	28002d1e 	bne	r5,zero,21e40 <___vfprintf_internal_r+0x4a4>
   21d8c:	d9814a17 	ldw	r6,1320(sp)
   21d90:	d8814517 	ldw	r2,1300(sp)
   21d94:	30a1c83a 	sub	r16,r6,r2
   21d98:	0400290e 	bge	zero,r16,21e40 <___vfprintf_internal_r+0x4a4>
   21d9c:	00800404 	movi	r2,16
   21da0:	1404580e 	bge	r2,r16,22f04 <___vfprintf_internal_r+0x1568>
   21da4:	dc800e17 	ldw	r18,56(sp)
   21da8:	dc400d17 	ldw	r17,52(sp)
   21dac:	1027883a 	mov	r19,r2
   21db0:	070000f4 	movhi	fp,3
   21db4:	e73ad484 	addi	fp,fp,-5294
   21db8:	050001c4 	movi	r20,7
   21dbc:	00000306 	br	21dcc <___vfprintf_internal_r+0x430>
   21dc0:	843ffc04 	addi	r16,r16,-16
   21dc4:	ad400204 	addi	r21,r21,8
   21dc8:	9c00130e 	bge	r19,r16,21e18 <___vfprintf_internal_r+0x47c>
   21dcc:	94800404 	addi	r18,r18,16
   21dd0:	8c400044 	addi	r17,r17,1
   21dd4:	af000015 	stw	fp,0(r21)
   21dd8:	acc00115 	stw	r19,4(r21)
   21ddc:	dc800e15 	stw	r18,56(sp)
   21de0:	dc400d15 	stw	r17,52(sp)
   21de4:	a47ff60e 	bge	r20,r17,21dc0 <___vfprintf_internal_r+0x424>
   21de8:	d9014f17 	ldw	r4,1340(sp)
   21dec:	b00b883a 	mov	r5,r22
   21df0:	d9800c04 	addi	r6,sp,48
   21df4:	d9c15115 	stw	r7,1348(sp)
   21df8:	00219440 	call	21944 <__sprint_r>
   21dfc:	d9c15117 	ldw	r7,1348(sp)
   21e00:	10009e1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   21e04:	843ffc04 	addi	r16,r16,-16
   21e08:	dc800e17 	ldw	r18,56(sp)
   21e0c:	dc400d17 	ldw	r17,52(sp)
   21e10:	dd401904 	addi	r21,sp,100
   21e14:	9c3fed16 	blt	r19,r16,21dcc <___vfprintf_internal_r+0x430>
   21e18:	9425883a 	add	r18,r18,r16
   21e1c:	8c400044 	addi	r17,r17,1
   21e20:	008001c4 	movi	r2,7
   21e24:	af000015 	stw	fp,0(r21)
   21e28:	ac000115 	stw	r16,4(r21)
   21e2c:	dc800e15 	stw	r18,56(sp)
   21e30:	dc400d15 	stw	r17,52(sp)
   21e34:	1441f516 	blt	r2,r17,2260c <___vfprintf_internal_r+0xc70>
   21e38:	ad400204 	addi	r21,r21,8
   21e3c:	00000206 	br	21e48 <___vfprintf_internal_r+0x4ac>
   21e40:	dc800e17 	ldw	r18,56(sp)
   21e44:	dc400d17 	ldw	r17,52(sp)
   21e48:	d8800407 	ldb	r2,16(sp)
   21e4c:	10000b26 	beq	r2,zero,21e7c <___vfprintf_internal_r+0x4e0>
   21e50:	00800044 	movi	r2,1
   21e54:	94800044 	addi	r18,r18,1
   21e58:	8c400044 	addi	r17,r17,1
   21e5c:	a8800115 	stw	r2,4(r21)
   21e60:	d8c00404 	addi	r3,sp,16
   21e64:	008001c4 	movi	r2,7
   21e68:	a8c00015 	stw	r3,0(r21)
   21e6c:	dc800e15 	stw	r18,56(sp)
   21e70:	dc400d15 	stw	r17,52(sp)
   21e74:	1441da16 	blt	r2,r17,225e0 <___vfprintf_internal_r+0xc44>
   21e78:	ad400204 	addi	r21,r21,8
   21e7c:	d9015017 	ldw	r4,1344(sp)
   21e80:	20000b1e 	bne	r4,zero,21eb0 <___vfprintf_internal_r+0x514>
   21e84:	d8800444 	addi	r2,sp,17
   21e88:	94800084 	addi	r18,r18,2
   21e8c:	8c400044 	addi	r17,r17,1
   21e90:	a8800015 	stw	r2,0(r21)
   21e94:	00c00084 	movi	r3,2
   21e98:	008001c4 	movi	r2,7
   21e9c:	a8c00115 	stw	r3,4(r21)
   21ea0:	dc800e15 	stw	r18,56(sp)
   21ea4:	dc400d15 	stw	r17,52(sp)
   21ea8:	1441c216 	blt	r2,r17,225b4 <___vfprintf_internal_r+0xc18>
   21eac:	ad400204 	addi	r21,r21,8
   21eb0:	d9414e17 	ldw	r5,1336(sp)
   21eb4:	00802004 	movi	r2,128
   21eb8:	2880b126 	beq	r5,r2,22180 <___vfprintf_internal_r+0x7e4>
   21ebc:	d8c14617 	ldw	r3,1304(sp)
   21ec0:	19e1c83a 	sub	r16,r3,r7
   21ec4:	0400260e 	bge	zero,r16,21f60 <___vfprintf_internal_r+0x5c4>
   21ec8:	00800404 	movi	r2,16
   21ecc:	1403c90e 	bge	r2,r16,22df4 <___vfprintf_internal_r+0x1458>
   21ed0:	1027883a 	mov	r19,r2
   21ed4:	070000f4 	movhi	fp,3
   21ed8:	e73ad084 	addi	fp,fp,-5310
   21edc:	050001c4 	movi	r20,7
   21ee0:	00000306 	br	21ef0 <___vfprintf_internal_r+0x554>
   21ee4:	843ffc04 	addi	r16,r16,-16
   21ee8:	ad400204 	addi	r21,r21,8
   21eec:	9c00130e 	bge	r19,r16,21f3c <___vfprintf_internal_r+0x5a0>
   21ef0:	94800404 	addi	r18,r18,16
   21ef4:	8c400044 	addi	r17,r17,1
   21ef8:	af000015 	stw	fp,0(r21)
   21efc:	acc00115 	stw	r19,4(r21)
   21f00:	dc800e15 	stw	r18,56(sp)
   21f04:	dc400d15 	stw	r17,52(sp)
   21f08:	a47ff60e 	bge	r20,r17,21ee4 <___vfprintf_internal_r+0x548>
   21f0c:	d9014f17 	ldw	r4,1340(sp)
   21f10:	b00b883a 	mov	r5,r22
   21f14:	d9800c04 	addi	r6,sp,48
   21f18:	d9c15115 	stw	r7,1348(sp)
   21f1c:	00219440 	call	21944 <__sprint_r>
   21f20:	d9c15117 	ldw	r7,1348(sp)
   21f24:	1000551e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   21f28:	843ffc04 	addi	r16,r16,-16
   21f2c:	dc800e17 	ldw	r18,56(sp)
   21f30:	dc400d17 	ldw	r17,52(sp)
   21f34:	dd401904 	addi	r21,sp,100
   21f38:	9c3fed16 	blt	r19,r16,21ef0 <___vfprintf_internal_r+0x554>
   21f3c:	9425883a 	add	r18,r18,r16
   21f40:	8c400044 	addi	r17,r17,1
   21f44:	008001c4 	movi	r2,7
   21f48:	af000015 	stw	fp,0(r21)
   21f4c:	ac000115 	stw	r16,4(r21)
   21f50:	dc800e15 	stw	r18,56(sp)
   21f54:	dc400d15 	stw	r17,52(sp)
   21f58:	14418216 	blt	r2,r17,22564 <___vfprintf_internal_r+0xbc8>
   21f5c:	ad400204 	addi	r21,r21,8
   21f60:	d9014c17 	ldw	r4,1328(sp)
   21f64:	2080400c 	andi	r2,r4,256
   21f68:	10004a1e 	bne	r2,zero,22094 <___vfprintf_internal_r+0x6f8>
   21f6c:	d9414117 	ldw	r5,1284(sp)
   21f70:	91e5883a 	add	r18,r18,r7
   21f74:	8c400044 	addi	r17,r17,1
   21f78:	008001c4 	movi	r2,7
   21f7c:	a9400015 	stw	r5,0(r21)
   21f80:	a9c00115 	stw	r7,4(r21)
   21f84:	dc800e15 	stw	r18,56(sp)
   21f88:	dc400d15 	stw	r17,52(sp)
   21f8c:	14416716 	blt	r2,r17,2252c <___vfprintf_internal_r+0xb90>
   21f90:	a8c00204 	addi	r3,r21,8
   21f94:	d9814c17 	ldw	r6,1328(sp)
   21f98:	3080010c 	andi	r2,r6,4
   21f9c:	10002826 	beq	r2,zero,22040 <___vfprintf_internal_r+0x6a4>
   21fa0:	d8814a17 	ldw	r2,1320(sp)
   21fa4:	d9014517 	ldw	r4,1300(sp)
   21fa8:	1121c83a 	sub	r16,r2,r4
   21fac:	0400240e 	bge	zero,r16,22040 <___vfprintf_internal_r+0x6a4>
   21fb0:	00800404 	movi	r2,16
   21fb4:	14044f0e 	bge	r2,r16,230f4 <___vfprintf_internal_r+0x1758>
   21fb8:	dc400d17 	ldw	r17,52(sp)
   21fbc:	1027883a 	mov	r19,r2
   21fc0:	070000f4 	movhi	fp,3
   21fc4:	e73ad484 	addi	fp,fp,-5294
   21fc8:	050001c4 	movi	r20,7
   21fcc:	00000306 	br	21fdc <___vfprintf_internal_r+0x640>
   21fd0:	843ffc04 	addi	r16,r16,-16
   21fd4:	18c00204 	addi	r3,r3,8
   21fd8:	9c00110e 	bge	r19,r16,22020 <___vfprintf_internal_r+0x684>
   21fdc:	94800404 	addi	r18,r18,16
   21fe0:	8c400044 	addi	r17,r17,1
   21fe4:	1f000015 	stw	fp,0(r3)
   21fe8:	1cc00115 	stw	r19,4(r3)
   21fec:	dc800e15 	stw	r18,56(sp)
   21ff0:	dc400d15 	stw	r17,52(sp)
   21ff4:	a47ff60e 	bge	r20,r17,21fd0 <___vfprintf_internal_r+0x634>
   21ff8:	d9014f17 	ldw	r4,1340(sp)
   21ffc:	b00b883a 	mov	r5,r22
   22000:	d9800c04 	addi	r6,sp,48
   22004:	00219440 	call	21944 <__sprint_r>
   22008:	10001c1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   2200c:	843ffc04 	addi	r16,r16,-16
   22010:	dc800e17 	ldw	r18,56(sp)
   22014:	dc400d17 	ldw	r17,52(sp)
   22018:	d8c01904 	addi	r3,sp,100
   2201c:	9c3fef16 	blt	r19,r16,21fdc <___vfprintf_internal_r+0x640>
   22020:	9425883a 	add	r18,r18,r16
   22024:	8c400044 	addi	r17,r17,1
   22028:	008001c4 	movi	r2,7
   2202c:	1f000015 	stw	fp,0(r3)
   22030:	1c000115 	stw	r16,4(r3)
   22034:	dc800e15 	stw	r18,56(sp)
   22038:	dc400d15 	stw	r17,52(sp)
   2203c:	1440cb16 	blt	r2,r17,2236c <___vfprintf_internal_r+0x9d0>
   22040:	d8814a17 	ldw	r2,1320(sp)
   22044:	d9414517 	ldw	r5,1300(sp)
   22048:	1140010e 	bge	r2,r5,22050 <___vfprintf_internal_r+0x6b4>
   2204c:	2805883a 	mov	r2,r5
   22050:	d9814b17 	ldw	r6,1324(sp)
   22054:	308d883a 	add	r6,r6,r2
   22058:	d9814b15 	stw	r6,1324(sp)
   2205c:	90013b1e 	bne	r18,zero,2254c <___vfprintf_internal_r+0xbb0>
   22060:	d9c14017 	ldw	r7,1280(sp)
   22064:	dd401904 	addi	r21,sp,100
   22068:	d8000d15 	stw	zero,52(sp)
   2206c:	003ea706 	br	21b0c <___vfprintf_internal_r+0x170>
   22070:	d8800e17 	ldw	r2,56(sp)
   22074:	10053f1e 	bne	r2,zero,23574 <___vfprintf_internal_r+0x1bd8>
   22078:	d8000d15 	stw	zero,52(sp)
   2207c:	b080030b 	ldhu	r2,12(r22)
   22080:	1080100c 	andi	r2,r2,64
   22084:	103e8726 	beq	r2,zero,21aa4 <___vfprintf_internal_r+0x108>
   22088:	00bfffc4 	movi	r2,-1
   2208c:	d8814b15 	stw	r2,1324(sp)
   22090:	003e8406 	br	21aa4 <___vfprintf_internal_r+0x108>
   22094:	d9814d17 	ldw	r6,1332(sp)
   22098:	00801944 	movi	r2,101
   2209c:	11806e16 	blt	r2,r6,22258 <___vfprintf_internal_r+0x8bc>
   220a0:	d9414717 	ldw	r5,1308(sp)
   220a4:	00c00044 	movi	r3,1
   220a8:	1943430e 	bge	r3,r5,22db8 <___vfprintf_internal_r+0x141c>
   220ac:	d8814117 	ldw	r2,1284(sp)
   220b0:	94800044 	addi	r18,r18,1
   220b4:	8c400044 	addi	r17,r17,1
   220b8:	a8800015 	stw	r2,0(r21)
   220bc:	008001c4 	movi	r2,7
   220c0:	a8c00115 	stw	r3,4(r21)
   220c4:	dc800e15 	stw	r18,56(sp)
   220c8:	dc400d15 	stw	r17,52(sp)
   220cc:	1441ca16 	blt	r2,r17,227f8 <___vfprintf_internal_r+0xe5c>
   220d0:	a8c00204 	addi	r3,r21,8
   220d4:	d9014917 	ldw	r4,1316(sp)
   220d8:	00800044 	movi	r2,1
   220dc:	94800044 	addi	r18,r18,1
   220e0:	8c400044 	addi	r17,r17,1
   220e4:	18800115 	stw	r2,4(r3)
   220e8:	008001c4 	movi	r2,7
   220ec:	19000015 	stw	r4,0(r3)
   220f0:	dc800e15 	stw	r18,56(sp)
   220f4:	dc400d15 	stw	r17,52(sp)
   220f8:	1441b616 	blt	r2,r17,227d4 <___vfprintf_internal_r+0xe38>
   220fc:	1cc00204 	addi	r19,r3,8
   22100:	d9014217 	ldw	r4,1288(sp)
   22104:	d9414317 	ldw	r5,1292(sp)
   22108:	000d883a 	mov	r6,zero
   2210c:	000f883a 	mov	r7,zero
   22110:	00297880 	call	29788 <__nedf2>
   22114:	10017426 	beq	r2,zero,226e8 <___vfprintf_internal_r+0xd4c>
   22118:	d9414717 	ldw	r5,1308(sp)
   2211c:	d9814117 	ldw	r6,1284(sp)
   22120:	8c400044 	addi	r17,r17,1
   22124:	2c85883a 	add	r2,r5,r18
   22128:	14bfffc4 	addi	r18,r2,-1
   2212c:	28bfffc4 	addi	r2,r5,-1
   22130:	30c00044 	addi	r3,r6,1
   22134:	98800115 	stw	r2,4(r19)
   22138:	008001c4 	movi	r2,7
   2213c:	98c00015 	stw	r3,0(r19)
   22140:	dc800e15 	stw	r18,56(sp)
   22144:	dc400d15 	stw	r17,52(sp)
   22148:	14418e16 	blt	r2,r17,22784 <___vfprintf_internal_r+0xde8>
   2214c:	9cc00204 	addi	r19,r19,8
   22150:	d9414817 	ldw	r5,1312(sp)
   22154:	d8800804 	addi	r2,sp,32
   22158:	8c400044 	addi	r17,r17,1
   2215c:	9165883a 	add	r18,r18,r5
   22160:	98800015 	stw	r2,0(r19)
   22164:	008001c4 	movi	r2,7
   22168:	99400115 	stw	r5,4(r19)
   2216c:	dc800e15 	stw	r18,56(sp)
   22170:	dc400d15 	stw	r17,52(sp)
   22174:	1440ed16 	blt	r2,r17,2252c <___vfprintf_internal_r+0xb90>
   22178:	98c00204 	addi	r3,r19,8
   2217c:	003f8506 	br	21f94 <___vfprintf_internal_r+0x5f8>
   22180:	d9814a17 	ldw	r6,1320(sp)
   22184:	d8814517 	ldw	r2,1300(sp)
   22188:	30a1c83a 	sub	r16,r6,r2
   2218c:	043f4b0e 	bge	zero,r16,21ebc <___vfprintf_internal_r+0x520>
   22190:	00800404 	movi	r2,16
   22194:	1404340e 	bge	r2,r16,23268 <___vfprintf_internal_r+0x18cc>
   22198:	1027883a 	mov	r19,r2
   2219c:	070000f4 	movhi	fp,3
   221a0:	e73ad084 	addi	fp,fp,-5310
   221a4:	050001c4 	movi	r20,7
   221a8:	00000306 	br	221b8 <___vfprintf_internal_r+0x81c>
   221ac:	843ffc04 	addi	r16,r16,-16
   221b0:	ad400204 	addi	r21,r21,8
   221b4:	9c00130e 	bge	r19,r16,22204 <___vfprintf_internal_r+0x868>
   221b8:	94800404 	addi	r18,r18,16
   221bc:	8c400044 	addi	r17,r17,1
   221c0:	af000015 	stw	fp,0(r21)
   221c4:	acc00115 	stw	r19,4(r21)
   221c8:	dc800e15 	stw	r18,56(sp)
   221cc:	dc400d15 	stw	r17,52(sp)
   221d0:	a47ff60e 	bge	r20,r17,221ac <___vfprintf_internal_r+0x810>
   221d4:	d9014f17 	ldw	r4,1340(sp)
   221d8:	b00b883a 	mov	r5,r22
   221dc:	d9800c04 	addi	r6,sp,48
   221e0:	d9c15115 	stw	r7,1348(sp)
   221e4:	00219440 	call	21944 <__sprint_r>
   221e8:	d9c15117 	ldw	r7,1348(sp)
   221ec:	103fa31e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   221f0:	843ffc04 	addi	r16,r16,-16
   221f4:	dc800e17 	ldw	r18,56(sp)
   221f8:	dc400d17 	ldw	r17,52(sp)
   221fc:	dd401904 	addi	r21,sp,100
   22200:	9c3fed16 	blt	r19,r16,221b8 <___vfprintf_internal_r+0x81c>
   22204:	9425883a 	add	r18,r18,r16
   22208:	8c400044 	addi	r17,r17,1
   2220c:	008001c4 	movi	r2,7
   22210:	af000015 	stw	fp,0(r21)
   22214:	ac000115 	stw	r16,4(r21)
   22218:	dc800e15 	stw	r18,56(sp)
   2221c:	dc400d15 	stw	r17,52(sp)
   22220:	14416116 	blt	r2,r17,227a8 <___vfprintf_internal_r+0xe0c>
   22224:	ad400204 	addi	r21,r21,8
   22228:	003f2406 	br	21ebc <___vfprintf_internal_r+0x520>
   2222c:	d9014f17 	ldw	r4,1340(sp)
   22230:	00254f40 	call	254f4 <__sinit>
   22234:	d9c15117 	ldw	r7,1348(sp)
   22238:	003def06 	br	219f8 <___vfprintf_internal_r+0x5c>
   2223c:	d9014f17 	ldw	r4,1340(sp)
   22240:	b00b883a 	mov	r5,r22
   22244:	d9c15115 	stw	r7,1348(sp)
   22248:	00238e40 	call	238e4 <__swsetup_r>
   2224c:	d9c15117 	ldw	r7,1348(sp)
   22250:	103dee26 	beq	r2,zero,21a0c <___vfprintf_internal_r+0x70>
   22254:	003f8c06 	br	22088 <___vfprintf_internal_r+0x6ec>
   22258:	d9014217 	ldw	r4,1288(sp)
   2225c:	d9414317 	ldw	r5,1292(sp)
   22260:	000d883a 	mov	r6,zero
   22264:	000f883a 	mov	r7,zero
   22268:	00297000 	call	29700 <__eqdf2>
   2226c:	1000f21e 	bne	r2,zero,22638 <___vfprintf_internal_r+0xc9c>
   22270:	008000f4 	movhi	r2,3
   22274:	10bad004 	addi	r2,r2,-5312
   22278:	94800044 	addi	r18,r18,1
   2227c:	8c400044 	addi	r17,r17,1
   22280:	a8800015 	stw	r2,0(r21)
   22284:	00c00044 	movi	r3,1
   22288:	008001c4 	movi	r2,7
   2228c:	a8c00115 	stw	r3,4(r21)
   22290:	dc800e15 	stw	r18,56(sp)
   22294:	dc400d15 	stw	r17,52(sp)
   22298:	1442fa16 	blt	r2,r17,22e84 <___vfprintf_internal_r+0x14e8>
   2229c:	a8c00204 	addi	r3,r21,8
   222a0:	d8800517 	ldw	r2,20(sp)
   222a4:	d9014717 	ldw	r4,1308(sp)
   222a8:	11015c0e 	bge	r2,r4,2281c <___vfprintf_internal_r+0xe80>
   222ac:	dc400d17 	ldw	r17,52(sp)
   222b0:	d9814917 	ldw	r6,1316(sp)
   222b4:	00800044 	movi	r2,1
   222b8:	94800044 	addi	r18,r18,1
   222bc:	8c400044 	addi	r17,r17,1
   222c0:	18800115 	stw	r2,4(r3)
   222c4:	008001c4 	movi	r2,7
   222c8:	19800015 	stw	r6,0(r3)
   222cc:	dc800e15 	stw	r18,56(sp)
   222d0:	dc400d15 	stw	r17,52(sp)
   222d4:	14431016 	blt	r2,r17,22f18 <___vfprintf_internal_r+0x157c>
   222d8:	18c00204 	addi	r3,r3,8
   222dc:	d8814717 	ldw	r2,1308(sp)
   222e0:	143fffc4 	addi	r16,r2,-1
   222e4:	043f2b0e 	bge	zero,r16,21f94 <___vfprintf_internal_r+0x5f8>
   222e8:	00800404 	movi	r2,16
   222ec:	1402a20e 	bge	r2,r16,22d78 <___vfprintf_internal_r+0x13dc>
   222f0:	dc400d17 	ldw	r17,52(sp)
   222f4:	1027883a 	mov	r19,r2
   222f8:	070000f4 	movhi	fp,3
   222fc:	e73ad084 	addi	fp,fp,-5310
   22300:	050001c4 	movi	r20,7
   22304:	00000306 	br	22314 <___vfprintf_internal_r+0x978>
   22308:	18c00204 	addi	r3,r3,8
   2230c:	843ffc04 	addi	r16,r16,-16
   22310:	9c029c0e 	bge	r19,r16,22d84 <___vfprintf_internal_r+0x13e8>
   22314:	94800404 	addi	r18,r18,16
   22318:	8c400044 	addi	r17,r17,1
   2231c:	1f000015 	stw	fp,0(r3)
   22320:	1cc00115 	stw	r19,4(r3)
   22324:	dc800e15 	stw	r18,56(sp)
   22328:	dc400d15 	stw	r17,52(sp)
   2232c:	a47ff60e 	bge	r20,r17,22308 <___vfprintf_internal_r+0x96c>
   22330:	d9014f17 	ldw	r4,1340(sp)
   22334:	b00b883a 	mov	r5,r22
   22338:	d9800c04 	addi	r6,sp,48
   2233c:	00219440 	call	21944 <__sprint_r>
   22340:	103f4e1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   22344:	dc800e17 	ldw	r18,56(sp)
   22348:	dc400d17 	ldw	r17,52(sp)
   2234c:	d8c01904 	addi	r3,sp,100
   22350:	003fee06 	br	2230c <___vfprintf_internal_r+0x970>
   22354:	d8802c0b 	ldhu	r2,176(sp)
   22358:	00ffffc4 	movi	r3,-1
   2235c:	d8c14b15 	stw	r3,1324(sp)
   22360:	1080100c 	andi	r2,r2,64
   22364:	103dcc1e 	bne	r2,zero,21a98 <___vfprintf_internal_r+0xfc>
   22368:	003dce06 	br	21aa4 <___vfprintf_internal_r+0x108>
   2236c:	d9014f17 	ldw	r4,1340(sp)
   22370:	b00b883a 	mov	r5,r22
   22374:	d9800c04 	addi	r6,sp,48
   22378:	00219440 	call	21944 <__sprint_r>
   2237c:	103f3f1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   22380:	dc800e17 	ldw	r18,56(sp)
   22384:	003f2e06 	br	22040 <___vfprintf_internal_r+0x6a4>
   22388:	d9414c17 	ldw	r5,1328(sp)
   2238c:	29400414 	ori	r5,r5,16
   22390:	d9414c15 	stw	r5,1328(sp)
   22394:	d9814c17 	ldw	r6,1328(sp)
   22398:	3080080c 	andi	r2,r6,32
   2239c:	10014f1e 	bne	r2,zero,228dc <___vfprintf_internal_r+0xf40>
   223a0:	d8c14c17 	ldw	r3,1328(sp)
   223a4:	1880040c 	andi	r2,r3,16
   223a8:	1002ea1e 	bne	r2,zero,22f54 <___vfprintf_internal_r+0x15b8>
   223ac:	d9014c17 	ldw	r4,1328(sp)
   223b0:	2080100c 	andi	r2,r4,64
   223b4:	1002e726 	beq	r2,zero,22f54 <___vfprintf_internal_r+0x15b8>
   223b8:	3880000f 	ldh	r2,0(r7)
   223bc:	39c00104 	addi	r7,r7,4
   223c0:	d9c14015 	stw	r7,1280(sp)
   223c4:	1023d7fa 	srai	r17,r2,31
   223c8:	1021883a 	mov	r16,r2
   223cc:	88037216 	blt	r17,zero,23198 <___vfprintf_internal_r+0x17fc>
   223d0:	01000044 	movi	r4,1
   223d4:	98000416 	blt	r19,zero,223e8 <___vfprintf_internal_r+0xa4c>
   223d8:	d8c14c17 	ldw	r3,1328(sp)
   223dc:	00bfdfc4 	movi	r2,-129
   223e0:	1886703a 	and	r3,r3,r2
   223e4:	d8c14c15 	stw	r3,1328(sp)
   223e8:	8444b03a 	or	r2,r16,r17
   223ec:	1002261e 	bne	r2,zero,22c88 <___vfprintf_internal_r+0x12ec>
   223f0:	9802251e 	bne	r19,zero,22c88 <___vfprintf_internal_r+0x12ec>
   223f4:	20803fcc 	andi	r2,r4,255
   223f8:	10029b26 	beq	r2,zero,22e68 <___vfprintf_internal_r+0x14cc>
   223fc:	d8c01904 	addi	r3,sp,100
   22400:	dd000f04 	addi	r20,sp,60
   22404:	d8c14115 	stw	r3,1284(sp)
   22408:	d8c14117 	ldw	r3,1284(sp)
   2240c:	dcc14515 	stw	r19,1300(sp)
   22410:	a0c5c83a 	sub	r2,r20,r3
   22414:	11c00a04 	addi	r7,r2,40
   22418:	99c0010e 	bge	r19,r7,22420 <___vfprintf_internal_r+0xa84>
   2241c:	d9c14515 	stw	r7,1300(sp)
   22420:	dcc14615 	stw	r19,1304(sp)
   22424:	d8800407 	ldb	r2,16(sp)
   22428:	103e4c26 	beq	r2,zero,21d5c <___vfprintf_internal_r+0x3c0>
   2242c:	d8814517 	ldw	r2,1300(sp)
   22430:	10800044 	addi	r2,r2,1
   22434:	d8814515 	stw	r2,1300(sp)
   22438:	003e4806 	br	21d5c <___vfprintf_internal_r+0x3c0>
   2243c:	d9814c17 	ldw	r6,1328(sp)
   22440:	31800414 	ori	r6,r6,16
   22444:	d9814c15 	stw	r6,1328(sp)
   22448:	d8c14c17 	ldw	r3,1328(sp)
   2244c:	1880080c 	andi	r2,r3,32
   22450:	1001271e 	bne	r2,zero,228f0 <___vfprintf_internal_r+0xf54>
   22454:	d9414c17 	ldw	r5,1328(sp)
   22458:	2880040c 	andi	r2,r5,16
   2245c:	1002b61e 	bne	r2,zero,22f38 <___vfprintf_internal_r+0x159c>
   22460:	d9814c17 	ldw	r6,1328(sp)
   22464:	3080100c 	andi	r2,r6,64
   22468:	1002b326 	beq	r2,zero,22f38 <___vfprintf_internal_r+0x159c>
   2246c:	3c00000b 	ldhu	r16,0(r7)
   22470:	0009883a 	mov	r4,zero
   22474:	39c00104 	addi	r7,r7,4
   22478:	0023883a 	mov	r17,zero
   2247c:	d9c14015 	stw	r7,1280(sp)
   22480:	d8000405 	stb	zero,16(sp)
   22484:	003fd306 	br	223d4 <___vfprintf_internal_r+0xa38>
   22488:	d9014c17 	ldw	r4,1328(sp)
   2248c:	21000414 	ori	r4,r4,16
   22490:	d9014c15 	stw	r4,1328(sp)
   22494:	d9414c17 	ldw	r5,1328(sp)
   22498:	2880080c 	andi	r2,r5,32
   2249c:	1001081e 	bne	r2,zero,228c0 <___vfprintf_internal_r+0xf24>
   224a0:	d8c14c17 	ldw	r3,1328(sp)
   224a4:	1880040c 	andi	r2,r3,16
   224a8:	1002b01e 	bne	r2,zero,22f6c <___vfprintf_internal_r+0x15d0>
   224ac:	d9014c17 	ldw	r4,1328(sp)
   224b0:	2080100c 	andi	r2,r4,64
   224b4:	1002ad26 	beq	r2,zero,22f6c <___vfprintf_internal_r+0x15d0>
   224b8:	3c00000b 	ldhu	r16,0(r7)
   224bc:	01000044 	movi	r4,1
   224c0:	39c00104 	addi	r7,r7,4
   224c4:	0023883a 	mov	r17,zero
   224c8:	d9c14015 	stw	r7,1280(sp)
   224cc:	d8000405 	stb	zero,16(sp)
   224d0:	003fc006 	br	223d4 <___vfprintf_internal_r+0xa38>
   224d4:	d9014f17 	ldw	r4,1340(sp)
   224d8:	b00b883a 	mov	r5,r22
   224dc:	d9800c04 	addi	r6,sp,48
   224e0:	00219440 	call	21944 <__sprint_r>
   224e4:	103ee51e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   224e8:	dc800e17 	ldw	r18,56(sp)
   224ec:	d8c01904 	addi	r3,sp,100
   224f0:	d9814c17 	ldw	r6,1328(sp)
   224f4:	3080004c 	andi	r2,r6,1
   224f8:	1005003a 	cmpeq	r2,r2,zero
   224fc:	103ea51e 	bne	r2,zero,21f94 <___vfprintf_internal_r+0x5f8>
   22500:	00800044 	movi	r2,1
   22504:	dc400d17 	ldw	r17,52(sp)
   22508:	18800115 	stw	r2,4(r3)
   2250c:	d8814917 	ldw	r2,1316(sp)
   22510:	94800044 	addi	r18,r18,1
   22514:	8c400044 	addi	r17,r17,1
   22518:	18800015 	stw	r2,0(r3)
   2251c:	008001c4 	movi	r2,7
   22520:	dc800e15 	stw	r18,56(sp)
   22524:	dc400d15 	stw	r17,52(sp)
   22528:	14421e0e 	bge	r2,r17,22da4 <___vfprintf_internal_r+0x1408>
   2252c:	d9014f17 	ldw	r4,1340(sp)
   22530:	b00b883a 	mov	r5,r22
   22534:	d9800c04 	addi	r6,sp,48
   22538:	00219440 	call	21944 <__sprint_r>
   2253c:	103ecf1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   22540:	dc800e17 	ldw	r18,56(sp)
   22544:	d8c01904 	addi	r3,sp,100
   22548:	003e9206 	br	21f94 <___vfprintf_internal_r+0x5f8>
   2254c:	d9014f17 	ldw	r4,1340(sp)
   22550:	b00b883a 	mov	r5,r22
   22554:	d9800c04 	addi	r6,sp,48
   22558:	00219440 	call	21944 <__sprint_r>
   2255c:	103ec026 	beq	r2,zero,22060 <___vfprintf_internal_r+0x6c4>
   22560:	003ec606 	br	2207c <___vfprintf_internal_r+0x6e0>
   22564:	d9014f17 	ldw	r4,1340(sp)
   22568:	b00b883a 	mov	r5,r22
   2256c:	d9800c04 	addi	r6,sp,48
   22570:	d9c15115 	stw	r7,1348(sp)
   22574:	00219440 	call	21944 <__sprint_r>
   22578:	d9c15117 	ldw	r7,1348(sp)
   2257c:	103ebf1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   22580:	dc800e17 	ldw	r18,56(sp)
   22584:	dc400d17 	ldw	r17,52(sp)
   22588:	dd401904 	addi	r21,sp,100
   2258c:	003e7406 	br	21f60 <___vfprintf_internal_r+0x5c4>
   22590:	d9014f17 	ldw	r4,1340(sp)
   22594:	b00b883a 	mov	r5,r22
   22598:	d9800c04 	addi	r6,sp,48
   2259c:	d9c15115 	stw	r7,1348(sp)
   225a0:	00219440 	call	21944 <__sprint_r>
   225a4:	d9c15117 	ldw	r7,1348(sp)
   225a8:	103eb41e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   225ac:	dd401904 	addi	r21,sp,100
   225b0:	003d6d06 	br	21b68 <___vfprintf_internal_r+0x1cc>
   225b4:	d9014f17 	ldw	r4,1340(sp)
   225b8:	b00b883a 	mov	r5,r22
   225bc:	d9800c04 	addi	r6,sp,48
   225c0:	d9c15115 	stw	r7,1348(sp)
   225c4:	00219440 	call	21944 <__sprint_r>
   225c8:	d9c15117 	ldw	r7,1348(sp)
   225cc:	103eab1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   225d0:	dc800e17 	ldw	r18,56(sp)
   225d4:	dc400d17 	ldw	r17,52(sp)
   225d8:	dd401904 	addi	r21,sp,100
   225dc:	003e3406 	br	21eb0 <___vfprintf_internal_r+0x514>
   225e0:	d9014f17 	ldw	r4,1340(sp)
   225e4:	b00b883a 	mov	r5,r22
   225e8:	d9800c04 	addi	r6,sp,48
   225ec:	d9c15115 	stw	r7,1348(sp)
   225f0:	00219440 	call	21944 <__sprint_r>
   225f4:	d9c15117 	ldw	r7,1348(sp)
   225f8:	103ea01e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   225fc:	dc800e17 	ldw	r18,56(sp)
   22600:	dc400d17 	ldw	r17,52(sp)
   22604:	dd401904 	addi	r21,sp,100
   22608:	003e1c06 	br	21e7c <___vfprintf_internal_r+0x4e0>
   2260c:	d9014f17 	ldw	r4,1340(sp)
   22610:	b00b883a 	mov	r5,r22
   22614:	d9800c04 	addi	r6,sp,48
   22618:	d9c15115 	stw	r7,1348(sp)
   2261c:	00219440 	call	21944 <__sprint_r>
   22620:	d9c15117 	ldw	r7,1348(sp)
   22624:	103e951e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   22628:	dc800e17 	ldw	r18,56(sp)
   2262c:	dc400d17 	ldw	r17,52(sp)
   22630:	dd401904 	addi	r21,sp,100
   22634:	003e0406 	br	21e48 <___vfprintf_internal_r+0x4ac>
   22638:	d9000517 	ldw	r4,20(sp)
   2263c:	0102520e 	bge	zero,r4,22f88 <___vfprintf_internal_r+0x15ec>
   22640:	d9814717 	ldw	r6,1308(sp)
   22644:	21807a16 	blt	r4,r6,22830 <___vfprintf_internal_r+0xe94>
   22648:	d8814117 	ldw	r2,1284(sp)
   2264c:	91a5883a 	add	r18,r18,r6
   22650:	8c400044 	addi	r17,r17,1
   22654:	a8800015 	stw	r2,0(r21)
   22658:	008001c4 	movi	r2,7
   2265c:	a9800115 	stw	r6,4(r21)
   22660:	dc800e15 	stw	r18,56(sp)
   22664:	dc400d15 	stw	r17,52(sp)
   22668:	1442f616 	blt	r2,r17,23244 <___vfprintf_internal_r+0x18a8>
   2266c:	a8c00204 	addi	r3,r21,8
   22670:	d9414717 	ldw	r5,1308(sp)
   22674:	2161c83a 	sub	r16,r4,r5
   22678:	043f9d0e 	bge	zero,r16,224f0 <___vfprintf_internal_r+0xb54>
   2267c:	00800404 	movi	r2,16
   22680:	1402130e 	bge	r2,r16,22ed0 <___vfprintf_internal_r+0x1534>
   22684:	dc400d17 	ldw	r17,52(sp)
   22688:	1027883a 	mov	r19,r2
   2268c:	070000f4 	movhi	fp,3
   22690:	e73ad084 	addi	fp,fp,-5310
   22694:	050001c4 	movi	r20,7
   22698:	00000306 	br	226a8 <___vfprintf_internal_r+0xd0c>
   2269c:	18c00204 	addi	r3,r3,8
   226a0:	843ffc04 	addi	r16,r16,-16
   226a4:	9c020d0e 	bge	r19,r16,22edc <___vfprintf_internal_r+0x1540>
   226a8:	94800404 	addi	r18,r18,16
   226ac:	8c400044 	addi	r17,r17,1
   226b0:	1f000015 	stw	fp,0(r3)
   226b4:	1cc00115 	stw	r19,4(r3)
   226b8:	dc800e15 	stw	r18,56(sp)
   226bc:	dc400d15 	stw	r17,52(sp)
   226c0:	a47ff60e 	bge	r20,r17,2269c <___vfprintf_internal_r+0xd00>
   226c4:	d9014f17 	ldw	r4,1340(sp)
   226c8:	b00b883a 	mov	r5,r22
   226cc:	d9800c04 	addi	r6,sp,48
   226d0:	00219440 	call	21944 <__sprint_r>
   226d4:	103e691e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   226d8:	dc800e17 	ldw	r18,56(sp)
   226dc:	dc400d17 	ldw	r17,52(sp)
   226e0:	d8c01904 	addi	r3,sp,100
   226e4:	003fee06 	br	226a0 <___vfprintf_internal_r+0xd04>
   226e8:	d8814717 	ldw	r2,1308(sp)
   226ec:	143fffc4 	addi	r16,r2,-1
   226f0:	043e970e 	bge	zero,r16,22150 <___vfprintf_internal_r+0x7b4>
   226f4:	00800404 	movi	r2,16
   226f8:	1400180e 	bge	r2,r16,2275c <___vfprintf_internal_r+0xdc0>
   226fc:	1029883a 	mov	r20,r2
   22700:	070000f4 	movhi	fp,3
   22704:	e73ad084 	addi	fp,fp,-5310
   22708:	054001c4 	movi	r21,7
   2270c:	00000306 	br	2271c <___vfprintf_internal_r+0xd80>
   22710:	9cc00204 	addi	r19,r19,8
   22714:	843ffc04 	addi	r16,r16,-16
   22718:	a400120e 	bge	r20,r16,22764 <___vfprintf_internal_r+0xdc8>
   2271c:	94800404 	addi	r18,r18,16
   22720:	8c400044 	addi	r17,r17,1
   22724:	9f000015 	stw	fp,0(r19)
   22728:	9d000115 	stw	r20,4(r19)
   2272c:	dc800e15 	stw	r18,56(sp)
   22730:	dc400d15 	stw	r17,52(sp)
   22734:	ac7ff60e 	bge	r21,r17,22710 <___vfprintf_internal_r+0xd74>
   22738:	d9014f17 	ldw	r4,1340(sp)
   2273c:	b00b883a 	mov	r5,r22
   22740:	d9800c04 	addi	r6,sp,48
   22744:	00219440 	call	21944 <__sprint_r>
   22748:	103e4c1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   2274c:	dc800e17 	ldw	r18,56(sp)
   22750:	dc400d17 	ldw	r17,52(sp)
   22754:	dcc01904 	addi	r19,sp,100
   22758:	003fee06 	br	22714 <___vfprintf_internal_r+0xd78>
   2275c:	070000f4 	movhi	fp,3
   22760:	e73ad084 	addi	fp,fp,-5310
   22764:	9425883a 	add	r18,r18,r16
   22768:	8c400044 	addi	r17,r17,1
   2276c:	008001c4 	movi	r2,7
   22770:	9f000015 	stw	fp,0(r19)
   22774:	9c000115 	stw	r16,4(r19)
   22778:	dc800e15 	stw	r18,56(sp)
   2277c:	dc400d15 	stw	r17,52(sp)
   22780:	147e720e 	bge	r2,r17,2214c <___vfprintf_internal_r+0x7b0>
   22784:	d9014f17 	ldw	r4,1340(sp)
   22788:	b00b883a 	mov	r5,r22
   2278c:	d9800c04 	addi	r6,sp,48
   22790:	00219440 	call	21944 <__sprint_r>
   22794:	103e391e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   22798:	dc800e17 	ldw	r18,56(sp)
   2279c:	dc400d17 	ldw	r17,52(sp)
   227a0:	dcc01904 	addi	r19,sp,100
   227a4:	003e6a06 	br	22150 <___vfprintf_internal_r+0x7b4>
   227a8:	d9014f17 	ldw	r4,1340(sp)
   227ac:	b00b883a 	mov	r5,r22
   227b0:	d9800c04 	addi	r6,sp,48
   227b4:	d9c15115 	stw	r7,1348(sp)
   227b8:	00219440 	call	21944 <__sprint_r>
   227bc:	d9c15117 	ldw	r7,1348(sp)
   227c0:	103e2e1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   227c4:	dc800e17 	ldw	r18,56(sp)
   227c8:	dc400d17 	ldw	r17,52(sp)
   227cc:	dd401904 	addi	r21,sp,100
   227d0:	003dba06 	br	21ebc <___vfprintf_internal_r+0x520>
   227d4:	d9014f17 	ldw	r4,1340(sp)
   227d8:	b00b883a 	mov	r5,r22
   227dc:	d9800c04 	addi	r6,sp,48
   227e0:	00219440 	call	21944 <__sprint_r>
   227e4:	103e251e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   227e8:	dc800e17 	ldw	r18,56(sp)
   227ec:	dc400d17 	ldw	r17,52(sp)
   227f0:	dcc01904 	addi	r19,sp,100
   227f4:	003e4206 	br	22100 <___vfprintf_internal_r+0x764>
   227f8:	d9014f17 	ldw	r4,1340(sp)
   227fc:	b00b883a 	mov	r5,r22
   22800:	d9800c04 	addi	r6,sp,48
   22804:	00219440 	call	21944 <__sprint_r>
   22808:	103e1c1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   2280c:	dc800e17 	ldw	r18,56(sp)
   22810:	dc400d17 	ldw	r17,52(sp)
   22814:	d8c01904 	addi	r3,sp,100
   22818:	003e2e06 	br	220d4 <___vfprintf_internal_r+0x738>
   2281c:	d9414c17 	ldw	r5,1328(sp)
   22820:	2880004c 	andi	r2,r5,1
   22824:	1005003a 	cmpeq	r2,r2,zero
   22828:	103dda1e 	bne	r2,zero,21f94 <___vfprintf_internal_r+0x5f8>
   2282c:	003e9f06 	br	222ac <___vfprintf_internal_r+0x910>
   22830:	d8c14117 	ldw	r3,1284(sp)
   22834:	9125883a 	add	r18,r18,r4
   22838:	8c400044 	addi	r17,r17,1
   2283c:	008001c4 	movi	r2,7
   22840:	a8c00015 	stw	r3,0(r21)
   22844:	a9000115 	stw	r4,4(r21)
   22848:	dc800e15 	stw	r18,56(sp)
   2284c:	dc400d15 	stw	r17,52(sp)
   22850:	14426616 	blt	r2,r17,231ec <___vfprintf_internal_r+0x1850>
   22854:	a8c00204 	addi	r3,r21,8
   22858:	d9414917 	ldw	r5,1316(sp)
   2285c:	00800044 	movi	r2,1
   22860:	94800044 	addi	r18,r18,1
   22864:	8c400044 	addi	r17,r17,1
   22868:	18800115 	stw	r2,4(r3)
   2286c:	008001c4 	movi	r2,7
   22870:	19400015 	stw	r5,0(r3)
   22874:	dc800e15 	stw	r18,56(sp)
   22878:	dc400d15 	stw	r17,52(sp)
   2287c:	2021883a 	mov	r16,r4
   22880:	14425016 	blt	r2,r17,231c4 <___vfprintf_internal_r+0x1828>
   22884:	19400204 	addi	r5,r3,8
   22888:	d9814717 	ldw	r6,1308(sp)
   2288c:	8c400044 	addi	r17,r17,1
   22890:	dc400d15 	stw	r17,52(sp)
   22894:	3107c83a 	sub	r3,r6,r4
   22898:	d9014117 	ldw	r4,1284(sp)
   2289c:	90e5883a 	add	r18,r18,r3
   228a0:	28c00115 	stw	r3,4(r5)
   228a4:	8105883a 	add	r2,r16,r4
   228a8:	28800015 	stw	r2,0(r5)
   228ac:	008001c4 	movi	r2,7
   228b0:	dc800e15 	stw	r18,56(sp)
   228b4:	147f1d16 	blt	r2,r17,2252c <___vfprintf_internal_r+0xb90>
   228b8:	28c00204 	addi	r3,r5,8
   228bc:	003db506 	br	21f94 <___vfprintf_internal_r+0x5f8>
   228c0:	3c000017 	ldw	r16,0(r7)
   228c4:	3c400117 	ldw	r17,4(r7)
   228c8:	39800204 	addi	r6,r7,8
   228cc:	01000044 	movi	r4,1
   228d0:	d9814015 	stw	r6,1280(sp)
   228d4:	d8000405 	stb	zero,16(sp)
   228d8:	003ebe06 	br	223d4 <___vfprintf_internal_r+0xa38>
   228dc:	3c000017 	ldw	r16,0(r7)
   228e0:	3c400117 	ldw	r17,4(r7)
   228e4:	38800204 	addi	r2,r7,8
   228e8:	d8814015 	stw	r2,1280(sp)
   228ec:	003eb706 	br	223cc <___vfprintf_internal_r+0xa30>
   228f0:	3c000017 	ldw	r16,0(r7)
   228f4:	3c400117 	ldw	r17,4(r7)
   228f8:	39000204 	addi	r4,r7,8
   228fc:	d9014015 	stw	r4,1280(sp)
   22900:	0009883a 	mov	r4,zero
   22904:	d8000405 	stb	zero,16(sp)
   22908:	003eb206 	br	223d4 <___vfprintf_internal_r+0xa38>
   2290c:	38c00017 	ldw	r3,0(r7)
   22910:	39c00104 	addi	r7,r7,4
   22914:	d8c14a15 	stw	r3,1320(sp)
   22918:	1800d10e 	bge	r3,zero,22c60 <___vfprintf_internal_r+0x12c4>
   2291c:	00c7c83a 	sub	r3,zero,r3
   22920:	d8c14a15 	stw	r3,1320(sp)
   22924:	d9014c17 	ldw	r4,1328(sp)
   22928:	b8c00007 	ldb	r3,0(r23)
   2292c:	21000114 	ori	r4,r4,4
   22930:	d9014c15 	stw	r4,1328(sp)
   22934:	003c9806 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22938:	d9814c17 	ldw	r6,1328(sp)
   2293c:	3080080c 	andi	r2,r6,32
   22940:	1001f026 	beq	r2,zero,23104 <___vfprintf_internal_r+0x1768>
   22944:	d9014b17 	ldw	r4,1324(sp)
   22948:	38800017 	ldw	r2,0(r7)
   2294c:	39c00104 	addi	r7,r7,4
   22950:	d9c14015 	stw	r7,1280(sp)
   22954:	2007d7fa 	srai	r3,r4,31
   22958:	d9c14017 	ldw	r7,1280(sp)
   2295c:	11000015 	stw	r4,0(r2)
   22960:	10c00115 	stw	r3,4(r2)
   22964:	003c6906 	br	21b0c <___vfprintf_internal_r+0x170>
   22968:	b8c00007 	ldb	r3,0(r23)
   2296c:	00801b04 	movi	r2,108
   22970:	18824f26 	beq	r3,r2,232b0 <___vfprintf_internal_r+0x1914>
   22974:	d9414c17 	ldw	r5,1328(sp)
   22978:	29400414 	ori	r5,r5,16
   2297c:	d9414c15 	stw	r5,1328(sp)
   22980:	003c8506 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22984:	d9814c17 	ldw	r6,1328(sp)
   22988:	b8c00007 	ldb	r3,0(r23)
   2298c:	31800814 	ori	r6,r6,32
   22990:	d9814c15 	stw	r6,1328(sp)
   22994:	003c8006 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22998:	d8814c17 	ldw	r2,1328(sp)
   2299c:	3c000017 	ldw	r16,0(r7)
   229a0:	00c01e04 	movi	r3,120
   229a4:	10800094 	ori	r2,r2,2
   229a8:	d8814c15 	stw	r2,1328(sp)
   229ac:	39c00104 	addi	r7,r7,4
   229b0:	014000f4 	movhi	r5,3
   229b4:	297ab904 	addi	r5,r5,-5404
   229b8:	00800c04 	movi	r2,48
   229bc:	0023883a 	mov	r17,zero
   229c0:	01000084 	movi	r4,2
   229c4:	d9c14015 	stw	r7,1280(sp)
   229c8:	d8c14d15 	stw	r3,1332(sp)
   229cc:	d9414415 	stw	r5,1296(sp)
   229d0:	d8800445 	stb	r2,17(sp)
   229d4:	d8c00485 	stb	r3,18(sp)
   229d8:	d8000405 	stb	zero,16(sp)
   229dc:	003e7d06 	br	223d4 <___vfprintf_internal_r+0xa38>
   229e0:	d8814c17 	ldw	r2,1328(sp)
   229e4:	b8c00007 	ldb	r3,0(r23)
   229e8:	10801014 	ori	r2,r2,64
   229ec:	d8814c15 	stw	r2,1328(sp)
   229f0:	003c6906 	br	21b98 <___vfprintf_internal_r+0x1fc>
   229f4:	d9414c17 	ldw	r5,1328(sp)
   229f8:	2880020c 	andi	r2,r5,8
   229fc:	1001df26 	beq	r2,zero,2317c <___vfprintf_internal_r+0x17e0>
   22a00:	39800017 	ldw	r6,0(r7)
   22a04:	38800204 	addi	r2,r7,8
   22a08:	d8814015 	stw	r2,1280(sp)
   22a0c:	d9814215 	stw	r6,1288(sp)
   22a10:	39c00117 	ldw	r7,4(r7)
   22a14:	d9c14315 	stw	r7,1292(sp)
   22a18:	d9014217 	ldw	r4,1288(sp)
   22a1c:	d9414317 	ldw	r5,1292(sp)
   22a20:	0027d500 	call	27d50 <__isinfd>
   22a24:	10021726 	beq	r2,zero,23284 <___vfprintf_internal_r+0x18e8>
   22a28:	d9014217 	ldw	r4,1288(sp)
   22a2c:	d9414317 	ldw	r5,1292(sp)
   22a30:	000d883a 	mov	r6,zero
   22a34:	000f883a 	mov	r7,zero
   22a38:	00299200 	call	29920 <__ltdf2>
   22a3c:	1002ca16 	blt	r2,zero,23568 <___vfprintf_internal_r+0x1bcc>
   22a40:	d9414d17 	ldw	r5,1332(sp)
   22a44:	008011c4 	movi	r2,71
   22a48:	11420a16 	blt	r2,r5,23274 <___vfprintf_internal_r+0x18d8>
   22a4c:	018000f4 	movhi	r6,3
   22a50:	31babe04 	addi	r6,r6,-5384
   22a54:	d9814115 	stw	r6,1284(sp)
   22a58:	d9014c17 	ldw	r4,1328(sp)
   22a5c:	00c000c4 	movi	r3,3
   22a60:	00bfdfc4 	movi	r2,-129
   22a64:	2088703a 	and	r4,r4,r2
   22a68:	180f883a 	mov	r7,r3
   22a6c:	d8c14515 	stw	r3,1300(sp)
   22a70:	d9014c15 	stw	r4,1328(sp)
   22a74:	d8014615 	stw	zero,1304(sp)
   22a78:	003e6a06 	br	22424 <___vfprintf_internal_r+0xa88>
   22a7c:	38800017 	ldw	r2,0(r7)
   22a80:	00c00044 	movi	r3,1
   22a84:	39c00104 	addi	r7,r7,4
   22a88:	d9c14015 	stw	r7,1280(sp)
   22a8c:	d9000f04 	addi	r4,sp,60
   22a90:	180f883a 	mov	r7,r3
   22a94:	d8c14515 	stw	r3,1300(sp)
   22a98:	d9014115 	stw	r4,1284(sp)
   22a9c:	d8800f05 	stb	r2,60(sp)
   22aa0:	d8000405 	stb	zero,16(sp)
   22aa4:	003cac06 	br	21d58 <___vfprintf_internal_r+0x3bc>
   22aa8:	014000f4 	movhi	r5,3
   22aac:	297ac404 	addi	r5,r5,-5360
   22ab0:	d9414415 	stw	r5,1296(sp)
   22ab4:	d9814c17 	ldw	r6,1328(sp)
   22ab8:	3080080c 	andi	r2,r6,32
   22abc:	1000f926 	beq	r2,zero,22ea4 <___vfprintf_internal_r+0x1508>
   22ac0:	3c000017 	ldw	r16,0(r7)
   22ac4:	3c400117 	ldw	r17,4(r7)
   22ac8:	38800204 	addi	r2,r7,8
   22acc:	d8814015 	stw	r2,1280(sp)
   22ad0:	d9414c17 	ldw	r5,1328(sp)
   22ad4:	2880004c 	andi	r2,r5,1
   22ad8:	1005003a 	cmpeq	r2,r2,zero
   22adc:	1000b31e 	bne	r2,zero,22dac <___vfprintf_internal_r+0x1410>
   22ae0:	8444b03a 	or	r2,r16,r17
   22ae4:	1000b126 	beq	r2,zero,22dac <___vfprintf_internal_r+0x1410>
   22ae8:	d9814d17 	ldw	r6,1332(sp)
   22aec:	29400094 	ori	r5,r5,2
   22af0:	00800c04 	movi	r2,48
   22af4:	01000084 	movi	r4,2
   22af8:	d9414c15 	stw	r5,1328(sp)
   22afc:	d8800445 	stb	r2,17(sp)
   22b00:	d9800485 	stb	r6,18(sp)
   22b04:	d8000405 	stb	zero,16(sp)
   22b08:	003e3206 	br	223d4 <___vfprintf_internal_r+0xa38>
   22b0c:	018000f4 	movhi	r6,3
   22b10:	31bab904 	addi	r6,r6,-5404
   22b14:	d9814415 	stw	r6,1296(sp)
   22b18:	003fe606 	br	22ab4 <___vfprintf_internal_r+0x1118>
   22b1c:	00800ac4 	movi	r2,43
   22b20:	d8800405 	stb	r2,16(sp)
   22b24:	b8c00007 	ldb	r3,0(r23)
   22b28:	003c1b06 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22b2c:	d8814c17 	ldw	r2,1328(sp)
   22b30:	b8c00007 	ldb	r3,0(r23)
   22b34:	10800054 	ori	r2,r2,1
   22b38:	d8814c15 	stw	r2,1328(sp)
   22b3c:	003c1606 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22b40:	d8800407 	ldb	r2,16(sp)
   22b44:	1000461e 	bne	r2,zero,22c60 <___vfprintf_internal_r+0x12c4>
   22b48:	00800804 	movi	r2,32
   22b4c:	d8800405 	stb	r2,16(sp)
   22b50:	b8c00007 	ldb	r3,0(r23)
   22b54:	003c1006 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22b58:	d9814c17 	ldw	r6,1328(sp)
   22b5c:	b8c00007 	ldb	r3,0(r23)
   22b60:	31800214 	ori	r6,r6,8
   22b64:	d9814c15 	stw	r6,1328(sp)
   22b68:	003c0b06 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22b6c:	0007883a 	mov	r3,zero
   22b70:	01000244 	movi	r4,9
   22b74:	188002a4 	muli	r2,r3,10
   22b78:	b8c00007 	ldb	r3,0(r23)
   22b7c:	d9814d17 	ldw	r6,1332(sp)
   22b80:	bdc00044 	addi	r23,r23,1
   22b84:	d8c14d15 	stw	r3,1332(sp)
   22b88:	d9414d17 	ldw	r5,1332(sp)
   22b8c:	3085883a 	add	r2,r6,r2
   22b90:	10fff404 	addi	r3,r2,-48
   22b94:	28bff404 	addi	r2,r5,-48
   22b98:	20bff62e 	bgeu	r4,r2,22b74 <___vfprintf_internal_r+0x11d8>
   22b9c:	d8c14a15 	stw	r3,1320(sp)
   22ba0:	003bff06 	br	21ba0 <___vfprintf_internal_r+0x204>
   22ba4:	d9414c17 	ldw	r5,1328(sp)
   22ba8:	b8c00007 	ldb	r3,0(r23)
   22bac:	29402014 	ori	r5,r5,128
   22bb0:	d9414c15 	stw	r5,1328(sp)
   22bb4:	003bf806 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22bb8:	b8c00007 	ldb	r3,0(r23)
   22bbc:	00800a84 	movi	r2,42
   22bc0:	bdc00044 	addi	r23,r23,1
   22bc4:	18831526 	beq	r3,r2,2381c <___vfprintf_internal_r+0x1e80>
   22bc8:	d8c14d15 	stw	r3,1332(sp)
   22bcc:	18bff404 	addi	r2,r3,-48
   22bd0:	00c00244 	movi	r3,9
   22bd4:	18827836 	bltu	r3,r2,235b8 <___vfprintf_internal_r+0x1c1c>
   22bd8:	000d883a 	mov	r6,zero
   22bdc:	308002a4 	muli	r2,r6,10
   22be0:	b9800007 	ldb	r6,0(r23)
   22be4:	d9414d17 	ldw	r5,1332(sp)
   22be8:	bdc00044 	addi	r23,r23,1
   22bec:	d9814d15 	stw	r6,1332(sp)
   22bf0:	d9014d17 	ldw	r4,1332(sp)
   22bf4:	1145883a 	add	r2,r2,r5
   22bf8:	11bff404 	addi	r6,r2,-48
   22bfc:	20bff404 	addi	r2,r4,-48
   22c00:	18bff62e 	bgeu	r3,r2,22bdc <___vfprintf_internal_r+0x1240>
   22c04:	3027883a 	mov	r19,r6
   22c08:	303be50e 	bge	r6,zero,21ba0 <___vfprintf_internal_r+0x204>
   22c0c:	04ffffc4 	movi	r19,-1
   22c10:	003be306 	br	21ba0 <___vfprintf_internal_r+0x204>
   22c14:	d8000405 	stb	zero,16(sp)
   22c18:	39800017 	ldw	r6,0(r7)
   22c1c:	39c00104 	addi	r7,r7,4
   22c20:	d9c14015 	stw	r7,1280(sp)
   22c24:	d9814115 	stw	r6,1284(sp)
   22c28:	3001c926 	beq	r6,zero,23350 <___vfprintf_internal_r+0x19b4>
   22c2c:	98000e16 	blt	r19,zero,22c68 <___vfprintf_internal_r+0x12cc>
   22c30:	d9014117 	ldw	r4,1284(sp)
   22c34:	000b883a 	mov	r5,zero
   22c38:	980d883a 	mov	r6,r19
   22c3c:	00263f40 	call	263f4 <memchr>
   22c40:	10025926 	beq	r2,zero,235a8 <___vfprintf_internal_r+0x1c0c>
   22c44:	d8c14117 	ldw	r3,1284(sp)
   22c48:	10cfc83a 	sub	r7,r2,r3
   22c4c:	99c19e16 	blt	r19,r7,232c8 <___vfprintf_internal_r+0x192c>
   22c50:	d9c14515 	stw	r7,1300(sp)
   22c54:	38000916 	blt	r7,zero,22c7c <___vfprintf_internal_r+0x12e0>
   22c58:	d8014615 	stw	zero,1304(sp)
   22c5c:	003df106 	br	22424 <___vfprintf_internal_r+0xa88>
   22c60:	b8c00007 	ldb	r3,0(r23)
   22c64:	003bcc06 	br	21b98 <___vfprintf_internal_r+0x1fc>
   22c68:	d9014117 	ldw	r4,1284(sp)
   22c6c:	00218d00 	call	218d0 <strlen>
   22c70:	d8814515 	stw	r2,1300(sp)
   22c74:	100f883a 	mov	r7,r2
   22c78:	103ff70e 	bge	r2,zero,22c58 <___vfprintf_internal_r+0x12bc>
   22c7c:	d8014515 	stw	zero,1300(sp)
   22c80:	d8014615 	stw	zero,1304(sp)
   22c84:	003de706 	br	22424 <___vfprintf_internal_r+0xa88>
   22c88:	20c03fcc 	andi	r3,r4,255
   22c8c:	00800044 	movi	r2,1
   22c90:	18802d26 	beq	r3,r2,22d48 <___vfprintf_internal_r+0x13ac>
   22c94:	18800e36 	bltu	r3,r2,22cd0 <___vfprintf_internal_r+0x1334>
   22c98:	00800084 	movi	r2,2
   22c9c:	1880fa26 	beq	r3,r2,23088 <___vfprintf_internal_r+0x16ec>
   22ca0:	010000f4 	movhi	r4,3
   22ca4:	213ac904 	addi	r4,r4,-5340
   22ca8:	00218d00 	call	218d0 <strlen>
   22cac:	100f883a 	mov	r7,r2
   22cb0:	dcc14515 	stw	r19,1300(sp)
   22cb4:	9880010e 	bge	r19,r2,22cbc <___vfprintf_internal_r+0x1320>
   22cb8:	d8814515 	stw	r2,1300(sp)
   22cbc:	008000f4 	movhi	r2,3
   22cc0:	10bac904 	addi	r2,r2,-5340
   22cc4:	dcc14615 	stw	r19,1304(sp)
   22cc8:	d8814115 	stw	r2,1284(sp)
   22ccc:	003dd506 	br	22424 <___vfprintf_internal_r+0xa88>
   22cd0:	d9401904 	addi	r5,sp,100
   22cd4:	dd000f04 	addi	r20,sp,60
   22cd8:	d9414115 	stw	r5,1284(sp)
   22cdc:	880a977a 	slli	r5,r17,29
   22ce0:	d9814117 	ldw	r6,1284(sp)
   22ce4:	8004d0fa 	srli	r2,r16,3
   22ce8:	8806d0fa 	srli	r3,r17,3
   22cec:	810001cc 	andi	r4,r16,7
   22cf0:	2884b03a 	or	r2,r5,r2
   22cf4:	31bfffc4 	addi	r6,r6,-1
   22cf8:	21000c04 	addi	r4,r4,48
   22cfc:	d9814115 	stw	r6,1284(sp)
   22d00:	10cab03a 	or	r5,r2,r3
   22d04:	31000005 	stb	r4,0(r6)
   22d08:	1021883a 	mov	r16,r2
   22d0c:	1823883a 	mov	r17,r3
   22d10:	283ff21e 	bne	r5,zero,22cdc <___vfprintf_internal_r+0x1340>
   22d14:	d8c14c17 	ldw	r3,1328(sp)
   22d18:	1880004c 	andi	r2,r3,1
   22d1c:	1005003a 	cmpeq	r2,r2,zero
   22d20:	103db91e 	bne	r2,zero,22408 <___vfprintf_internal_r+0xa6c>
   22d24:	20803fcc 	andi	r2,r4,255
   22d28:	1080201c 	xori	r2,r2,128
   22d2c:	10bfe004 	addi	r2,r2,-128
   22d30:	00c00c04 	movi	r3,48
   22d34:	10fdb426 	beq	r2,r3,22408 <___vfprintf_internal_r+0xa6c>
   22d38:	31bfffc4 	addi	r6,r6,-1
   22d3c:	d9814115 	stw	r6,1284(sp)
   22d40:	30c00005 	stb	r3,0(r6)
   22d44:	003db006 	br	22408 <___vfprintf_internal_r+0xa6c>
   22d48:	88800068 	cmpgeui	r2,r17,1
   22d4c:	10002c1e 	bne	r2,zero,22e00 <___vfprintf_internal_r+0x1464>
   22d50:	8800021e 	bne	r17,zero,22d5c <___vfprintf_internal_r+0x13c0>
   22d54:	00800244 	movi	r2,9
   22d58:	14002936 	bltu	r2,r16,22e00 <___vfprintf_internal_r+0x1464>
   22d5c:	d90018c4 	addi	r4,sp,99
   22d60:	dd000f04 	addi	r20,sp,60
   22d64:	d9014115 	stw	r4,1284(sp)
   22d68:	d9014117 	ldw	r4,1284(sp)
   22d6c:	80800c04 	addi	r2,r16,48
   22d70:	20800005 	stb	r2,0(r4)
   22d74:	003da406 	br	22408 <___vfprintf_internal_r+0xa6c>
   22d78:	dc400d17 	ldw	r17,52(sp)
   22d7c:	070000f4 	movhi	fp,3
   22d80:	e73ad084 	addi	fp,fp,-5310
   22d84:	9425883a 	add	r18,r18,r16
   22d88:	8c400044 	addi	r17,r17,1
   22d8c:	008001c4 	movi	r2,7
   22d90:	1f000015 	stw	fp,0(r3)
   22d94:	1c000115 	stw	r16,4(r3)
   22d98:	dc800e15 	stw	r18,56(sp)
   22d9c:	dc400d15 	stw	r17,52(sp)
   22da0:	147de216 	blt	r2,r17,2252c <___vfprintf_internal_r+0xb90>
   22da4:	18c00204 	addi	r3,r3,8
   22da8:	003c7a06 	br	21f94 <___vfprintf_internal_r+0x5f8>
   22dac:	01000084 	movi	r4,2
   22db0:	d8000405 	stb	zero,16(sp)
   22db4:	003d8706 	br	223d4 <___vfprintf_internal_r+0xa38>
   22db8:	d9814c17 	ldw	r6,1328(sp)
   22dbc:	30c4703a 	and	r2,r6,r3
   22dc0:	1005003a 	cmpeq	r2,r2,zero
   22dc4:	103cb926 	beq	r2,zero,220ac <___vfprintf_internal_r+0x710>
   22dc8:	d9014117 	ldw	r4,1284(sp)
   22dcc:	94800044 	addi	r18,r18,1
   22dd0:	8c400044 	addi	r17,r17,1
   22dd4:	008001c4 	movi	r2,7
   22dd8:	a9000015 	stw	r4,0(r21)
   22ddc:	a8c00115 	stw	r3,4(r21)
   22de0:	dc800e15 	stw	r18,56(sp)
   22de4:	dc400d15 	stw	r17,52(sp)
   22de8:	147e6616 	blt	r2,r17,22784 <___vfprintf_internal_r+0xde8>
   22dec:	acc00204 	addi	r19,r21,8
   22df0:	003cd706 	br	22150 <___vfprintf_internal_r+0x7b4>
   22df4:	070000f4 	movhi	fp,3
   22df8:	e73ad084 	addi	fp,fp,-5310
   22dfc:	003c4f06 	br	21f3c <___vfprintf_internal_r+0x5a0>
   22e00:	dd000f04 	addi	r20,sp,60
   22e04:	dc801904 	addi	r18,sp,100
   22e08:	8009883a 	mov	r4,r16
   22e0c:	880b883a 	mov	r5,r17
   22e10:	01800284 	movi	r6,10
   22e14:	000f883a 	mov	r7,zero
   22e18:	00286300 	call	28630 <__umoddi3>
   22e1c:	12000c04 	addi	r8,r2,48
   22e20:	94bfffc4 	addi	r18,r18,-1
   22e24:	8009883a 	mov	r4,r16
   22e28:	880b883a 	mov	r5,r17
   22e2c:	01800284 	movi	r6,10
   22e30:	000f883a 	mov	r7,zero
   22e34:	92000005 	stb	r8,0(r18)
   22e38:	00280540 	call	28054 <__udivdi3>
   22e3c:	1009883a 	mov	r4,r2
   22e40:	1021883a 	mov	r16,r2
   22e44:	18800068 	cmpgeui	r2,r3,1
   22e48:	1823883a 	mov	r17,r3
   22e4c:	103fee1e 	bne	r2,zero,22e08 <___vfprintf_internal_r+0x146c>
   22e50:	1800021e 	bne	r3,zero,22e5c <___vfprintf_internal_r+0x14c0>
   22e54:	00800244 	movi	r2,9
   22e58:	113feb36 	bltu	r2,r4,22e08 <___vfprintf_internal_r+0x146c>
   22e5c:	94bfffc4 	addi	r18,r18,-1
   22e60:	dc814115 	stw	r18,1284(sp)
   22e64:	003fc006 	br	22d68 <___vfprintf_internal_r+0x13cc>
   22e68:	d9014c17 	ldw	r4,1328(sp)
   22e6c:	2080004c 	andi	r2,r4,1
   22e70:	10009a1e 	bne	r2,zero,230dc <___vfprintf_internal_r+0x1740>
   22e74:	d9401904 	addi	r5,sp,100
   22e78:	dd000f04 	addi	r20,sp,60
   22e7c:	d9414115 	stw	r5,1284(sp)
   22e80:	003d6106 	br	22408 <___vfprintf_internal_r+0xa6c>
   22e84:	d9014f17 	ldw	r4,1340(sp)
   22e88:	b00b883a 	mov	r5,r22
   22e8c:	d9800c04 	addi	r6,sp,48
   22e90:	00219440 	call	21944 <__sprint_r>
   22e94:	103c791e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   22e98:	dc800e17 	ldw	r18,56(sp)
   22e9c:	d8c01904 	addi	r3,sp,100
   22ea0:	003cff06 	br	222a0 <___vfprintf_internal_r+0x904>
   22ea4:	d8c14c17 	ldw	r3,1328(sp)
   22ea8:	1880040c 	andi	r2,r3,16
   22eac:	1000711e 	bne	r2,zero,23074 <___vfprintf_internal_r+0x16d8>
   22eb0:	d9014c17 	ldw	r4,1328(sp)
   22eb4:	2080100c 	andi	r2,r4,64
   22eb8:	10006e26 	beq	r2,zero,23074 <___vfprintf_internal_r+0x16d8>
   22ebc:	3c00000b 	ldhu	r16,0(r7)
   22ec0:	0023883a 	mov	r17,zero
   22ec4:	39c00104 	addi	r7,r7,4
   22ec8:	d9c14015 	stw	r7,1280(sp)
   22ecc:	003f0006 	br	22ad0 <___vfprintf_internal_r+0x1134>
   22ed0:	dc400d17 	ldw	r17,52(sp)
   22ed4:	070000f4 	movhi	fp,3
   22ed8:	e73ad084 	addi	fp,fp,-5310
   22edc:	9425883a 	add	r18,r18,r16
   22ee0:	8c400044 	addi	r17,r17,1
   22ee4:	008001c4 	movi	r2,7
   22ee8:	1f000015 	stw	fp,0(r3)
   22eec:	1c000115 	stw	r16,4(r3)
   22ef0:	dc800e15 	stw	r18,56(sp)
   22ef4:	dc400d15 	stw	r17,52(sp)
   22ef8:	147d7616 	blt	r2,r17,224d4 <___vfprintf_internal_r+0xb38>
   22efc:	18c00204 	addi	r3,r3,8
   22f00:	003d7b06 	br	224f0 <___vfprintf_internal_r+0xb54>
   22f04:	dc800e17 	ldw	r18,56(sp)
   22f08:	dc400d17 	ldw	r17,52(sp)
   22f0c:	070000f4 	movhi	fp,3
   22f10:	e73ad484 	addi	fp,fp,-5294
   22f14:	003bc006 	br	21e18 <___vfprintf_internal_r+0x47c>
   22f18:	d9014f17 	ldw	r4,1340(sp)
   22f1c:	b00b883a 	mov	r5,r22
   22f20:	d9800c04 	addi	r6,sp,48
   22f24:	00219440 	call	21944 <__sprint_r>
   22f28:	103c541e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   22f2c:	dc800e17 	ldw	r18,56(sp)
   22f30:	d8c01904 	addi	r3,sp,100
   22f34:	003ce906 	br	222dc <___vfprintf_internal_r+0x940>
   22f38:	3c000017 	ldw	r16,0(r7)
   22f3c:	0009883a 	mov	r4,zero
   22f40:	39c00104 	addi	r7,r7,4
   22f44:	0023883a 	mov	r17,zero
   22f48:	d9c14015 	stw	r7,1280(sp)
   22f4c:	d8000405 	stb	zero,16(sp)
   22f50:	003d2006 	br	223d4 <___vfprintf_internal_r+0xa38>
   22f54:	38800017 	ldw	r2,0(r7)
   22f58:	39c00104 	addi	r7,r7,4
   22f5c:	d9c14015 	stw	r7,1280(sp)
   22f60:	1023d7fa 	srai	r17,r2,31
   22f64:	1021883a 	mov	r16,r2
   22f68:	003d1806 	br	223cc <___vfprintf_internal_r+0xa30>
   22f6c:	3c000017 	ldw	r16,0(r7)
   22f70:	01000044 	movi	r4,1
   22f74:	39c00104 	addi	r7,r7,4
   22f78:	0023883a 	mov	r17,zero
   22f7c:	d9c14015 	stw	r7,1280(sp)
   22f80:	d8000405 	stb	zero,16(sp)
   22f84:	003d1306 	br	223d4 <___vfprintf_internal_r+0xa38>
   22f88:	008000f4 	movhi	r2,3
   22f8c:	10bad004 	addi	r2,r2,-5312
   22f90:	94800044 	addi	r18,r18,1
   22f94:	8c400044 	addi	r17,r17,1
   22f98:	a8800015 	stw	r2,0(r21)
   22f9c:	00c00044 	movi	r3,1
   22fa0:	008001c4 	movi	r2,7
   22fa4:	a8c00115 	stw	r3,4(r21)
   22fa8:	dc800e15 	stw	r18,56(sp)
   22fac:	dc400d15 	stw	r17,52(sp)
   22fb0:	1440ca16 	blt	r2,r17,232dc <___vfprintf_internal_r+0x1940>
   22fb4:	a8c00204 	addi	r3,r21,8
   22fb8:	2000061e 	bne	r4,zero,22fd4 <___vfprintf_internal_r+0x1638>
   22fbc:	d9414717 	ldw	r5,1308(sp)
   22fc0:	2800041e 	bne	r5,zero,22fd4 <___vfprintf_internal_r+0x1638>
   22fc4:	d9814c17 	ldw	r6,1328(sp)
   22fc8:	3080004c 	andi	r2,r6,1
   22fcc:	1005003a 	cmpeq	r2,r2,zero
   22fd0:	103bf01e 	bne	r2,zero,21f94 <___vfprintf_internal_r+0x5f8>
   22fd4:	00800044 	movi	r2,1
   22fd8:	dc400d17 	ldw	r17,52(sp)
   22fdc:	18800115 	stw	r2,4(r3)
   22fe0:	d8814917 	ldw	r2,1316(sp)
   22fe4:	94800044 	addi	r18,r18,1
   22fe8:	8c400044 	addi	r17,r17,1
   22fec:	18800015 	stw	r2,0(r3)
   22ff0:	008001c4 	movi	r2,7
   22ff4:	dc800e15 	stw	r18,56(sp)
   22ff8:	dc400d15 	stw	r17,52(sp)
   22ffc:	1440ca16 	blt	r2,r17,23328 <___vfprintf_internal_r+0x198c>
   23000:	18c00204 	addi	r3,r3,8
   23004:	0121c83a 	sub	r16,zero,r4
   23008:	0400500e 	bge	zero,r16,2314c <___vfprintf_internal_r+0x17b0>
   2300c:	00800404 	movi	r2,16
   23010:	1400800e 	bge	r2,r16,23214 <___vfprintf_internal_r+0x1878>
   23014:	1027883a 	mov	r19,r2
   23018:	070000f4 	movhi	fp,3
   2301c:	e73ad084 	addi	fp,fp,-5310
   23020:	050001c4 	movi	r20,7
   23024:	00000306 	br	23034 <___vfprintf_internal_r+0x1698>
   23028:	18c00204 	addi	r3,r3,8
   2302c:	843ffc04 	addi	r16,r16,-16
   23030:	9c007a0e 	bge	r19,r16,2321c <___vfprintf_internal_r+0x1880>
   23034:	94800404 	addi	r18,r18,16
   23038:	8c400044 	addi	r17,r17,1
   2303c:	1f000015 	stw	fp,0(r3)
   23040:	1cc00115 	stw	r19,4(r3)
   23044:	dc800e15 	stw	r18,56(sp)
   23048:	dc400d15 	stw	r17,52(sp)
   2304c:	a47ff60e 	bge	r20,r17,23028 <___vfprintf_internal_r+0x168c>
   23050:	d9014f17 	ldw	r4,1340(sp)
   23054:	b00b883a 	mov	r5,r22
   23058:	d9800c04 	addi	r6,sp,48
   2305c:	00219440 	call	21944 <__sprint_r>
   23060:	103c061e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   23064:	dc800e17 	ldw	r18,56(sp)
   23068:	dc400d17 	ldw	r17,52(sp)
   2306c:	d8c01904 	addi	r3,sp,100
   23070:	003fee06 	br	2302c <___vfprintf_internal_r+0x1690>
   23074:	3c000017 	ldw	r16,0(r7)
   23078:	0023883a 	mov	r17,zero
   2307c:	39c00104 	addi	r7,r7,4
   23080:	d9c14015 	stw	r7,1280(sp)
   23084:	003e9206 	br	22ad0 <___vfprintf_internal_r+0x1134>
   23088:	d9401904 	addi	r5,sp,100
   2308c:	dd000f04 	addi	r20,sp,60
   23090:	d9414115 	stw	r5,1284(sp)
   23094:	d9814417 	ldw	r6,1296(sp)
   23098:	880a973a 	slli	r5,r17,28
   2309c:	8004d13a 	srli	r2,r16,4
   230a0:	810003cc 	andi	r4,r16,15
   230a4:	3109883a 	add	r4,r6,r4
   230a8:	2884b03a 	or	r2,r5,r2
   230ac:	21400003 	ldbu	r5,0(r4)
   230b0:	d9014117 	ldw	r4,1284(sp)
   230b4:	8806d13a 	srli	r3,r17,4
   230b8:	1021883a 	mov	r16,r2
   230bc:	213fffc4 	addi	r4,r4,-1
   230c0:	d9014115 	stw	r4,1284(sp)
   230c4:	d9814117 	ldw	r6,1284(sp)
   230c8:	10c8b03a 	or	r4,r2,r3
   230cc:	1823883a 	mov	r17,r3
   230d0:	31400005 	stb	r5,0(r6)
   230d4:	203fef1e 	bne	r4,zero,23094 <___vfprintf_internal_r+0x16f8>
   230d8:	003ccb06 	br	22408 <___vfprintf_internal_r+0xa6c>
   230dc:	00800c04 	movi	r2,48
   230e0:	d98018c4 	addi	r6,sp,99
   230e4:	dd000f04 	addi	r20,sp,60
   230e8:	d88018c5 	stb	r2,99(sp)
   230ec:	d9814115 	stw	r6,1284(sp)
   230f0:	003cc506 	br	22408 <___vfprintf_internal_r+0xa6c>
   230f4:	dc400d17 	ldw	r17,52(sp)
   230f8:	070000f4 	movhi	fp,3
   230fc:	e73ad484 	addi	fp,fp,-5294
   23100:	003bc706 	br	22020 <___vfprintf_internal_r+0x684>
   23104:	d9414c17 	ldw	r5,1328(sp)
   23108:	2880040c 	andi	r2,r5,16
   2310c:	10007c26 	beq	r2,zero,23300 <___vfprintf_internal_r+0x1964>
   23110:	38800017 	ldw	r2,0(r7)
   23114:	39c00104 	addi	r7,r7,4
   23118:	d9c14015 	stw	r7,1280(sp)
   2311c:	d9814b17 	ldw	r6,1324(sp)
   23120:	d9c14017 	ldw	r7,1280(sp)
   23124:	11800015 	stw	r6,0(r2)
   23128:	003a7806 	br	21b0c <___vfprintf_internal_r+0x170>
   2312c:	d9014f17 	ldw	r4,1340(sp)
   23130:	b00b883a 	mov	r5,r22
   23134:	d9800c04 	addi	r6,sp,48
   23138:	00219440 	call	21944 <__sprint_r>
   2313c:	103bcf1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   23140:	dc800e17 	ldw	r18,56(sp)
   23144:	dc400d17 	ldw	r17,52(sp)
   23148:	d8c01904 	addi	r3,sp,100
   2314c:	d9014717 	ldw	r4,1308(sp)
   23150:	d9414117 	ldw	r5,1284(sp)
   23154:	8c400044 	addi	r17,r17,1
   23158:	9125883a 	add	r18,r18,r4
   2315c:	008001c4 	movi	r2,7
   23160:	19400015 	stw	r5,0(r3)
   23164:	19000115 	stw	r4,4(r3)
   23168:	dc800e15 	stw	r18,56(sp)
   2316c:	dc400d15 	stw	r17,52(sp)
   23170:	147cee16 	blt	r2,r17,2252c <___vfprintf_internal_r+0xb90>
   23174:	18c00204 	addi	r3,r3,8
   23178:	003b8606 	br	21f94 <___vfprintf_internal_r+0x5f8>
   2317c:	38c00017 	ldw	r3,0(r7)
   23180:	39000204 	addi	r4,r7,8
   23184:	d9014015 	stw	r4,1280(sp)
   23188:	d8c14215 	stw	r3,1288(sp)
   2318c:	39c00117 	ldw	r7,4(r7)
   23190:	d9c14315 	stw	r7,1292(sp)
   23194:	003e2006 	br	22a18 <___vfprintf_internal_r+0x107c>
   23198:	0005883a 	mov	r2,zero
   2319c:	1409c83a 	sub	r4,r2,r16
   231a0:	1105803a 	cmpltu	r2,r2,r4
   231a4:	044bc83a 	sub	r5,zero,r17
   231a8:	2885c83a 	sub	r2,r5,r2
   231ac:	2021883a 	mov	r16,r4
   231b0:	1023883a 	mov	r17,r2
   231b4:	01000044 	movi	r4,1
   231b8:	00800b44 	movi	r2,45
   231bc:	d8800405 	stb	r2,16(sp)
   231c0:	003c8406 	br	223d4 <___vfprintf_internal_r+0xa38>
   231c4:	d9014f17 	ldw	r4,1340(sp)
   231c8:	b00b883a 	mov	r5,r22
   231cc:	d9800c04 	addi	r6,sp,48
   231d0:	00219440 	call	21944 <__sprint_r>
   231d4:	103ba91e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   231d8:	dc800e17 	ldw	r18,56(sp)
   231dc:	dc400d17 	ldw	r17,52(sp)
   231e0:	d9000517 	ldw	r4,20(sp)
   231e4:	d9401904 	addi	r5,sp,100
   231e8:	003da706 	br	22888 <___vfprintf_internal_r+0xeec>
   231ec:	d9014f17 	ldw	r4,1340(sp)
   231f0:	b00b883a 	mov	r5,r22
   231f4:	d9800c04 	addi	r6,sp,48
   231f8:	00219440 	call	21944 <__sprint_r>
   231fc:	103b9f1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   23200:	dc800e17 	ldw	r18,56(sp)
   23204:	dc400d17 	ldw	r17,52(sp)
   23208:	d9000517 	ldw	r4,20(sp)
   2320c:	d8c01904 	addi	r3,sp,100
   23210:	003d9106 	br	22858 <___vfprintf_internal_r+0xebc>
   23214:	070000f4 	movhi	fp,3
   23218:	e73ad084 	addi	fp,fp,-5310
   2321c:	9425883a 	add	r18,r18,r16
   23220:	8c400044 	addi	r17,r17,1
   23224:	008001c4 	movi	r2,7
   23228:	1f000015 	stw	fp,0(r3)
   2322c:	1c000115 	stw	r16,4(r3)
   23230:	dc800e15 	stw	r18,56(sp)
   23234:	dc400d15 	stw	r17,52(sp)
   23238:	147fbc16 	blt	r2,r17,2312c <___vfprintf_internal_r+0x1790>
   2323c:	18c00204 	addi	r3,r3,8
   23240:	003fc206 	br	2314c <___vfprintf_internal_r+0x17b0>
   23244:	d9014f17 	ldw	r4,1340(sp)
   23248:	b00b883a 	mov	r5,r22
   2324c:	d9800c04 	addi	r6,sp,48
   23250:	00219440 	call	21944 <__sprint_r>
   23254:	103b891e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   23258:	dc800e17 	ldw	r18,56(sp)
   2325c:	d9000517 	ldw	r4,20(sp)
   23260:	d8c01904 	addi	r3,sp,100
   23264:	003d0206 	br	22670 <___vfprintf_internal_r+0xcd4>
   23268:	070000f4 	movhi	fp,3
   2326c:	e73ad084 	addi	fp,fp,-5310
   23270:	003be406 	br	22204 <___vfprintf_internal_r+0x868>
   23274:	008000f4 	movhi	r2,3
   23278:	10babf04 	addi	r2,r2,-5380
   2327c:	d8814115 	stw	r2,1284(sp)
   23280:	003df506 	br	22a58 <___vfprintf_internal_r+0x10bc>
   23284:	d9014217 	ldw	r4,1288(sp)
   23288:	d9414317 	ldw	r5,1292(sp)
   2328c:	0027d900 	call	27d90 <__isnand>
   23290:	10003926 	beq	r2,zero,23378 <___vfprintf_internal_r+0x19dc>
   23294:	d9414d17 	ldw	r5,1332(sp)
   23298:	008011c4 	movi	r2,71
   2329c:	1140ce16 	blt	r2,r5,235d8 <___vfprintf_internal_r+0x1c3c>
   232a0:	018000f4 	movhi	r6,3
   232a4:	31bac004 	addi	r6,r6,-5376
   232a8:	d9814115 	stw	r6,1284(sp)
   232ac:	003dea06 	br	22a58 <___vfprintf_internal_r+0x10bc>
   232b0:	d9014c17 	ldw	r4,1328(sp)
   232b4:	bdc00044 	addi	r23,r23,1
   232b8:	b8c00007 	ldb	r3,0(r23)
   232bc:	21000814 	ori	r4,r4,32
   232c0:	d9014c15 	stw	r4,1328(sp)
   232c4:	003a3406 	br	21b98 <___vfprintf_internal_r+0x1fc>
   232c8:	dcc14515 	stw	r19,1300(sp)
   232cc:	98011016 	blt	r19,zero,23710 <___vfprintf_internal_r+0x1d74>
   232d0:	980f883a 	mov	r7,r19
   232d4:	d8014615 	stw	zero,1304(sp)
   232d8:	003c5206 	br	22424 <___vfprintf_internal_r+0xa88>
   232dc:	d9014f17 	ldw	r4,1340(sp)
   232e0:	b00b883a 	mov	r5,r22
   232e4:	d9800c04 	addi	r6,sp,48
   232e8:	00219440 	call	21944 <__sprint_r>
   232ec:	103b631e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   232f0:	dc800e17 	ldw	r18,56(sp)
   232f4:	d9000517 	ldw	r4,20(sp)
   232f8:	d8c01904 	addi	r3,sp,100
   232fc:	003f2e06 	br	22fb8 <___vfprintf_internal_r+0x161c>
   23300:	d8c14c17 	ldw	r3,1328(sp)
   23304:	1880100c 	andi	r2,r3,64
   23308:	1000a026 	beq	r2,zero,2358c <___vfprintf_internal_r+0x1bf0>
   2330c:	38800017 	ldw	r2,0(r7)
   23310:	39c00104 	addi	r7,r7,4
   23314:	d9c14015 	stw	r7,1280(sp)
   23318:	d9014b17 	ldw	r4,1324(sp)
   2331c:	d9c14017 	ldw	r7,1280(sp)
   23320:	1100000d 	sth	r4,0(r2)
   23324:	0039f906 	br	21b0c <___vfprintf_internal_r+0x170>
   23328:	d9014f17 	ldw	r4,1340(sp)
   2332c:	b00b883a 	mov	r5,r22
   23330:	d9800c04 	addi	r6,sp,48
   23334:	00219440 	call	21944 <__sprint_r>
   23338:	103b501e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   2333c:	dc800e17 	ldw	r18,56(sp)
   23340:	dc400d17 	ldw	r17,52(sp)
   23344:	d9000517 	ldw	r4,20(sp)
   23348:	d8c01904 	addi	r3,sp,100
   2334c:	003f2d06 	br	23004 <___vfprintf_internal_r+0x1668>
   23350:	00800184 	movi	r2,6
   23354:	14c09a36 	bltu	r2,r19,235c0 <___vfprintf_internal_r+0x1c24>
   23358:	dcc14515 	stw	r19,1300(sp)
   2335c:	9800010e 	bge	r19,zero,23364 <___vfprintf_internal_r+0x19c8>
   23360:	d8014515 	stw	zero,1300(sp)
   23364:	008000f4 	movhi	r2,3
   23368:	10bac204 	addi	r2,r2,-5368
   2336c:	980f883a 	mov	r7,r19
   23370:	d8814115 	stw	r2,1284(sp)
   23374:	003a7806 	br	21d58 <___vfprintf_internal_r+0x3bc>
   23378:	00bfffc4 	movi	r2,-1
   2337c:	9880e226 	beq	r19,r2,23708 <___vfprintf_internal_r+0x1d6c>
   23380:	d9414d17 	ldw	r5,1332(sp)
   23384:	008019c4 	movi	r2,103
   23388:	2880dc26 	beq	r5,r2,236fc <___vfprintf_internal_r+0x1d60>
   2338c:	008011c4 	movi	r2,71
   23390:	2880da26 	beq	r5,r2,236fc <___vfprintf_internal_r+0x1d60>
   23394:	d9414c17 	ldw	r5,1328(sp)
   23398:	d9014317 	ldw	r4,1292(sp)
   2339c:	d9814217 	ldw	r6,1288(sp)
   233a0:	29404014 	ori	r5,r5,256
   233a4:	d9414c15 	stw	r5,1328(sp)
   233a8:	2000cc16 	blt	r4,zero,236dc <___vfprintf_internal_r+0x1d40>
   233ac:	3021883a 	mov	r16,r6
   233b0:	2023883a 	mov	r17,r4
   233b4:	0039883a 	mov	fp,zero
   233b8:	d9414d17 	ldw	r5,1332(sp)
   233bc:	00801984 	movi	r2,102
   233c0:	2880b726 	beq	r5,r2,236a0 <___vfprintf_internal_r+0x1d04>
   233c4:	00801184 	movi	r2,70
   233c8:	2880b526 	beq	r5,r2,236a0 <___vfprintf_internal_r+0x1d04>
   233cc:	00801944 	movi	r2,101
   233d0:	2880c826 	beq	r5,r2,236f4 <___vfprintf_internal_r+0x1d58>
   233d4:	00801144 	movi	r2,69
   233d8:	2880c626 	beq	r5,r2,236f4 <___vfprintf_internal_r+0x1d58>
   233dc:	9829883a 	mov	r20,r19
   233e0:	d9014f17 	ldw	r4,1340(sp)
   233e4:	d8800504 	addi	r2,sp,20
   233e8:	880d883a 	mov	r6,r17
   233ec:	d8800115 	stw	r2,4(sp)
   233f0:	d8c00604 	addi	r3,sp,24
   233f4:	d8800704 	addi	r2,sp,28
   233f8:	800b883a 	mov	r5,r16
   233fc:	01c00084 	movi	r7,2
   23400:	d8c00215 	stw	r3,8(sp)
   23404:	d8800315 	stw	r2,12(sp)
   23408:	dd000015 	stw	r20,0(sp)
   2340c:	0023ca80 	call	23ca8 <_dtoa_r>
   23410:	d9814d17 	ldw	r6,1332(sp)
   23414:	d8814115 	stw	r2,1284(sp)
   23418:	008019c4 	movi	r2,103
   2341c:	30809526 	beq	r6,r2,23674 <___vfprintf_internal_r+0x1cd8>
   23420:	d8c14d17 	ldw	r3,1332(sp)
   23424:	008011c4 	movi	r2,71
   23428:	18809226 	beq	r3,r2,23674 <___vfprintf_internal_r+0x1cd8>
   2342c:	d9414117 	ldw	r5,1284(sp)
   23430:	d9814d17 	ldw	r6,1332(sp)
   23434:	00801984 	movi	r2,102
   23438:	2d25883a 	add	r18,r5,r20
   2343c:	30808626 	beq	r6,r2,23658 <___vfprintf_internal_r+0x1cbc>
   23440:	00801184 	movi	r2,70
   23444:	30808426 	beq	r6,r2,23658 <___vfprintf_internal_r+0x1cbc>
   23448:	000d883a 	mov	r6,zero
   2344c:	000f883a 	mov	r7,zero
   23450:	880b883a 	mov	r5,r17
   23454:	8009883a 	mov	r4,r16
   23458:	00297000 	call	29700 <__eqdf2>
   2345c:	1000751e 	bne	r2,zero,23634 <___vfprintf_internal_r+0x1c98>
   23460:	9005883a 	mov	r2,r18
   23464:	dc800715 	stw	r18,28(sp)
   23468:	d9014117 	ldw	r4,1284(sp)
   2346c:	d9414d17 	ldw	r5,1332(sp)
   23470:	00c019c4 	movi	r3,103
   23474:	1125c83a 	sub	r18,r2,r4
   23478:	28c06826 	beq	r5,r3,2361c <___vfprintf_internal_r+0x1c80>
   2347c:	008011c4 	movi	r2,71
   23480:	28806626 	beq	r5,r2,2361c <___vfprintf_internal_r+0x1c80>
   23484:	d9000517 	ldw	r4,20(sp)
   23488:	d8c14d17 	ldw	r3,1332(sp)
   2348c:	00801944 	movi	r2,101
   23490:	10c05516 	blt	r2,r3,235e8 <___vfprintf_internal_r+0x1c4c>
   23494:	213fffc4 	addi	r4,r4,-1
   23498:	d9000515 	stw	r4,20(sp)
   2349c:	d8c00805 	stb	r3,32(sp)
   234a0:	2021883a 	mov	r16,r4
   234a4:	2000c116 	blt	r4,zero,237ac <___vfprintf_internal_r+0x1e10>
   234a8:	00800ac4 	movi	r2,43
   234ac:	d8800845 	stb	r2,33(sp)
   234b0:	00800244 	movi	r2,9
   234b4:	1400af0e 	bge	r2,r16,23774 <___vfprintf_internal_r+0x1dd8>
   234b8:	1027883a 	mov	r19,r2
   234bc:	dc400b84 	addi	r17,sp,46
   234c0:	8009883a 	mov	r4,r16
   234c4:	01400284 	movi	r5,10
   234c8:	0029de80 	call	29de8 <__modsi3>
   234cc:	10800c04 	addi	r2,r2,48
   234d0:	8c7fffc4 	addi	r17,r17,-1
   234d4:	8009883a 	mov	r4,r16
   234d8:	01400284 	movi	r5,10
   234dc:	88800005 	stb	r2,0(r17)
   234e0:	0029d880 	call	29d88 <__divsi3>
   234e4:	1021883a 	mov	r16,r2
   234e8:	98bff516 	blt	r19,r2,234c0 <___vfprintf_internal_r+0x1b24>
   234ec:	10c00c04 	addi	r3,r2,48
   234f0:	d88009c4 	addi	r2,sp,39
   234f4:	108001c4 	addi	r2,r2,7
   234f8:	897fffc4 	addi	r5,r17,-1
   234fc:	88ffffc5 	stb	r3,-1(r17)
   23500:	2880a72e 	bgeu	r5,r2,237a0 <___vfprintf_internal_r+0x1e04>
   23504:	1009883a 	mov	r4,r2
   23508:	d9800804 	addi	r6,sp,32
   2350c:	d8c00884 	addi	r3,sp,34
   23510:	28800003 	ldbu	r2,0(r5)
   23514:	29400044 	addi	r5,r5,1
   23518:	18800005 	stb	r2,0(r3)
   2351c:	18c00044 	addi	r3,r3,1
   23520:	293ffb36 	bltu	r5,r4,23510 <___vfprintf_internal_r+0x1b74>
   23524:	1987c83a 	sub	r3,r3,r6
   23528:	00800044 	movi	r2,1
   2352c:	d8c14815 	stw	r3,1312(sp)
   23530:	90cf883a 	add	r7,r18,r3
   23534:	1480960e 	bge	r2,r18,23790 <___vfprintf_internal_r+0x1df4>
   23538:	39c00044 	addi	r7,r7,1
   2353c:	d9c14515 	stw	r7,1300(sp)
   23540:	38003416 	blt	r7,zero,23614 <___vfprintf_internal_r+0x1c78>
   23544:	e0803fcc 	andi	r2,fp,255
   23548:	1080201c 	xori	r2,r2,128
   2354c:	10bfe004 	addi	r2,r2,-128
   23550:	10004e26 	beq	r2,zero,2368c <___vfprintf_internal_r+0x1cf0>
   23554:	00800b44 	movi	r2,45
   23558:	dc814715 	stw	r18,1308(sp)
   2355c:	d8014615 	stw	zero,1304(sp)
   23560:	d8800405 	stb	r2,16(sp)
   23564:	003bb106 	br	2242c <___vfprintf_internal_r+0xa90>
   23568:	00800b44 	movi	r2,45
   2356c:	d8800405 	stb	r2,16(sp)
   23570:	003d3306 	br	22a40 <___vfprintf_internal_r+0x10a4>
   23574:	d9014f17 	ldw	r4,1340(sp)
   23578:	b00b883a 	mov	r5,r22
   2357c:	d9800c04 	addi	r6,sp,48
   23580:	00219440 	call	21944 <__sprint_r>
   23584:	103abd1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x6e0>
   23588:	003abb06 	br	22078 <___vfprintf_internal_r+0x6dc>
   2358c:	38800017 	ldw	r2,0(r7)
   23590:	39c00104 	addi	r7,r7,4
   23594:	d9c14015 	stw	r7,1280(sp)
   23598:	d9414b17 	ldw	r5,1324(sp)
   2359c:	d9c14017 	ldw	r7,1280(sp)
   235a0:	11400015 	stw	r5,0(r2)
   235a4:	00395906 	br	21b0c <___vfprintf_internal_r+0x170>
   235a8:	980f883a 	mov	r7,r19
   235ac:	dcc14515 	stw	r19,1300(sp)
   235b0:	d8014615 	stw	zero,1304(sp)
   235b4:	003b9b06 	br	22424 <___vfprintf_internal_r+0xa88>
   235b8:	0027883a 	mov	r19,zero
   235bc:	00397806 	br	21ba0 <___vfprintf_internal_r+0x204>
   235c0:	00c000f4 	movhi	r3,3
   235c4:	18fac204 	addi	r3,r3,-5368
   235c8:	100f883a 	mov	r7,r2
   235cc:	d8814515 	stw	r2,1300(sp)
   235d0:	d8c14115 	stw	r3,1284(sp)
   235d4:	0039e006 	br	21d58 <___vfprintf_internal_r+0x3bc>
   235d8:	008000f4 	movhi	r2,3
   235dc:	10bac104 	addi	r2,r2,-5372
   235e0:	d8814115 	stw	r2,1284(sp)
   235e4:	003d1c06 	br	22a58 <___vfprintf_internal_r+0x10bc>
   235e8:	d9414d17 	ldw	r5,1332(sp)
   235ec:	00801984 	movi	r2,102
   235f0:	28804926 	beq	r5,r2,23718 <___vfprintf_internal_r+0x1d7c>
   235f4:	200f883a 	mov	r7,r4
   235f8:	24805716 	blt	r4,r18,23758 <___vfprintf_internal_r+0x1dbc>
   235fc:	d9414c17 	ldw	r5,1328(sp)
   23600:	2880004c 	andi	r2,r5,1
   23604:	10000126 	beq	r2,zero,2360c <___vfprintf_internal_r+0x1c70>
   23608:	21c00044 	addi	r7,r4,1
   2360c:	d9c14515 	stw	r7,1300(sp)
   23610:	383fcc0e 	bge	r7,zero,23544 <___vfprintf_internal_r+0x1ba8>
   23614:	d8014515 	stw	zero,1300(sp)
   23618:	003fca06 	br	23544 <___vfprintf_internal_r+0x1ba8>
   2361c:	d9000517 	ldw	r4,20(sp)
   23620:	00bfff04 	movi	r2,-4
   23624:	1100480e 	bge	r2,r4,23748 <___vfprintf_internal_r+0x1dac>
   23628:	99004716 	blt	r19,r4,23748 <___vfprintf_internal_r+0x1dac>
   2362c:	d8c14d15 	stw	r3,1332(sp)
   23630:	003ff006 	br	235f4 <___vfprintf_internal_r+0x1c58>
   23634:	d8800717 	ldw	r2,28(sp)
   23638:	14bf8b2e 	bgeu	r2,r18,23468 <___vfprintf_internal_r+0x1acc>
   2363c:	9007883a 	mov	r3,r18
   23640:	01000c04 	movi	r4,48
   23644:	11000005 	stb	r4,0(r2)
   23648:	10800044 	addi	r2,r2,1
   2364c:	d8800715 	stw	r2,28(sp)
   23650:	18bffc1e 	bne	r3,r2,23644 <___vfprintf_internal_r+0x1ca8>
   23654:	003f8406 	br	23468 <___vfprintf_internal_r+0x1acc>
   23658:	d8814117 	ldw	r2,1284(sp)
   2365c:	10c00007 	ldb	r3,0(r2)
   23660:	00800c04 	movi	r2,48
   23664:	18805b26 	beq	r3,r2,237d4 <___vfprintf_internal_r+0x1e38>
   23668:	d9000517 	ldw	r4,20(sp)
   2366c:	9125883a 	add	r18,r18,r4
   23670:	003f7506 	br	23448 <___vfprintf_internal_r+0x1aac>
   23674:	d9014c17 	ldw	r4,1328(sp)
   23678:	2080004c 	andi	r2,r4,1
   2367c:	1005003a 	cmpeq	r2,r2,zero
   23680:	103f6a26 	beq	r2,zero,2342c <___vfprintf_internal_r+0x1a90>
   23684:	d8800717 	ldw	r2,28(sp)
   23688:	003f7706 	br	23468 <___vfprintf_internal_r+0x1acc>
   2368c:	d9c14515 	stw	r7,1300(sp)
   23690:	38004d16 	blt	r7,zero,237c8 <___vfprintf_internal_r+0x1e2c>
   23694:	dc814715 	stw	r18,1308(sp)
   23698:	d8014615 	stw	zero,1304(sp)
   2369c:	003b6106 	br	22424 <___vfprintf_internal_r+0xa88>
   236a0:	d9014f17 	ldw	r4,1340(sp)
   236a4:	d8800504 	addi	r2,sp,20
   236a8:	d8800115 	stw	r2,4(sp)
   236ac:	d8c00604 	addi	r3,sp,24
   236b0:	d8800704 	addi	r2,sp,28
   236b4:	800b883a 	mov	r5,r16
   236b8:	880d883a 	mov	r6,r17
   236bc:	01c000c4 	movi	r7,3
   236c0:	d8c00215 	stw	r3,8(sp)
   236c4:	d8800315 	stw	r2,12(sp)
   236c8:	dcc00015 	stw	r19,0(sp)
   236cc:	9829883a 	mov	r20,r19
   236d0:	0023ca80 	call	23ca8 <_dtoa_r>
   236d4:	d8814115 	stw	r2,1284(sp)
   236d8:	003f5106 	br	23420 <___vfprintf_internal_r+0x1a84>
   236dc:	d8c14217 	ldw	r3,1288(sp)
   236e0:	d9014317 	ldw	r4,1292(sp)
   236e4:	07000b44 	movi	fp,45
   236e8:	1821883a 	mov	r16,r3
   236ec:	2460003c 	xorhi	r17,r4,32768
   236f0:	003f3106 	br	233b8 <___vfprintf_internal_r+0x1a1c>
   236f4:	9d000044 	addi	r20,r19,1
   236f8:	003f3906 	br	233e0 <___vfprintf_internal_r+0x1a44>
   236fc:	983f251e 	bne	r19,zero,23394 <___vfprintf_internal_r+0x19f8>
   23700:	04c00044 	movi	r19,1
   23704:	003f2306 	br	23394 <___vfprintf_internal_r+0x19f8>
   23708:	04c00184 	movi	r19,6
   2370c:	003f2106 	br	23394 <___vfprintf_internal_r+0x19f8>
   23710:	d8014515 	stw	zero,1300(sp)
   23714:	003eee06 	br	232d0 <___vfprintf_internal_r+0x1934>
   23718:	200f883a 	mov	r7,r4
   2371c:	0100370e 	bge	zero,r4,237fc <___vfprintf_internal_r+0x1e60>
   23720:	9800031e 	bne	r19,zero,23730 <___vfprintf_internal_r+0x1d94>
   23724:	d9814c17 	ldw	r6,1328(sp)
   23728:	3080004c 	andi	r2,r6,1
   2372c:	103fb726 	beq	r2,zero,2360c <___vfprintf_internal_r+0x1c70>
   23730:	20800044 	addi	r2,r4,1
   23734:	98a7883a 	add	r19,r19,r2
   23738:	dcc14515 	stw	r19,1300(sp)
   2373c:	980f883a 	mov	r7,r19
   23740:	983f800e 	bge	r19,zero,23544 <___vfprintf_internal_r+0x1ba8>
   23744:	003fb306 	br	23614 <___vfprintf_internal_r+0x1c78>
   23748:	d9814d17 	ldw	r6,1332(sp)
   2374c:	31bfff84 	addi	r6,r6,-2
   23750:	d9814d15 	stw	r6,1332(sp)
   23754:	003f4c06 	br	23488 <___vfprintf_internal_r+0x1aec>
   23758:	0100180e 	bge	zero,r4,237bc <___vfprintf_internal_r+0x1e20>
   2375c:	00800044 	movi	r2,1
   23760:	1485883a 	add	r2,r2,r18
   23764:	d8814515 	stw	r2,1300(sp)
   23768:	100f883a 	mov	r7,r2
   2376c:	103f750e 	bge	r2,zero,23544 <___vfprintf_internal_r+0x1ba8>
   23770:	003fa806 	br	23614 <___vfprintf_internal_r+0x1c78>
   23774:	80c00c04 	addi	r3,r16,48
   23778:	00800c04 	movi	r2,48
   2377c:	d8c008c5 	stb	r3,35(sp)
   23780:	d9800804 	addi	r6,sp,32
   23784:	d8c00904 	addi	r3,sp,36
   23788:	d8800885 	stb	r2,34(sp)
   2378c:	003f6506 	br	23524 <___vfprintf_internal_r+0x1b88>
   23790:	d9014c17 	ldw	r4,1328(sp)
   23794:	2084703a 	and	r2,r4,r2
   23798:	103f9c26 	beq	r2,zero,2360c <___vfprintf_internal_r+0x1c70>
   2379c:	003f6606 	br	23538 <___vfprintf_internal_r+0x1b9c>
   237a0:	d9800804 	addi	r6,sp,32
   237a4:	d8c00884 	addi	r3,sp,34
   237a8:	003f5e06 	br	23524 <___vfprintf_internal_r+0x1b88>
   237ac:	00800b44 	movi	r2,45
   237b0:	0121c83a 	sub	r16,zero,r4
   237b4:	d8800845 	stb	r2,33(sp)
   237b8:	003f3d06 	br	234b0 <___vfprintf_internal_r+0x1b14>
   237bc:	00800084 	movi	r2,2
   237c0:	1105c83a 	sub	r2,r2,r4
   237c4:	003fe606 	br	23760 <___vfprintf_internal_r+0x1dc4>
   237c8:	d8014515 	stw	zero,1300(sp)
   237cc:	dc814715 	stw	r18,1308(sp)
   237d0:	003fb106 	br	23698 <___vfprintf_internal_r+0x1cfc>
   237d4:	000d883a 	mov	r6,zero
   237d8:	000f883a 	mov	r7,zero
   237dc:	8009883a 	mov	r4,r16
   237e0:	880b883a 	mov	r5,r17
   237e4:	00297880 	call	29788 <__nedf2>
   237e8:	103f9f26 	beq	r2,zero,23668 <___vfprintf_internal_r+0x1ccc>
   237ec:	00800044 	movi	r2,1
   237f0:	1509c83a 	sub	r4,r2,r20
   237f4:	d9000515 	stw	r4,20(sp)
   237f8:	003f9b06 	br	23668 <___vfprintf_internal_r+0x1ccc>
   237fc:	98000d1e 	bne	r19,zero,23834 <___vfprintf_internal_r+0x1e98>
   23800:	d8c14c17 	ldw	r3,1328(sp)
   23804:	1880004c 	andi	r2,r3,1
   23808:	10000a1e 	bne	r2,zero,23834 <___vfprintf_internal_r+0x1e98>
   2380c:	01000044 	movi	r4,1
   23810:	200f883a 	mov	r7,r4
   23814:	d9014515 	stw	r4,1300(sp)
   23818:	003f4a06 	br	23544 <___vfprintf_internal_r+0x1ba8>
   2381c:	3cc00017 	ldw	r19,0(r7)
   23820:	39c00104 	addi	r7,r7,4
   23824:	983d0e0e 	bge	r19,zero,22c60 <___vfprintf_internal_r+0x12c4>
   23828:	b8c00007 	ldb	r3,0(r23)
   2382c:	04ffffc4 	movi	r19,-1
   23830:	0038d906 	br	21b98 <___vfprintf_internal_r+0x1fc>
   23834:	9cc00084 	addi	r19,r19,2
   23838:	dcc14515 	stw	r19,1300(sp)
   2383c:	980f883a 	mov	r7,r19
   23840:	983f400e 	bge	r19,zero,23544 <___vfprintf_internal_r+0x1ba8>
   23844:	003f7306 	br	23614 <___vfprintf_internal_r+0x1c78>

00023848 <__vfprintf_internal>:
   23848:	008000f4 	movhi	r2,3
   2384c:	10832d04 	addi	r2,r2,3252
   23850:	2013883a 	mov	r9,r4
   23854:	11000017 	ldw	r4,0(r2)
   23858:	2805883a 	mov	r2,r5
   2385c:	300f883a 	mov	r7,r6
   23860:	480b883a 	mov	r5,r9
   23864:	100d883a 	mov	r6,r2
   23868:	002199c1 	jmpi	2199c <___vfprintf_internal_r>

0002386c <_write_r>:
   2386c:	defffd04 	addi	sp,sp,-12
   23870:	dc000015 	stw	r16,0(sp)
   23874:	040000f4 	movhi	r16,3
   23878:	840a5104 	addi	r16,r16,10564
   2387c:	dc400115 	stw	r17,4(sp)
   23880:	80000015 	stw	zero,0(r16)
   23884:	2023883a 	mov	r17,r4
   23888:	2809883a 	mov	r4,r5
   2388c:	300b883a 	mov	r5,r6
   23890:	380d883a 	mov	r6,r7
   23894:	dfc00215 	stw	ra,8(sp)
   23898:	002b0a80 	call	2b0a8 <write>
   2389c:	1007883a 	mov	r3,r2
   238a0:	00bfffc4 	movi	r2,-1
   238a4:	18800626 	beq	r3,r2,238c0 <_write_r+0x54>
   238a8:	1805883a 	mov	r2,r3
   238ac:	dfc00217 	ldw	ra,8(sp)
   238b0:	dc400117 	ldw	r17,4(sp)
   238b4:	dc000017 	ldw	r16,0(sp)
   238b8:	dec00304 	addi	sp,sp,12
   238bc:	f800283a 	ret
   238c0:	80800017 	ldw	r2,0(r16)
   238c4:	103ff826 	beq	r2,zero,238a8 <_write_r+0x3c>
   238c8:	88800015 	stw	r2,0(r17)
   238cc:	1805883a 	mov	r2,r3
   238d0:	dfc00217 	ldw	ra,8(sp)
   238d4:	dc400117 	ldw	r17,4(sp)
   238d8:	dc000017 	ldw	r16,0(sp)
   238dc:	dec00304 	addi	sp,sp,12
   238e0:	f800283a 	ret

000238e4 <__swsetup_r>:
   238e4:	008000f4 	movhi	r2,3
   238e8:	10832d04 	addi	r2,r2,3252
   238ec:	10c00017 	ldw	r3,0(r2)
   238f0:	defffd04 	addi	sp,sp,-12
   238f4:	dc400115 	stw	r17,4(sp)
   238f8:	dc000015 	stw	r16,0(sp)
   238fc:	dfc00215 	stw	ra,8(sp)
   23900:	2023883a 	mov	r17,r4
   23904:	2821883a 	mov	r16,r5
   23908:	18000226 	beq	r3,zero,23914 <__swsetup_r+0x30>
   2390c:	18800e17 	ldw	r2,56(r3)
   23910:	10001f26 	beq	r2,zero,23990 <__swsetup_r+0xac>
   23914:	8100030b 	ldhu	r4,12(r16)
   23918:	2080020c 	andi	r2,r4,8
   2391c:	10002826 	beq	r2,zero,239c0 <__swsetup_r+0xdc>
   23920:	81400417 	ldw	r5,16(r16)
   23924:	28001d26 	beq	r5,zero,2399c <__swsetup_r+0xb8>
   23928:	2080004c 	andi	r2,r4,1
   2392c:	1005003a 	cmpeq	r2,r2,zero
   23930:	10000b26 	beq	r2,zero,23960 <__swsetup_r+0x7c>
   23934:	2080008c 	andi	r2,r4,2
   23938:	10001226 	beq	r2,zero,23984 <__swsetup_r+0xa0>
   2393c:	0005883a 	mov	r2,zero
   23940:	80800215 	stw	r2,8(r16)
   23944:	28000b26 	beq	r5,zero,23974 <__swsetup_r+0x90>
   23948:	0005883a 	mov	r2,zero
   2394c:	dfc00217 	ldw	ra,8(sp)
   23950:	dc400117 	ldw	r17,4(sp)
   23954:	dc000017 	ldw	r16,0(sp)
   23958:	dec00304 	addi	sp,sp,12
   2395c:	f800283a 	ret
   23960:	80800517 	ldw	r2,20(r16)
   23964:	80000215 	stw	zero,8(r16)
   23968:	0085c83a 	sub	r2,zero,r2
   2396c:	80800615 	stw	r2,24(r16)
   23970:	283ff51e 	bne	r5,zero,23948 <__swsetup_r+0x64>
   23974:	2080200c 	andi	r2,r4,128
   23978:	103ff326 	beq	r2,zero,23948 <__swsetup_r+0x64>
   2397c:	00bfffc4 	movi	r2,-1
   23980:	003ff206 	br	2394c <__swsetup_r+0x68>
   23984:	80800517 	ldw	r2,20(r16)
   23988:	80800215 	stw	r2,8(r16)
   2398c:	003fed06 	br	23944 <__swsetup_r+0x60>
   23990:	1809883a 	mov	r4,r3
   23994:	00254f40 	call	254f4 <__sinit>
   23998:	003fde06 	br	23914 <__swsetup_r+0x30>
   2399c:	20c0a00c 	andi	r3,r4,640
   239a0:	00808004 	movi	r2,512
   239a4:	18bfe026 	beq	r3,r2,23928 <__swsetup_r+0x44>
   239a8:	8809883a 	mov	r4,r17
   239ac:	800b883a 	mov	r5,r16
   239b0:	0020abc0 	call	20abc <__smakebuf_r>
   239b4:	8100030b 	ldhu	r4,12(r16)
   239b8:	81400417 	ldw	r5,16(r16)
   239bc:	003fda06 	br	23928 <__swsetup_r+0x44>
   239c0:	2080040c 	andi	r2,r4,16
   239c4:	103fed26 	beq	r2,zero,2397c <__swsetup_r+0x98>
   239c8:	2080010c 	andi	r2,r4,4
   239cc:	10001226 	beq	r2,zero,23a18 <__swsetup_r+0x134>
   239d0:	81400c17 	ldw	r5,48(r16)
   239d4:	28000526 	beq	r5,zero,239ec <__swsetup_r+0x108>
   239d8:	80801004 	addi	r2,r16,64
   239dc:	28800226 	beq	r5,r2,239e8 <__swsetup_r+0x104>
   239e0:	8809883a 	mov	r4,r17
   239e4:	00259180 	call	25918 <_free_r>
   239e8:	80000c15 	stw	zero,48(r16)
   239ec:	8080030b 	ldhu	r2,12(r16)
   239f0:	81400417 	ldw	r5,16(r16)
   239f4:	80000115 	stw	zero,4(r16)
   239f8:	10bff6cc 	andi	r2,r2,65499
   239fc:	8080030d 	sth	r2,12(r16)
   23a00:	81400015 	stw	r5,0(r16)
   23a04:	8080030b 	ldhu	r2,12(r16)
   23a08:	10800214 	ori	r2,r2,8
   23a0c:	113fffcc 	andi	r4,r2,65535
   23a10:	8080030d 	sth	r2,12(r16)
   23a14:	003fc306 	br	23924 <__swsetup_r+0x40>
   23a18:	81400417 	ldw	r5,16(r16)
   23a1c:	003ff906 	br	23a04 <__swsetup_r+0x120>

00023a20 <_close_r>:
   23a20:	defffd04 	addi	sp,sp,-12
   23a24:	dc000015 	stw	r16,0(sp)
   23a28:	040000f4 	movhi	r16,3
   23a2c:	840a5104 	addi	r16,r16,10564
   23a30:	dc400115 	stw	r17,4(sp)
   23a34:	80000015 	stw	zero,0(r16)
   23a38:	2023883a 	mov	r17,r4
   23a3c:	2809883a 	mov	r4,r5
   23a40:	dfc00215 	stw	ra,8(sp)
   23a44:	002a4840 	call	2a484 <close>
   23a48:	1007883a 	mov	r3,r2
   23a4c:	00bfffc4 	movi	r2,-1
   23a50:	18800626 	beq	r3,r2,23a6c <_close_r+0x4c>
   23a54:	1805883a 	mov	r2,r3
   23a58:	dfc00217 	ldw	ra,8(sp)
   23a5c:	dc400117 	ldw	r17,4(sp)
   23a60:	dc000017 	ldw	r16,0(sp)
   23a64:	dec00304 	addi	sp,sp,12
   23a68:	f800283a 	ret
   23a6c:	80800017 	ldw	r2,0(r16)
   23a70:	103ff826 	beq	r2,zero,23a54 <_close_r+0x34>
   23a74:	88800015 	stw	r2,0(r17)
   23a78:	1805883a 	mov	r2,r3
   23a7c:	dfc00217 	ldw	ra,8(sp)
   23a80:	dc400117 	ldw	r17,4(sp)
   23a84:	dc000017 	ldw	r16,0(sp)
   23a88:	dec00304 	addi	sp,sp,12
   23a8c:	f800283a 	ret

00023a90 <quorem>:
   23a90:	28c00417 	ldw	r3,16(r5)
   23a94:	20800417 	ldw	r2,16(r4)
   23a98:	defff604 	addi	sp,sp,-40
   23a9c:	ddc00715 	stw	r23,28(sp)
   23aa0:	dd400515 	stw	r21,20(sp)
   23aa4:	dfc00915 	stw	ra,36(sp)
   23aa8:	df000815 	stw	fp,32(sp)
   23aac:	dd800615 	stw	r22,24(sp)
   23ab0:	dd000415 	stw	r20,16(sp)
   23ab4:	dcc00315 	stw	r19,12(sp)
   23ab8:	dc800215 	stw	r18,8(sp)
   23abc:	dc400115 	stw	r17,4(sp)
   23ac0:	dc000015 	stw	r16,0(sp)
   23ac4:	202f883a 	mov	r23,r4
   23ac8:	282b883a 	mov	r21,r5
   23acc:	10c07416 	blt	r2,r3,23ca0 <quorem+0x210>
   23ad0:	1c7fffc4 	addi	r17,r3,-1
   23ad4:	8c45883a 	add	r2,r17,r17
   23ad8:	1085883a 	add	r2,r2,r2
   23adc:	2c000504 	addi	r16,r5,20
   23ae0:	24c00504 	addi	r19,r4,20
   23ae4:	14ed883a 	add	r22,r2,r19
   23ae8:	80a5883a 	add	r18,r16,r2
   23aec:	b7000017 	ldw	fp,0(r22)
   23af0:	91400017 	ldw	r5,0(r18)
   23af4:	e009883a 	mov	r4,fp
   23af8:	29400044 	addi	r5,r5,1
   23afc:	0029e480 	call	29e48 <__udivsi3>
   23b00:	1029883a 	mov	r20,r2
   23b04:	10003c1e 	bne	r2,zero,23bf8 <quorem+0x168>
   23b08:	a80b883a 	mov	r5,r21
   23b0c:	b809883a 	mov	r4,r23
   23b10:	002684c0 	call	2684c <__mcmp>
   23b14:	10002b16 	blt	r2,zero,23bc4 <quorem+0x134>
   23b18:	a5000044 	addi	r20,r20,1
   23b1c:	980f883a 	mov	r7,r19
   23b20:	0011883a 	mov	r8,zero
   23b24:	0009883a 	mov	r4,zero
   23b28:	81400017 	ldw	r5,0(r16)
   23b2c:	38c00017 	ldw	r3,0(r7)
   23b30:	84000104 	addi	r16,r16,4
   23b34:	28bfffcc 	andi	r2,r5,65535
   23b38:	2085883a 	add	r2,r4,r2
   23b3c:	11bfffcc 	andi	r6,r2,65535
   23b40:	193fffcc 	andi	r4,r3,65535
   23b44:	1004d43a 	srli	r2,r2,16
   23b48:	280ad43a 	srli	r5,r5,16
   23b4c:	2189c83a 	sub	r4,r4,r6
   23b50:	2209883a 	add	r4,r4,r8
   23b54:	1806d43a 	srli	r3,r3,16
   23b58:	288b883a 	add	r5,r5,r2
   23b5c:	200dd43a 	srai	r6,r4,16
   23b60:	28bfffcc 	andi	r2,r5,65535
   23b64:	1887c83a 	sub	r3,r3,r2
   23b68:	1987883a 	add	r3,r3,r6
   23b6c:	3900000d 	sth	r4,0(r7)
   23b70:	38c0008d 	sth	r3,2(r7)
   23b74:	2808d43a 	srli	r4,r5,16
   23b78:	39c00104 	addi	r7,r7,4
   23b7c:	1811d43a 	srai	r8,r3,16
   23b80:	943fe92e 	bgeu	r18,r16,23b28 <quorem+0x98>
   23b84:	8c45883a 	add	r2,r17,r17
   23b88:	1085883a 	add	r2,r2,r2
   23b8c:	9885883a 	add	r2,r19,r2
   23b90:	10c00017 	ldw	r3,0(r2)
   23b94:	18000b1e 	bne	r3,zero,23bc4 <quorem+0x134>
   23b98:	113fff04 	addi	r4,r2,-4
   23b9c:	9900082e 	bgeu	r19,r4,23bc0 <quorem+0x130>
   23ba0:	10bfff17 	ldw	r2,-4(r2)
   23ba4:	10000326 	beq	r2,zero,23bb4 <quorem+0x124>
   23ba8:	00000506 	br	23bc0 <quorem+0x130>
   23bac:	20800017 	ldw	r2,0(r4)
   23bb0:	1000031e 	bne	r2,zero,23bc0 <quorem+0x130>
   23bb4:	213fff04 	addi	r4,r4,-4
   23bb8:	8c7fffc4 	addi	r17,r17,-1
   23bbc:	993ffb36 	bltu	r19,r4,23bac <quorem+0x11c>
   23bc0:	bc400415 	stw	r17,16(r23)
   23bc4:	a005883a 	mov	r2,r20
   23bc8:	dfc00917 	ldw	ra,36(sp)
   23bcc:	df000817 	ldw	fp,32(sp)
   23bd0:	ddc00717 	ldw	r23,28(sp)
   23bd4:	dd800617 	ldw	r22,24(sp)
   23bd8:	dd400517 	ldw	r21,20(sp)
   23bdc:	dd000417 	ldw	r20,16(sp)
   23be0:	dcc00317 	ldw	r19,12(sp)
   23be4:	dc800217 	ldw	r18,8(sp)
   23be8:	dc400117 	ldw	r17,4(sp)
   23bec:	dc000017 	ldw	r16,0(sp)
   23bf0:	dec00a04 	addi	sp,sp,40
   23bf4:	f800283a 	ret
   23bf8:	980f883a 	mov	r7,r19
   23bfc:	8011883a 	mov	r8,r16
   23c00:	0013883a 	mov	r9,zero
   23c04:	000d883a 	mov	r6,zero
   23c08:	40c00017 	ldw	r3,0(r8)
   23c0c:	39000017 	ldw	r4,0(r7)
   23c10:	42000104 	addi	r8,r8,4
   23c14:	18bfffcc 	andi	r2,r3,65535
   23c18:	a085383a 	mul	r2,r20,r2
   23c1c:	1806d43a 	srli	r3,r3,16
   23c20:	217fffcc 	andi	r5,r4,65535
   23c24:	3085883a 	add	r2,r6,r2
   23c28:	11bfffcc 	andi	r6,r2,65535
   23c2c:	a0c7383a 	mul	r3,r20,r3
   23c30:	1004d43a 	srli	r2,r2,16
   23c34:	298bc83a 	sub	r5,r5,r6
   23c38:	2a4b883a 	add	r5,r5,r9
   23c3c:	2008d43a 	srli	r4,r4,16
   23c40:	1887883a 	add	r3,r3,r2
   23c44:	280dd43a 	srai	r6,r5,16
   23c48:	18bfffcc 	andi	r2,r3,65535
   23c4c:	2089c83a 	sub	r4,r4,r2
   23c50:	2189883a 	add	r4,r4,r6
   23c54:	3900008d 	sth	r4,2(r7)
   23c58:	3940000d 	sth	r5,0(r7)
   23c5c:	180cd43a 	srli	r6,r3,16
   23c60:	39c00104 	addi	r7,r7,4
   23c64:	2013d43a 	srai	r9,r4,16
   23c68:	923fe72e 	bgeu	r18,r8,23c08 <quorem+0x178>
   23c6c:	e03fa61e 	bne	fp,zero,23b08 <quorem+0x78>
   23c70:	b0ffff04 	addi	r3,r22,-4
   23c74:	98c0082e 	bgeu	r19,r3,23c98 <quorem+0x208>
   23c78:	b0bfff17 	ldw	r2,-4(r22)
   23c7c:	10000326 	beq	r2,zero,23c8c <quorem+0x1fc>
   23c80:	00000506 	br	23c98 <quorem+0x208>
   23c84:	18800017 	ldw	r2,0(r3)
   23c88:	1000031e 	bne	r2,zero,23c98 <quorem+0x208>
   23c8c:	18ffff04 	addi	r3,r3,-4
   23c90:	8c7fffc4 	addi	r17,r17,-1
   23c94:	98fffb36 	bltu	r19,r3,23c84 <quorem+0x1f4>
   23c98:	bc400415 	stw	r17,16(r23)
   23c9c:	003f9a06 	br	23b08 <quorem+0x78>
   23ca0:	0005883a 	mov	r2,zero
   23ca4:	003fc806 	br	23bc8 <quorem+0x138>

00023ca8 <_dtoa_r>:
   23ca8:	22001017 	ldw	r8,64(r4)
   23cac:	deffda04 	addi	sp,sp,-152
   23cb0:	dd402115 	stw	r21,132(sp)
   23cb4:	dd002015 	stw	r20,128(sp)
   23cb8:	dc801e15 	stw	r18,120(sp)
   23cbc:	dc401d15 	stw	r17,116(sp)
   23cc0:	dfc02515 	stw	ra,148(sp)
   23cc4:	df002415 	stw	fp,144(sp)
   23cc8:	ddc02315 	stw	r23,140(sp)
   23ccc:	dd802215 	stw	r22,136(sp)
   23cd0:	dcc01f15 	stw	r19,124(sp)
   23cd4:	dc001c15 	stw	r16,112(sp)
   23cd8:	d9001615 	stw	r4,88(sp)
   23cdc:	3023883a 	mov	r17,r6
   23ce0:	2829883a 	mov	r20,r5
   23ce4:	d9c01715 	stw	r7,92(sp)
   23ce8:	dc802817 	ldw	r18,160(sp)
   23cec:	302b883a 	mov	r21,r6
   23cf0:	40000a26 	beq	r8,zero,23d1c <_dtoa_r+0x74>
   23cf4:	20801117 	ldw	r2,68(r4)
   23cf8:	400b883a 	mov	r5,r8
   23cfc:	40800115 	stw	r2,4(r8)
   23d00:	20c01117 	ldw	r3,68(r4)
   23d04:	00800044 	movi	r2,1
   23d08:	10c4983a 	sll	r2,r2,r3
   23d0c:	40800215 	stw	r2,8(r8)
   23d10:	00266f00 	call	266f0 <_Bfree>
   23d14:	d8c01617 	ldw	r3,88(sp)
   23d18:	18001015 	stw	zero,64(r3)
   23d1c:	8800a316 	blt	r17,zero,23fac <_dtoa_r+0x304>
   23d20:	90000015 	stw	zero,0(r18)
   23d24:	a8dffc2c 	andhi	r3,r21,32752
   23d28:	009ffc34 	movhi	r2,32752
   23d2c:	18809126 	beq	r3,r2,23f74 <_dtoa_r+0x2cc>
   23d30:	000d883a 	mov	r6,zero
   23d34:	000f883a 	mov	r7,zero
   23d38:	a009883a 	mov	r4,r20
   23d3c:	a80b883a 	mov	r5,r21
   23d40:	dd001215 	stw	r20,72(sp)
   23d44:	dd401315 	stw	r21,76(sp)
   23d48:	00297880 	call	29788 <__nedf2>
   23d4c:	1000171e 	bne	r2,zero,23dac <_dtoa_r+0x104>
   23d50:	d9802717 	ldw	r6,156(sp)
   23d54:	00800044 	movi	r2,1
   23d58:	30800015 	stw	r2,0(r6)
   23d5c:	d8802917 	ldw	r2,164(sp)
   23d60:	10029b26 	beq	r2,zero,247d0 <_dtoa_r+0xb28>
   23d64:	d9002917 	ldw	r4,164(sp)
   23d68:	008000f4 	movhi	r2,3
   23d6c:	10bad044 	addi	r2,r2,-5311
   23d70:	10ffffc4 	addi	r3,r2,-1
   23d74:	20800015 	stw	r2,0(r4)
   23d78:	1805883a 	mov	r2,r3
   23d7c:	dfc02517 	ldw	ra,148(sp)
   23d80:	df002417 	ldw	fp,144(sp)
   23d84:	ddc02317 	ldw	r23,140(sp)
   23d88:	dd802217 	ldw	r22,136(sp)
   23d8c:	dd402117 	ldw	r21,132(sp)
   23d90:	dd002017 	ldw	r20,128(sp)
   23d94:	dcc01f17 	ldw	r19,124(sp)
   23d98:	dc801e17 	ldw	r18,120(sp)
   23d9c:	dc401d17 	ldw	r17,116(sp)
   23da0:	dc001c17 	ldw	r16,112(sp)
   23da4:	dec02604 	addi	sp,sp,152
   23da8:	f800283a 	ret
   23dac:	d9001617 	ldw	r4,88(sp)
   23db0:	d9401217 	ldw	r5,72(sp)
   23db4:	d8800104 	addi	r2,sp,4
   23db8:	a80d883a 	mov	r6,r21
   23dbc:	d9c00204 	addi	r7,sp,8
   23dc0:	d8800015 	stw	r2,0(sp)
   23dc4:	0026d2c0 	call	26d2c <__d2b>
   23dc8:	d8800715 	stw	r2,28(sp)
   23dcc:	a804d53a 	srli	r2,r21,20
   23dd0:	1101ffcc 	andi	r4,r2,2047
   23dd4:	20008626 	beq	r4,zero,23ff0 <_dtoa_r+0x348>
   23dd8:	d8c01217 	ldw	r3,72(sp)
   23ddc:	00800434 	movhi	r2,16
   23de0:	10bfffc4 	addi	r2,r2,-1
   23de4:	ddc00117 	ldw	r23,4(sp)
   23de8:	a884703a 	and	r2,r21,r2
   23dec:	1811883a 	mov	r8,r3
   23df0:	124ffc34 	orhi	r9,r2,16368
   23df4:	25bf0044 	addi	r22,r4,-1023
   23df8:	d8000815 	stw	zero,32(sp)
   23dfc:	0005883a 	mov	r2,zero
   23e00:	00cffe34 	movhi	r3,16376
   23e04:	480b883a 	mov	r5,r9
   23e08:	4009883a 	mov	r4,r8
   23e0c:	180f883a 	mov	r7,r3
   23e10:	100d883a 	mov	r6,r2
   23e14:	0028ff00 	call	28ff0 <__subdf3>
   23e18:	0218dbf4 	movhi	r8,25455
   23e1c:	4210d844 	addi	r8,r8,17249
   23e20:	024ff4f4 	movhi	r9,16339
   23e24:	4a61e9c4 	addi	r9,r9,-30809
   23e28:	480f883a 	mov	r7,r9
   23e2c:	400d883a 	mov	r6,r8
   23e30:	180b883a 	mov	r5,r3
   23e34:	1009883a 	mov	r4,r2
   23e38:	00290e40 	call	290e4 <__muldf3>
   23e3c:	0222d874 	movhi	r8,35681
   23e40:	42322cc4 	addi	r8,r8,-14157
   23e44:	024ff1f4 	movhi	r9,16327
   23e48:	4a628a04 	addi	r9,r9,-30168
   23e4c:	480f883a 	mov	r7,r9
   23e50:	400d883a 	mov	r6,r8
   23e54:	180b883a 	mov	r5,r3
   23e58:	1009883a 	mov	r4,r2
   23e5c:	00290700 	call	29070 <__adddf3>
   23e60:	b009883a 	mov	r4,r22
   23e64:	1021883a 	mov	r16,r2
   23e68:	1823883a 	mov	r17,r3
   23e6c:	00299a80 	call	299a8 <__floatsidf>
   23e70:	021427f4 	movhi	r8,20639
   23e74:	421e7ec4 	addi	r8,r8,31227
   23e78:	024ff4f4 	movhi	r9,16339
   23e7c:	4a5104c4 	addi	r9,r9,17427
   23e80:	480f883a 	mov	r7,r9
   23e84:	400d883a 	mov	r6,r8
   23e88:	180b883a 	mov	r5,r3
   23e8c:	1009883a 	mov	r4,r2
   23e90:	00290e40 	call	290e4 <__muldf3>
   23e94:	180f883a 	mov	r7,r3
   23e98:	880b883a 	mov	r5,r17
   23e9c:	100d883a 	mov	r6,r2
   23ea0:	8009883a 	mov	r4,r16
   23ea4:	00290700 	call	29070 <__adddf3>
   23ea8:	1009883a 	mov	r4,r2
   23eac:	180b883a 	mov	r5,r3
   23eb0:	1021883a 	mov	r16,r2
   23eb4:	1823883a 	mov	r17,r3
   23eb8:	0029aa00 	call	29aa0 <__fixdfsi>
   23ebc:	000d883a 	mov	r6,zero
   23ec0:	000f883a 	mov	r7,zero
   23ec4:	8009883a 	mov	r4,r16
   23ec8:	880b883a 	mov	r5,r17
   23ecc:	d8800d15 	stw	r2,52(sp)
   23ed0:	00299200 	call	29920 <__ltdf2>
   23ed4:	10031716 	blt	r2,zero,24b34 <_dtoa_r+0xe8c>
   23ed8:	d8c00d17 	ldw	r3,52(sp)
   23edc:	00800584 	movi	r2,22
   23ee0:	10c1482e 	bgeu	r2,r3,24404 <_dtoa_r+0x75c>
   23ee4:	01000044 	movi	r4,1
   23ee8:	d9000c15 	stw	r4,48(sp)
   23eec:	bd85c83a 	sub	r2,r23,r22
   23ef0:	11bfffc4 	addi	r6,r2,-1
   23ef4:	30030b16 	blt	r6,zero,24b24 <_dtoa_r+0xe7c>
   23ef8:	d9800a15 	stw	r6,40(sp)
   23efc:	d8001115 	stw	zero,68(sp)
   23f00:	d8c00d17 	ldw	r3,52(sp)
   23f04:	1802ff16 	blt	r3,zero,24b04 <_dtoa_r+0xe5c>
   23f08:	d9000a17 	ldw	r4,40(sp)
   23f0c:	d8c00915 	stw	r3,36(sp)
   23f10:	d8001015 	stw	zero,64(sp)
   23f14:	20c9883a 	add	r4,r4,r3
   23f18:	d9000a15 	stw	r4,40(sp)
   23f1c:	d9001717 	ldw	r4,92(sp)
   23f20:	00800244 	movi	r2,9
   23f24:	11004636 	bltu	r2,r4,24040 <_dtoa_r+0x398>
   23f28:	00800144 	movi	r2,5
   23f2c:	11020416 	blt	r2,r4,24740 <_dtoa_r+0xa98>
   23f30:	04400044 	movi	r17,1
   23f34:	d8c01717 	ldw	r3,92(sp)
   23f38:	00800144 	movi	r2,5
   23f3c:	10c1ed36 	bltu	r2,r3,246f4 <_dtoa_r+0xa4c>
   23f40:	18c5883a 	add	r2,r3,r3
   23f44:	1085883a 	add	r2,r2,r2
   23f48:	00c000b4 	movhi	r3,2
   23f4c:	18cfd704 	addi	r3,r3,16220
   23f50:	10c5883a 	add	r2,r2,r3
   23f54:	11000017 	ldw	r4,0(r2)
   23f58:	2000683a 	jmp	r4
   23f5c:	00024048 	cmpgei	zero,zero,2305
   23f60:	00024048 	cmpgei	zero,zero,2305
   23f64:	00024a48 	cmpgei	zero,zero,2345
   23f68:	00024a20 	cmpeqi	zero,zero,2344
   23f6c:	00024a64 	muli	zero,zero,2345
   23f70:	00024a70 	cmpltui	zero,zero,2345
   23f74:	d9002717 	ldw	r4,156(sp)
   23f78:	0089c3c4 	movi	r2,9999
   23f7c:	20800015 	stw	r2,0(r4)
   23f80:	a0001026 	beq	r20,zero,23fc4 <_dtoa_r+0x31c>
   23f84:	00c000f4 	movhi	r3,3
   23f88:	18fadc04 	addi	r3,r3,-5264
   23f8c:	d9802917 	ldw	r6,164(sp)
   23f90:	303f7926 	beq	r6,zero,23d78 <_dtoa_r+0xd0>
   23f94:	188000c7 	ldb	r2,3(r3)
   23f98:	190000c4 	addi	r4,r3,3
   23f9c:	1000101e 	bne	r2,zero,23fe0 <_dtoa_r+0x338>
   23fa0:	d8802917 	ldw	r2,164(sp)
   23fa4:	11000015 	stw	r4,0(r2)
   23fa8:	003f7306 	br	23d78 <_dtoa_r+0xd0>
   23fac:	00a00034 	movhi	r2,32768
   23fb0:	10bfffc4 	addi	r2,r2,-1
   23fb4:	00c00044 	movi	r3,1
   23fb8:	88aa703a 	and	r21,r17,r2
   23fbc:	90c00015 	stw	r3,0(r18)
   23fc0:	003f5806 	br	23d24 <_dtoa_r+0x7c>
   23fc4:	00800434 	movhi	r2,16
   23fc8:	10bfffc4 	addi	r2,r2,-1
   23fcc:	a884703a 	and	r2,r21,r2
   23fd0:	103fec1e 	bne	r2,zero,23f84 <_dtoa_r+0x2dc>
   23fd4:	00c000f4 	movhi	r3,3
   23fd8:	18fad904 	addi	r3,r3,-5276
   23fdc:	003feb06 	br	23f8c <_dtoa_r+0x2e4>
   23fe0:	d8802917 	ldw	r2,164(sp)
   23fe4:	19000204 	addi	r4,r3,8
   23fe8:	11000015 	stw	r4,0(r2)
   23fec:	003f6206 	br	23d78 <_dtoa_r+0xd0>
   23ff0:	ddc00117 	ldw	r23,4(sp)
   23ff4:	d8800217 	ldw	r2,8(sp)
   23ff8:	01000804 	movi	r4,32
   23ffc:	b8c10c84 	addi	r3,r23,1074
   24000:	18a3883a 	add	r17,r3,r2
   24004:	2441b80e 	bge	r4,r17,246e8 <_dtoa_r+0xa40>
   24008:	00c01004 	movi	r3,64
   2400c:	1c47c83a 	sub	r3,r3,r17
   24010:	88bff804 	addi	r2,r17,-32
   24014:	a8c6983a 	sll	r3,r21,r3
   24018:	a084d83a 	srl	r2,r20,r2
   2401c:	1888b03a 	or	r4,r3,r2
   24020:	0029b780 	call	29b78 <__floatunsidf>
   24024:	1011883a 	mov	r8,r2
   24028:	00bf8434 	movhi	r2,65040
   2402c:	01000044 	movi	r4,1
   24030:	10d3883a 	add	r9,r2,r3
   24034:	8dbef344 	addi	r22,r17,-1075
   24038:	d9000815 	stw	r4,32(sp)
   2403c:	003f6f06 	br	23dfc <_dtoa_r+0x154>
   24040:	d8001715 	stw	zero,92(sp)
   24044:	04400044 	movi	r17,1
   24048:	00bfffc4 	movi	r2,-1
   2404c:	00c00044 	movi	r3,1
   24050:	d8800e15 	stw	r2,56(sp)
   24054:	d8002615 	stw	zero,152(sp)
   24058:	d8800f15 	stw	r2,60(sp)
   2405c:	d8c00b15 	stw	r3,44(sp)
   24060:	1021883a 	mov	r16,r2
   24064:	d8801617 	ldw	r2,88(sp)
   24068:	10001115 	stw	zero,68(r2)
   2406c:	d8801617 	ldw	r2,88(sp)
   24070:	11401117 	ldw	r5,68(r2)
   24074:	1009883a 	mov	r4,r2
   24078:	0026c700 	call	26c70 <_Balloc>
   2407c:	d8c01617 	ldw	r3,88(sp)
   24080:	d8800515 	stw	r2,20(sp)
   24084:	18801015 	stw	r2,64(r3)
   24088:	00800384 	movi	r2,14
   2408c:	14006836 	bltu	r2,r16,24230 <_dtoa_r+0x588>
   24090:	8805003a 	cmpeq	r2,r17,zero
   24094:	1000661e 	bne	r2,zero,24230 <_dtoa_r+0x588>
   24098:	d9000d17 	ldw	r4,52(sp)
   2409c:	0102300e 	bge	zero,r4,24960 <_dtoa_r+0xcb8>
   240a0:	208003cc 	andi	r2,r4,15
   240a4:	100490fa 	slli	r2,r2,3
   240a8:	2025d13a 	srai	r18,r4,4
   240ac:	00c000f4 	movhi	r3,3
   240b0:	18faed04 	addi	r3,r3,-5196
   240b4:	10c5883a 	add	r2,r2,r3
   240b8:	90c0040c 	andi	r3,r18,16
   240bc:	14000017 	ldw	r16,0(r2)
   240c0:	14400117 	ldw	r17,4(r2)
   240c4:	18036a1e 	bne	r3,zero,24e70 <_dtoa_r+0x11c8>
   240c8:	05800084 	movi	r22,2
   240cc:	90001026 	beq	r18,zero,24110 <_dtoa_r+0x468>
   240d0:	04c000f4 	movhi	r19,3
   240d4:	9cfb1f04 	addi	r19,r19,-4996
   240d8:	9080004c 	andi	r2,r18,1
   240dc:	1005003a 	cmpeq	r2,r2,zero
   240e0:	1000081e 	bne	r2,zero,24104 <_dtoa_r+0x45c>
   240e4:	99800017 	ldw	r6,0(r19)
   240e8:	99c00117 	ldw	r7,4(r19)
   240ec:	880b883a 	mov	r5,r17
   240f0:	8009883a 	mov	r4,r16
   240f4:	00290e40 	call	290e4 <__muldf3>
   240f8:	1021883a 	mov	r16,r2
   240fc:	b5800044 	addi	r22,r22,1
   24100:	1823883a 	mov	r17,r3
   24104:	9025d07a 	srai	r18,r18,1
   24108:	9cc00204 	addi	r19,r19,8
   2410c:	903ff21e 	bne	r18,zero,240d8 <_dtoa_r+0x430>
   24110:	a80b883a 	mov	r5,r21
   24114:	a009883a 	mov	r4,r20
   24118:	880f883a 	mov	r7,r17
   2411c:	800d883a 	mov	r6,r16
   24120:	00294a80 	call	294a8 <__divdf3>
   24124:	1029883a 	mov	r20,r2
   24128:	182b883a 	mov	r21,r3
   2412c:	d8c00c17 	ldw	r3,48(sp)
   24130:	1805003a 	cmpeq	r2,r3,zero
   24134:	1000081e 	bne	r2,zero,24158 <_dtoa_r+0x4b0>
   24138:	0005883a 	mov	r2,zero
   2413c:	00cffc34 	movhi	r3,16368
   24140:	180f883a 	mov	r7,r3
   24144:	a009883a 	mov	r4,r20
   24148:	a80b883a 	mov	r5,r21
   2414c:	100d883a 	mov	r6,r2
   24150:	00299200 	call	29920 <__ltdf2>
   24154:	1003fe16 	blt	r2,zero,25150 <_dtoa_r+0x14a8>
   24158:	b009883a 	mov	r4,r22
   2415c:	00299a80 	call	299a8 <__floatsidf>
   24160:	180b883a 	mov	r5,r3
   24164:	1009883a 	mov	r4,r2
   24168:	a00d883a 	mov	r6,r20
   2416c:	a80f883a 	mov	r7,r21
   24170:	00290e40 	call	290e4 <__muldf3>
   24174:	0011883a 	mov	r8,zero
   24178:	02500734 	movhi	r9,16412
   2417c:	1009883a 	mov	r4,r2
   24180:	180b883a 	mov	r5,r3
   24184:	480f883a 	mov	r7,r9
   24188:	400d883a 	mov	r6,r8
   2418c:	00290700 	call	29070 <__adddf3>
   24190:	d9000f17 	ldw	r4,60(sp)
   24194:	102d883a 	mov	r22,r2
   24198:	00bf3034 	movhi	r2,64704
   2419c:	18b9883a 	add	fp,r3,r2
   241a0:	e02f883a 	mov	r23,fp
   241a4:	20028f1e 	bne	r4,zero,24be4 <_dtoa_r+0xf3c>
   241a8:	0005883a 	mov	r2,zero
   241ac:	00d00534 	movhi	r3,16404
   241b0:	a009883a 	mov	r4,r20
   241b4:	a80b883a 	mov	r5,r21
   241b8:	180f883a 	mov	r7,r3
   241bc:	100d883a 	mov	r6,r2
   241c0:	0028ff00 	call	28ff0 <__subdf3>
   241c4:	1009883a 	mov	r4,r2
   241c8:	e00f883a 	mov	r7,fp
   241cc:	180b883a 	mov	r5,r3
   241d0:	b00d883a 	mov	r6,r22
   241d4:	1025883a 	mov	r18,r2
   241d8:	1827883a 	mov	r19,r3
   241dc:	00298100 	call	29810 <__gtdf2>
   241e0:	00834f16 	blt	zero,r2,24f20 <_dtoa_r+0x1278>
   241e4:	e0e0003c 	xorhi	r3,fp,32768
   241e8:	9009883a 	mov	r4,r18
   241ec:	980b883a 	mov	r5,r19
   241f0:	180f883a 	mov	r7,r3
   241f4:	b00d883a 	mov	r6,r22
   241f8:	00299200 	call	29920 <__ltdf2>
   241fc:	1000080e 	bge	r2,zero,24220 <_dtoa_r+0x578>
   24200:	0027883a 	mov	r19,zero
   24204:	0025883a 	mov	r18,zero
   24208:	d8802617 	ldw	r2,152(sp)
   2420c:	df000517 	ldw	fp,20(sp)
   24210:	d8000615 	stw	zero,24(sp)
   24214:	0084303a 	nor	r2,zero,r2
   24218:	d8800d15 	stw	r2,52(sp)
   2421c:	00019b06 	br	2488c <_dtoa_r+0xbe4>
   24220:	d9801217 	ldw	r6,72(sp)
   24224:	d8801317 	ldw	r2,76(sp)
   24228:	3029883a 	mov	r20,r6
   2422c:	102b883a 	mov	r21,r2
   24230:	d8c00217 	ldw	r3,8(sp)
   24234:	18008516 	blt	r3,zero,2444c <_dtoa_r+0x7a4>
   24238:	d9000d17 	ldw	r4,52(sp)
   2423c:	00800384 	movi	r2,14
   24240:	11008216 	blt	r2,r4,2444c <_dtoa_r+0x7a4>
   24244:	200490fa 	slli	r2,r4,3
   24248:	d9802617 	ldw	r6,152(sp)
   2424c:	00c000f4 	movhi	r3,3
   24250:	18faed04 	addi	r3,r3,-5196
   24254:	10c5883a 	add	r2,r2,r3
   24258:	14800017 	ldw	r18,0(r2)
   2425c:	14c00117 	ldw	r19,4(r2)
   24260:	30031e16 	blt	r6,zero,24edc <_dtoa_r+0x1234>
   24264:	d9000517 	ldw	r4,20(sp)
   24268:	d8c00f17 	ldw	r3,60(sp)
   2426c:	a823883a 	mov	r17,r21
   24270:	a021883a 	mov	r16,r20
   24274:	192b883a 	add	r21,r3,r4
   24278:	2039883a 	mov	fp,r4
   2427c:	00000f06 	br	242bc <_dtoa_r+0x614>
   24280:	0005883a 	mov	r2,zero
   24284:	00d00934 	movhi	r3,16420
   24288:	5009883a 	mov	r4,r10
   2428c:	580b883a 	mov	r5,r11
   24290:	180f883a 	mov	r7,r3
   24294:	100d883a 	mov	r6,r2
   24298:	00290e40 	call	290e4 <__muldf3>
   2429c:	180b883a 	mov	r5,r3
   242a0:	000d883a 	mov	r6,zero
   242a4:	000f883a 	mov	r7,zero
   242a8:	1009883a 	mov	r4,r2
   242ac:	1021883a 	mov	r16,r2
   242b0:	1823883a 	mov	r17,r3
   242b4:	00297880 	call	29788 <__nedf2>
   242b8:	10004526 	beq	r2,zero,243d0 <_dtoa_r+0x728>
   242bc:	900d883a 	mov	r6,r18
   242c0:	980f883a 	mov	r7,r19
   242c4:	8009883a 	mov	r4,r16
   242c8:	880b883a 	mov	r5,r17
   242cc:	00294a80 	call	294a8 <__divdf3>
   242d0:	180b883a 	mov	r5,r3
   242d4:	1009883a 	mov	r4,r2
   242d8:	0029aa00 	call	29aa0 <__fixdfsi>
   242dc:	1009883a 	mov	r4,r2
   242e0:	1029883a 	mov	r20,r2
   242e4:	00299a80 	call	299a8 <__floatsidf>
   242e8:	180f883a 	mov	r7,r3
   242ec:	9009883a 	mov	r4,r18
   242f0:	980b883a 	mov	r5,r19
   242f4:	100d883a 	mov	r6,r2
   242f8:	00290e40 	call	290e4 <__muldf3>
   242fc:	180f883a 	mov	r7,r3
   24300:	880b883a 	mov	r5,r17
   24304:	8009883a 	mov	r4,r16
   24308:	100d883a 	mov	r6,r2
   2430c:	0028ff00 	call	28ff0 <__subdf3>
   24310:	1015883a 	mov	r10,r2
   24314:	a0800c04 	addi	r2,r20,48
   24318:	e0800005 	stb	r2,0(fp)
   2431c:	e7000044 	addi	fp,fp,1
   24320:	1817883a 	mov	r11,r3
   24324:	e57fd61e 	bne	fp,r21,24280 <_dtoa_r+0x5d8>
   24328:	500d883a 	mov	r6,r10
   2432c:	180f883a 	mov	r7,r3
   24330:	5009883a 	mov	r4,r10
   24334:	180b883a 	mov	r5,r3
   24338:	00290700 	call	29070 <__adddf3>
   2433c:	100d883a 	mov	r6,r2
   24340:	9009883a 	mov	r4,r18
   24344:	980b883a 	mov	r5,r19
   24348:	180f883a 	mov	r7,r3
   2434c:	1021883a 	mov	r16,r2
   24350:	1823883a 	mov	r17,r3
   24354:	00299200 	call	29920 <__ltdf2>
   24358:	10000816 	blt	r2,zero,2437c <_dtoa_r+0x6d4>
   2435c:	980b883a 	mov	r5,r19
   24360:	800d883a 	mov	r6,r16
   24364:	880f883a 	mov	r7,r17
   24368:	9009883a 	mov	r4,r18
   2436c:	00297000 	call	29700 <__eqdf2>
   24370:	1000171e 	bne	r2,zero,243d0 <_dtoa_r+0x728>
   24374:	a080004c 	andi	r2,r20,1
   24378:	10001526 	beq	r2,zero,243d0 <_dtoa_r+0x728>
   2437c:	d8800d17 	ldw	r2,52(sp)
   24380:	d8800415 	stw	r2,16(sp)
   24384:	e009883a 	mov	r4,fp
   24388:	213fffc4 	addi	r4,r4,-1
   2438c:	20c00007 	ldb	r3,0(r4)
   24390:	00800e44 	movi	r2,57
   24394:	1880081e 	bne	r3,r2,243b8 <_dtoa_r+0x710>
   24398:	d8800517 	ldw	r2,20(sp)
   2439c:	113ffa1e 	bne	r2,r4,24388 <_dtoa_r+0x6e0>
   243a0:	d8c00417 	ldw	r3,16(sp)
   243a4:	d9800517 	ldw	r6,20(sp)
   243a8:	00800c04 	movi	r2,48
   243ac:	18c00044 	addi	r3,r3,1
   243b0:	d8c00415 	stw	r3,16(sp)
   243b4:	30800005 	stb	r2,0(r6)
   243b8:	20800003 	ldbu	r2,0(r4)
   243bc:	d8c00417 	ldw	r3,16(sp)
   243c0:	27000044 	addi	fp,r4,1
   243c4:	10800044 	addi	r2,r2,1
   243c8:	d8c00d15 	stw	r3,52(sp)
   243cc:	20800005 	stb	r2,0(r4)
   243d0:	d9001617 	ldw	r4,88(sp)
   243d4:	d9400717 	ldw	r5,28(sp)
   243d8:	00266f00 	call	266f0 <_Bfree>
   243dc:	e0000005 	stb	zero,0(fp)
   243e0:	d9800d17 	ldw	r6,52(sp)
   243e4:	d8c02717 	ldw	r3,156(sp)
   243e8:	d9002917 	ldw	r4,164(sp)
   243ec:	30800044 	addi	r2,r6,1
   243f0:	18800015 	stw	r2,0(r3)
   243f4:	20029c26 	beq	r4,zero,24e68 <_dtoa_r+0x11c0>
   243f8:	d8c00517 	ldw	r3,20(sp)
   243fc:	27000015 	stw	fp,0(r4)
   24400:	003e5d06 	br	23d78 <_dtoa_r+0xd0>
   24404:	d9800d17 	ldw	r6,52(sp)
   24408:	00c000f4 	movhi	r3,3
   2440c:	18faed04 	addi	r3,r3,-5196
   24410:	d9001217 	ldw	r4,72(sp)
   24414:	300490fa 	slli	r2,r6,3
   24418:	d9401317 	ldw	r5,76(sp)
   2441c:	10c5883a 	add	r2,r2,r3
   24420:	12000017 	ldw	r8,0(r2)
   24424:	12400117 	ldw	r9,4(r2)
   24428:	400d883a 	mov	r6,r8
   2442c:	480f883a 	mov	r7,r9
   24430:	00299200 	call	29920 <__ltdf2>
   24434:	1000030e 	bge	r2,zero,24444 <_dtoa_r+0x79c>
   24438:	d8800d17 	ldw	r2,52(sp)
   2443c:	10bfffc4 	addi	r2,r2,-1
   24440:	d8800d15 	stw	r2,52(sp)
   24444:	d8000c15 	stw	zero,48(sp)
   24448:	003ea806 	br	23eec <_dtoa_r+0x244>
   2444c:	d9000b17 	ldw	r4,44(sp)
   24450:	202cc03a 	cmpne	r22,r4,zero
   24454:	b000c71e 	bne	r22,zero,24774 <_dtoa_r+0xacc>
   24458:	dc001117 	ldw	r16,68(sp)
   2445c:	dc801017 	ldw	r18,64(sp)
   24460:	0027883a 	mov	r19,zero
   24464:	04000b0e 	bge	zero,r16,24494 <_dtoa_r+0x7ec>
   24468:	d8c00a17 	ldw	r3,40(sp)
   2446c:	00c0090e 	bge	zero,r3,24494 <_dtoa_r+0x7ec>
   24470:	8005883a 	mov	r2,r16
   24474:	1c011316 	blt	r3,r16,248c4 <_dtoa_r+0xc1c>
   24478:	d9000a17 	ldw	r4,40(sp)
   2447c:	d9801117 	ldw	r6,68(sp)
   24480:	80a1c83a 	sub	r16,r16,r2
   24484:	2089c83a 	sub	r4,r4,r2
   24488:	308dc83a 	sub	r6,r6,r2
   2448c:	d9000a15 	stw	r4,40(sp)
   24490:	d9801115 	stw	r6,68(sp)
   24494:	d8801017 	ldw	r2,64(sp)
   24498:	0080150e 	bge	zero,r2,244f0 <_dtoa_r+0x848>
   2449c:	d8c00b17 	ldw	r3,44(sp)
   244a0:	1805003a 	cmpeq	r2,r3,zero
   244a4:	1001c91e 	bne	r2,zero,24bcc <_dtoa_r+0xf24>
   244a8:	04800e0e 	bge	zero,r18,244e4 <_dtoa_r+0x83c>
   244ac:	d9001617 	ldw	r4,88(sp)
   244b0:	980b883a 	mov	r5,r19
   244b4:	900d883a 	mov	r6,r18
   244b8:	00274a40 	call	274a4 <__pow5mult>
   244bc:	d9001617 	ldw	r4,88(sp)
   244c0:	d9800717 	ldw	r6,28(sp)
   244c4:	100b883a 	mov	r5,r2
   244c8:	1027883a 	mov	r19,r2
   244cc:	00271800 	call	27180 <__multiply>
   244d0:	d9001617 	ldw	r4,88(sp)
   244d4:	d9400717 	ldw	r5,28(sp)
   244d8:	1023883a 	mov	r17,r2
   244dc:	00266f00 	call	266f0 <_Bfree>
   244e0:	dc400715 	stw	r17,28(sp)
   244e4:	d9001017 	ldw	r4,64(sp)
   244e8:	248dc83a 	sub	r6,r4,r18
   244ec:	30010e1e 	bne	r6,zero,24928 <_dtoa_r+0xc80>
   244f0:	d9001617 	ldw	r4,88(sp)
   244f4:	04400044 	movi	r17,1
   244f8:	880b883a 	mov	r5,r17
   244fc:	00273680 	call	27368 <__i2b>
   24500:	d9800917 	ldw	r6,36(sp)
   24504:	1025883a 	mov	r18,r2
   24508:	0180040e 	bge	zero,r6,2451c <_dtoa_r+0x874>
   2450c:	d9001617 	ldw	r4,88(sp)
   24510:	100b883a 	mov	r5,r2
   24514:	00274a40 	call	274a4 <__pow5mult>
   24518:	1025883a 	mov	r18,r2
   2451c:	d8801717 	ldw	r2,92(sp)
   24520:	8880f30e 	bge	r17,r2,248f0 <_dtoa_r+0xc48>
   24524:	0023883a 	mov	r17,zero
   24528:	d9800917 	ldw	r6,36(sp)
   2452c:	30019e1e 	bne	r6,zero,24ba8 <_dtoa_r+0xf00>
   24530:	00c00044 	movi	r3,1
   24534:	d9000a17 	ldw	r4,40(sp)
   24538:	20c5883a 	add	r2,r4,r3
   2453c:	10c007cc 	andi	r3,r2,31
   24540:	1800841e 	bne	r3,zero,24754 <_dtoa_r+0xaac>
   24544:	00800704 	movi	r2,28
   24548:	d9000a17 	ldw	r4,40(sp)
   2454c:	d9801117 	ldw	r6,68(sp)
   24550:	80a1883a 	add	r16,r16,r2
   24554:	2089883a 	add	r4,r4,r2
   24558:	308d883a 	add	r6,r6,r2
   2455c:	d9000a15 	stw	r4,40(sp)
   24560:	d9801115 	stw	r6,68(sp)
   24564:	d8801117 	ldw	r2,68(sp)
   24568:	0080050e 	bge	zero,r2,24580 <_dtoa_r+0x8d8>
   2456c:	d9400717 	ldw	r5,28(sp)
   24570:	d9001617 	ldw	r4,88(sp)
   24574:	100d883a 	mov	r6,r2
   24578:	00270340 	call	27034 <__lshift>
   2457c:	d8800715 	stw	r2,28(sp)
   24580:	d8c00a17 	ldw	r3,40(sp)
   24584:	00c0050e 	bge	zero,r3,2459c <_dtoa_r+0x8f4>
   24588:	d9001617 	ldw	r4,88(sp)
   2458c:	900b883a 	mov	r5,r18
   24590:	180d883a 	mov	r6,r3
   24594:	00270340 	call	27034 <__lshift>
   24598:	1025883a 	mov	r18,r2
   2459c:	d9000c17 	ldw	r4,48(sp)
   245a0:	2005003a 	cmpeq	r2,r4,zero
   245a4:	10016f26 	beq	r2,zero,24b64 <_dtoa_r+0xebc>
   245a8:	d9000f17 	ldw	r4,60(sp)
   245ac:	0102170e 	bge	zero,r4,24e0c <_dtoa_r+0x1164>
   245b0:	d9800b17 	ldw	r6,44(sp)
   245b4:	3005003a 	cmpeq	r2,r6,zero
   245b8:	1000881e 	bne	r2,zero,247dc <_dtoa_r+0xb34>
   245bc:	0400050e 	bge	zero,r16,245d4 <_dtoa_r+0x92c>
   245c0:	d9001617 	ldw	r4,88(sp)
   245c4:	980b883a 	mov	r5,r19
   245c8:	800d883a 	mov	r6,r16
   245cc:	00270340 	call	27034 <__lshift>
   245d0:	1027883a 	mov	r19,r2
   245d4:	8804c03a 	cmpne	r2,r17,zero
   245d8:	1002541e 	bne	r2,zero,24f2c <_dtoa_r+0x1284>
   245dc:	980b883a 	mov	r5,r19
   245e0:	dd800517 	ldw	r22,20(sp)
   245e4:	dcc00615 	stw	r19,24(sp)
   245e8:	a700004c 	andi	fp,r20,1
   245ec:	2827883a 	mov	r19,r5
   245f0:	d9000717 	ldw	r4,28(sp)
   245f4:	900b883a 	mov	r5,r18
   245f8:	0023a900 	call	23a90 <quorem>
   245fc:	d9000717 	ldw	r4,28(sp)
   24600:	d9400617 	ldw	r5,24(sp)
   24604:	1023883a 	mov	r17,r2
   24608:	8dc00c04 	addi	r23,r17,48
   2460c:	002684c0 	call	2684c <__mcmp>
   24610:	d9001617 	ldw	r4,88(sp)
   24614:	900b883a 	mov	r5,r18
   24618:	980d883a 	mov	r6,r19
   2461c:	1029883a 	mov	r20,r2
   24620:	0026ea80 	call	26ea8 <__mdiff>
   24624:	102b883a 	mov	r21,r2
   24628:	10800317 	ldw	r2,12(r2)
   2462c:	1001281e 	bne	r2,zero,24ad0 <_dtoa_r+0xe28>
   24630:	d9000717 	ldw	r4,28(sp)
   24634:	a80b883a 	mov	r5,r21
   24638:	002684c0 	call	2684c <__mcmp>
   2463c:	d9001617 	ldw	r4,88(sp)
   24640:	1021883a 	mov	r16,r2
   24644:	a80b883a 	mov	r5,r21
   24648:	00266f00 	call	266f0 <_Bfree>
   2464c:	8000041e 	bne	r16,zero,24660 <_dtoa_r+0x9b8>
   24650:	d8801717 	ldw	r2,92(sp)
   24654:	1000021e 	bne	r2,zero,24660 <_dtoa_r+0x9b8>
   24658:	e004c03a 	cmpne	r2,fp,zero
   2465c:	10011726 	beq	r2,zero,24abc <_dtoa_r+0xe14>
   24660:	a0010616 	blt	r20,zero,24a7c <_dtoa_r+0xdd4>
   24664:	a000041e 	bne	r20,zero,24678 <_dtoa_r+0x9d0>
   24668:	d8c01717 	ldw	r3,92(sp)
   2466c:	1800021e 	bne	r3,zero,24678 <_dtoa_r+0x9d0>
   24670:	e004c03a 	cmpne	r2,fp,zero
   24674:	10010126 	beq	r2,zero,24a7c <_dtoa_r+0xdd4>
   24678:	04023d16 	blt	zero,r16,24f70 <_dtoa_r+0x12c8>
   2467c:	b5c00005 	stb	r23,0(r22)
   24680:	d9800517 	ldw	r6,20(sp)
   24684:	d9000f17 	ldw	r4,60(sp)
   24688:	b5800044 	addi	r22,r22,1
   2468c:	3105883a 	add	r2,r6,r4
   24690:	b0806526 	beq	r22,r2,24828 <_dtoa_r+0xb80>
   24694:	d9400717 	ldw	r5,28(sp)
   24698:	d9001617 	ldw	r4,88(sp)
   2469c:	01800284 	movi	r6,10
   246a0:	000f883a 	mov	r7,zero
   246a4:	00273a40 	call	273a4 <__multadd>
   246a8:	d8800715 	stw	r2,28(sp)
   246ac:	d8800617 	ldw	r2,24(sp)
   246b0:	14c10c26 	beq	r2,r19,24ae4 <_dtoa_r+0xe3c>
   246b4:	d9400617 	ldw	r5,24(sp)
   246b8:	d9001617 	ldw	r4,88(sp)
   246bc:	01800284 	movi	r6,10
   246c0:	000f883a 	mov	r7,zero
   246c4:	00273a40 	call	273a4 <__multadd>
   246c8:	d9001617 	ldw	r4,88(sp)
   246cc:	980b883a 	mov	r5,r19
   246d0:	01800284 	movi	r6,10
   246d4:	000f883a 	mov	r7,zero
   246d8:	d8800615 	stw	r2,24(sp)
   246dc:	00273a40 	call	273a4 <__multadd>
   246e0:	1027883a 	mov	r19,r2
   246e4:	003fc206 	br	245f0 <_dtoa_r+0x948>
   246e8:	2445c83a 	sub	r2,r4,r17
   246ec:	a088983a 	sll	r4,r20,r2
   246f0:	003e4b06 	br	24020 <_dtoa_r+0x378>
   246f4:	01bfffc4 	movi	r6,-1
   246f8:	00800044 	movi	r2,1
   246fc:	d9800e15 	stw	r6,56(sp)
   24700:	d9800f15 	stw	r6,60(sp)
   24704:	d8800b15 	stw	r2,44(sp)
   24708:	d8c01617 	ldw	r3,88(sp)
   2470c:	008005c4 	movi	r2,23
   24710:	18001115 	stw	zero,68(r3)
   24714:	1580082e 	bgeu	r2,r22,24738 <_dtoa_r+0xa90>
   24718:	00c00104 	movi	r3,4
   2471c:	0009883a 	mov	r4,zero
   24720:	18c7883a 	add	r3,r3,r3
   24724:	18800504 	addi	r2,r3,20
   24728:	21000044 	addi	r4,r4,1
   2472c:	b0bffc2e 	bgeu	r22,r2,24720 <_dtoa_r+0xa78>
   24730:	d9801617 	ldw	r6,88(sp)
   24734:	31001115 	stw	r4,68(r6)
   24738:	dc000f17 	ldw	r16,60(sp)
   2473c:	003e4b06 	br	2406c <_dtoa_r+0x3c4>
   24740:	d9801717 	ldw	r6,92(sp)
   24744:	0023883a 	mov	r17,zero
   24748:	31bfff04 	addi	r6,r6,-4
   2474c:	d9801715 	stw	r6,92(sp)
   24750:	003df806 	br	23f34 <_dtoa_r+0x28c>
   24754:	00800804 	movi	r2,32
   24758:	10c9c83a 	sub	r4,r2,r3
   2475c:	00c00104 	movi	r3,4
   24760:	19005a16 	blt	r3,r4,248cc <_dtoa_r+0xc24>
   24764:	008000c4 	movi	r2,3
   24768:	113f7e16 	blt	r2,r4,24564 <_dtoa_r+0x8bc>
   2476c:	20800704 	addi	r2,r4,28
   24770:	003f7506 	br	24548 <_dtoa_r+0x8a0>
   24774:	d9801717 	ldw	r6,92(sp)
   24778:	00800044 	movi	r2,1
   2477c:	1180a10e 	bge	r2,r6,24a04 <_dtoa_r+0xd5c>
   24780:	d9800f17 	ldw	r6,60(sp)
   24784:	d8c01017 	ldw	r3,64(sp)
   24788:	30bfffc4 	addi	r2,r6,-1
   2478c:	1881c616 	blt	r3,r2,24ea8 <_dtoa_r+0x1200>
   24790:	18a5c83a 	sub	r18,r3,r2
   24794:	d8800f17 	ldw	r2,60(sp)
   24798:	10026216 	blt	r2,zero,25124 <_dtoa_r+0x147c>
   2479c:	dc001117 	ldw	r16,68(sp)
   247a0:	1007883a 	mov	r3,r2
   247a4:	d9800a17 	ldw	r6,40(sp)
   247a8:	d8801117 	ldw	r2,68(sp)
   247ac:	d9001617 	ldw	r4,88(sp)
   247b0:	30cd883a 	add	r6,r6,r3
   247b4:	10c5883a 	add	r2,r2,r3
   247b8:	01400044 	movi	r5,1
   247bc:	d9800a15 	stw	r6,40(sp)
   247c0:	d8801115 	stw	r2,68(sp)
   247c4:	00273680 	call	27368 <__i2b>
   247c8:	1027883a 	mov	r19,r2
   247cc:	003f2506 	br	24464 <_dtoa_r+0x7bc>
   247d0:	00c000f4 	movhi	r3,3
   247d4:	18fad004 	addi	r3,r3,-5312
   247d8:	003d6706 	br	23d78 <_dtoa_r+0xd0>
   247dc:	dd800517 	ldw	r22,20(sp)
   247e0:	04000044 	movi	r16,1
   247e4:	00000706 	br	24804 <_dtoa_r+0xb5c>
   247e8:	d9400717 	ldw	r5,28(sp)
   247ec:	d9001617 	ldw	r4,88(sp)
   247f0:	01800284 	movi	r6,10
   247f4:	000f883a 	mov	r7,zero
   247f8:	00273a40 	call	273a4 <__multadd>
   247fc:	d8800715 	stw	r2,28(sp)
   24800:	84000044 	addi	r16,r16,1
   24804:	d9000717 	ldw	r4,28(sp)
   24808:	900b883a 	mov	r5,r18
   2480c:	0023a900 	call	23a90 <quorem>
   24810:	15c00c04 	addi	r23,r2,48
   24814:	b5c00005 	stb	r23,0(r22)
   24818:	d8c00f17 	ldw	r3,60(sp)
   2481c:	b5800044 	addi	r22,r22,1
   24820:	80fff116 	blt	r16,r3,247e8 <_dtoa_r+0xb40>
   24824:	d8000615 	stw	zero,24(sp)
   24828:	d9400717 	ldw	r5,28(sp)
   2482c:	d9001617 	ldw	r4,88(sp)
   24830:	01800044 	movi	r6,1
   24834:	00270340 	call	27034 <__lshift>
   24838:	1009883a 	mov	r4,r2
   2483c:	900b883a 	mov	r5,r18
   24840:	d8800715 	stw	r2,28(sp)
   24844:	002684c0 	call	2684c <__mcmp>
   24848:	00803c0e 	bge	zero,r2,2493c <_dtoa_r+0xc94>
   2484c:	b009883a 	mov	r4,r22
   24850:	213fffc4 	addi	r4,r4,-1
   24854:	21400003 	ldbu	r5,0(r4)
   24858:	00800e44 	movi	r2,57
   2485c:	28c03fcc 	andi	r3,r5,255
   24860:	18c0201c 	xori	r3,r3,128
   24864:	18ffe004 	addi	r3,r3,-128
   24868:	1881981e 	bne	r3,r2,24ecc <_dtoa_r+0x1224>
   2486c:	d9800517 	ldw	r6,20(sp)
   24870:	21bff71e 	bne	r4,r6,24850 <_dtoa_r+0xba8>
   24874:	d8800d17 	ldw	r2,52(sp)
   24878:	37000044 	addi	fp,r6,1
   2487c:	10800044 	addi	r2,r2,1
   24880:	d8800d15 	stw	r2,52(sp)
   24884:	00800c44 	movi	r2,49
   24888:	30800005 	stb	r2,0(r6)
   2488c:	d9001617 	ldw	r4,88(sp)
   24890:	900b883a 	mov	r5,r18
   24894:	00266f00 	call	266f0 <_Bfree>
   24898:	983ecd26 	beq	r19,zero,243d0 <_dtoa_r+0x728>
   2489c:	d8c00617 	ldw	r3,24(sp)
   248a0:	18000426 	beq	r3,zero,248b4 <_dtoa_r+0xc0c>
   248a4:	1cc00326 	beq	r3,r19,248b4 <_dtoa_r+0xc0c>
   248a8:	d9001617 	ldw	r4,88(sp)
   248ac:	180b883a 	mov	r5,r3
   248b0:	00266f00 	call	266f0 <_Bfree>
   248b4:	d9001617 	ldw	r4,88(sp)
   248b8:	980b883a 	mov	r5,r19
   248bc:	00266f00 	call	266f0 <_Bfree>
   248c0:	003ec306 	br	243d0 <_dtoa_r+0x728>
   248c4:	1805883a 	mov	r2,r3
   248c8:	003eeb06 	br	24478 <_dtoa_r+0x7d0>
   248cc:	d9800a17 	ldw	r6,40(sp)
   248d0:	d8c01117 	ldw	r3,68(sp)
   248d4:	20bfff04 	addi	r2,r4,-4
   248d8:	308d883a 	add	r6,r6,r2
   248dc:	1887883a 	add	r3,r3,r2
   248e0:	80a1883a 	add	r16,r16,r2
   248e4:	d9800a15 	stw	r6,40(sp)
   248e8:	d8c01115 	stw	r3,68(sp)
   248ec:	003f1d06 	br	24564 <_dtoa_r+0x8bc>
   248f0:	a03f0c1e 	bne	r20,zero,24524 <_dtoa_r+0x87c>
   248f4:	00800434 	movhi	r2,16
   248f8:	10bfffc4 	addi	r2,r2,-1
   248fc:	a884703a 	and	r2,r21,r2
   24900:	103f081e 	bne	r2,zero,24524 <_dtoa_r+0x87c>
   24904:	a89ffc2c 	andhi	r2,r21,32752
   24908:	103f0626 	beq	r2,zero,24524 <_dtoa_r+0x87c>
   2490c:	d8c01117 	ldw	r3,68(sp)
   24910:	d9000a17 	ldw	r4,40(sp)
   24914:	18c00044 	addi	r3,r3,1
   24918:	21000044 	addi	r4,r4,1
   2491c:	d8c01115 	stw	r3,68(sp)
   24920:	d9000a15 	stw	r4,40(sp)
   24924:	003f0006 	br	24528 <_dtoa_r+0x880>
   24928:	d9400717 	ldw	r5,28(sp)
   2492c:	d9001617 	ldw	r4,88(sp)
   24930:	00274a40 	call	274a4 <__pow5mult>
   24934:	d8800715 	stw	r2,28(sp)
   24938:	003eed06 	br	244f0 <_dtoa_r+0x848>
   2493c:	1000021e 	bne	r2,zero,24948 <_dtoa_r+0xca0>
   24940:	b880004c 	andi	r2,r23,1
   24944:	103fc11e 	bne	r2,zero,2484c <_dtoa_r+0xba4>
   24948:	b5bfffc4 	addi	r22,r22,-1
   2494c:	b0c00007 	ldb	r3,0(r22)
   24950:	00800c04 	movi	r2,48
   24954:	18bffc26 	beq	r3,r2,24948 <_dtoa_r+0xca0>
   24958:	b7000044 	addi	fp,r22,1
   2495c:	003fcb06 	br	2488c <_dtoa_r+0xbe4>
   24960:	d9800d17 	ldw	r6,52(sp)
   24964:	018fc83a 	sub	r7,zero,r6
   24968:	3801f726 	beq	r7,zero,25148 <_dtoa_r+0x14a0>
   2496c:	398003cc 	andi	r6,r7,15
   24970:	300c90fa 	slli	r6,r6,3
   24974:	014000f4 	movhi	r5,3
   24978:	297aed04 	addi	r5,r5,-5196
   2497c:	d9001217 	ldw	r4,72(sp)
   24980:	314d883a 	add	r6,r6,r5
   24984:	30c00117 	ldw	r3,4(r6)
   24988:	30800017 	ldw	r2,0(r6)
   2498c:	d9401317 	ldw	r5,76(sp)
   24990:	3821d13a 	srai	r16,r7,4
   24994:	100d883a 	mov	r6,r2
   24998:	180f883a 	mov	r7,r3
   2499c:	00290e40 	call	290e4 <__muldf3>
   249a0:	1011883a 	mov	r8,r2
   249a4:	1813883a 	mov	r9,r3
   249a8:	1029883a 	mov	r20,r2
   249ac:	182b883a 	mov	r21,r3
   249b0:	8001e526 	beq	r16,zero,25148 <_dtoa_r+0x14a0>
   249b4:	05800084 	movi	r22,2
   249b8:	044000f4 	movhi	r17,3
   249bc:	8c7b1f04 	addi	r17,r17,-4996
   249c0:	8080004c 	andi	r2,r16,1
   249c4:	1005003a 	cmpeq	r2,r2,zero
   249c8:	1000081e 	bne	r2,zero,249ec <_dtoa_r+0xd44>
   249cc:	89800017 	ldw	r6,0(r17)
   249d0:	89c00117 	ldw	r7,4(r17)
   249d4:	480b883a 	mov	r5,r9
   249d8:	4009883a 	mov	r4,r8
   249dc:	00290e40 	call	290e4 <__muldf3>
   249e0:	1011883a 	mov	r8,r2
   249e4:	b5800044 	addi	r22,r22,1
   249e8:	1813883a 	mov	r9,r3
   249ec:	8021d07a 	srai	r16,r16,1
   249f0:	8c400204 	addi	r17,r17,8
   249f4:	803ff21e 	bne	r16,zero,249c0 <_dtoa_r+0xd18>
   249f8:	4029883a 	mov	r20,r8
   249fc:	482b883a 	mov	r21,r9
   24a00:	003dca06 	br	2412c <_dtoa_r+0x484>
   24a04:	d9000817 	ldw	r4,32(sp)
   24a08:	2005003a 	cmpeq	r2,r4,zero
   24a0c:	1001f61e 	bne	r2,zero,251e8 <_dtoa_r+0x1540>
   24a10:	dc001117 	ldw	r16,68(sp)
   24a14:	dc801017 	ldw	r18,64(sp)
   24a18:	18c10cc4 	addi	r3,r3,1075
   24a1c:	003f6106 	br	247a4 <_dtoa_r+0xafc>
   24a20:	d8000b15 	stw	zero,44(sp)
   24a24:	d9802617 	ldw	r6,152(sp)
   24a28:	d8c00d17 	ldw	r3,52(sp)
   24a2c:	30800044 	addi	r2,r6,1
   24a30:	18ad883a 	add	r22,r3,r2
   24a34:	b13fffc4 	addi	r4,r22,-1
   24a38:	d9000e15 	stw	r4,56(sp)
   24a3c:	0581f60e 	bge	zero,r22,25218 <_dtoa_r+0x1570>
   24a40:	dd800f15 	stw	r22,60(sp)
   24a44:	003f3006 	br	24708 <_dtoa_r+0xa60>
   24a48:	d8000b15 	stw	zero,44(sp)
   24a4c:	d9002617 	ldw	r4,152(sp)
   24a50:	0101eb0e 	bge	zero,r4,25200 <_dtoa_r+0x1558>
   24a54:	202d883a 	mov	r22,r4
   24a58:	d9000e15 	stw	r4,56(sp)
   24a5c:	d9000f15 	stw	r4,60(sp)
   24a60:	003f2906 	br	24708 <_dtoa_r+0xa60>
   24a64:	01800044 	movi	r6,1
   24a68:	d9800b15 	stw	r6,44(sp)
   24a6c:	003ff706 	br	24a4c <_dtoa_r+0xda4>
   24a70:	01000044 	movi	r4,1
   24a74:	d9000b15 	stw	r4,44(sp)
   24a78:	003fea06 	br	24a24 <_dtoa_r+0xd7c>
   24a7c:	04000c0e 	bge	zero,r16,24ab0 <_dtoa_r+0xe08>
   24a80:	d9400717 	ldw	r5,28(sp)
   24a84:	d9001617 	ldw	r4,88(sp)
   24a88:	01800044 	movi	r6,1
   24a8c:	00270340 	call	27034 <__lshift>
   24a90:	1009883a 	mov	r4,r2
   24a94:	900b883a 	mov	r5,r18
   24a98:	d8800715 	stw	r2,28(sp)
   24a9c:	002684c0 	call	2684c <__mcmp>
   24aa0:	0081e00e 	bge	zero,r2,25224 <_dtoa_r+0x157c>
   24aa4:	bdc00044 	addi	r23,r23,1
   24aa8:	00800e84 	movi	r2,58
   24aac:	b881a226 	beq	r23,r2,25138 <_dtoa_r+0x1490>
   24ab0:	b7000044 	addi	fp,r22,1
   24ab4:	b5c00005 	stb	r23,0(r22)
   24ab8:	003f7406 	br	2488c <_dtoa_r+0xbe4>
   24abc:	00800e44 	movi	r2,57
   24ac0:	b8819d26 	beq	r23,r2,25138 <_dtoa_r+0x1490>
   24ac4:	053ffa0e 	bge	zero,r20,24ab0 <_dtoa_r+0xe08>
   24ac8:	8dc00c44 	addi	r23,r17,49
   24acc:	003ff806 	br	24ab0 <_dtoa_r+0xe08>
   24ad0:	d9001617 	ldw	r4,88(sp)
   24ad4:	a80b883a 	mov	r5,r21
   24ad8:	04000044 	movi	r16,1
   24adc:	00266f00 	call	266f0 <_Bfree>
   24ae0:	003edf06 	br	24660 <_dtoa_r+0x9b8>
   24ae4:	d9001617 	ldw	r4,88(sp)
   24ae8:	980b883a 	mov	r5,r19
   24aec:	01800284 	movi	r6,10
   24af0:	000f883a 	mov	r7,zero
   24af4:	00273a40 	call	273a4 <__multadd>
   24af8:	1027883a 	mov	r19,r2
   24afc:	d8800615 	stw	r2,24(sp)
   24b00:	003ebb06 	br	245f0 <_dtoa_r+0x948>
   24b04:	d9801117 	ldw	r6,68(sp)
   24b08:	d8800d17 	ldw	r2,52(sp)
   24b0c:	d8000915 	stw	zero,36(sp)
   24b10:	308dc83a 	sub	r6,r6,r2
   24b14:	0087c83a 	sub	r3,zero,r2
   24b18:	d9801115 	stw	r6,68(sp)
   24b1c:	d8c01015 	stw	r3,64(sp)
   24b20:	003cfe06 	br	23f1c <_dtoa_r+0x274>
   24b24:	018dc83a 	sub	r6,zero,r6
   24b28:	d9801115 	stw	r6,68(sp)
   24b2c:	d8000a15 	stw	zero,40(sp)
   24b30:	003cf306 	br	23f00 <_dtoa_r+0x258>
   24b34:	d9000d17 	ldw	r4,52(sp)
   24b38:	00299a80 	call	299a8 <__floatsidf>
   24b3c:	880b883a 	mov	r5,r17
   24b40:	8009883a 	mov	r4,r16
   24b44:	180f883a 	mov	r7,r3
   24b48:	100d883a 	mov	r6,r2
   24b4c:	00297880 	call	29788 <__nedf2>
   24b50:	103ce126 	beq	r2,zero,23ed8 <_dtoa_r+0x230>
   24b54:	d9800d17 	ldw	r6,52(sp)
   24b58:	31bfffc4 	addi	r6,r6,-1
   24b5c:	d9800d15 	stw	r6,52(sp)
   24b60:	003cdd06 	br	23ed8 <_dtoa_r+0x230>
   24b64:	d9000717 	ldw	r4,28(sp)
   24b68:	900b883a 	mov	r5,r18
   24b6c:	002684c0 	call	2684c <__mcmp>
   24b70:	103e8d0e 	bge	r2,zero,245a8 <_dtoa_r+0x900>
   24b74:	d9400717 	ldw	r5,28(sp)
   24b78:	d9001617 	ldw	r4,88(sp)
   24b7c:	01800284 	movi	r6,10
   24b80:	000f883a 	mov	r7,zero
   24b84:	00273a40 	call	273a4 <__multadd>
   24b88:	d9800d17 	ldw	r6,52(sp)
   24b8c:	d8800715 	stw	r2,28(sp)
   24b90:	31bfffc4 	addi	r6,r6,-1
   24b94:	d9800d15 	stw	r6,52(sp)
   24b98:	b001a71e 	bne	r22,zero,25238 <_dtoa_r+0x1590>
   24b9c:	d8800e17 	ldw	r2,56(sp)
   24ba0:	d8800f15 	stw	r2,60(sp)
   24ba4:	003e8006 	br	245a8 <_dtoa_r+0x900>
   24ba8:	90800417 	ldw	r2,16(r18)
   24bac:	1085883a 	add	r2,r2,r2
   24bb0:	1085883a 	add	r2,r2,r2
   24bb4:	1485883a 	add	r2,r2,r18
   24bb8:	11000417 	ldw	r4,16(r2)
   24bbc:	00267180 	call	26718 <__hi0bits>
   24bc0:	00c00804 	movi	r3,32
   24bc4:	1887c83a 	sub	r3,r3,r2
   24bc8:	003e5a06 	br	24534 <_dtoa_r+0x88c>
   24bcc:	d9400717 	ldw	r5,28(sp)
   24bd0:	d9801017 	ldw	r6,64(sp)
   24bd4:	d9001617 	ldw	r4,88(sp)
   24bd8:	00274a40 	call	274a4 <__pow5mult>
   24bdc:	d8800715 	stw	r2,28(sp)
   24be0:	003e4306 	br	244f0 <_dtoa_r+0x848>
   24be4:	d9800f17 	ldw	r6,60(sp)
   24be8:	d8800d17 	ldw	r2,52(sp)
   24bec:	d9800315 	stw	r6,12(sp)
   24bf0:	d8800415 	stw	r2,16(sp)
   24bf4:	d8c00b17 	ldw	r3,44(sp)
   24bf8:	1805003a 	cmpeq	r2,r3,zero
   24bfc:	1000e21e 	bne	r2,zero,24f88 <_dtoa_r+0x12e0>
   24c00:	d9000317 	ldw	r4,12(sp)
   24c04:	0005883a 	mov	r2,zero
   24c08:	00cff834 	movhi	r3,16352
   24c0c:	200c90fa 	slli	r6,r4,3
   24c10:	010000f4 	movhi	r4,3
   24c14:	213aed04 	addi	r4,r4,-5196
   24c18:	180b883a 	mov	r5,r3
   24c1c:	310d883a 	add	r6,r6,r4
   24c20:	327fff17 	ldw	r9,-4(r6)
   24c24:	323ffe17 	ldw	r8,-8(r6)
   24c28:	1009883a 	mov	r4,r2
   24c2c:	480f883a 	mov	r7,r9
   24c30:	400d883a 	mov	r6,r8
   24c34:	00294a80 	call	294a8 <__divdf3>
   24c38:	180b883a 	mov	r5,r3
   24c3c:	b00d883a 	mov	r6,r22
   24c40:	b80f883a 	mov	r7,r23
   24c44:	1009883a 	mov	r4,r2
   24c48:	0028ff00 	call	28ff0 <__subdf3>
   24c4c:	a80b883a 	mov	r5,r21
   24c50:	a009883a 	mov	r4,r20
   24c54:	d8c01915 	stw	r3,100(sp)
   24c58:	d8801815 	stw	r2,96(sp)
   24c5c:	0029aa00 	call	29aa0 <__fixdfsi>
   24c60:	1009883a 	mov	r4,r2
   24c64:	1027883a 	mov	r19,r2
   24c68:	00299a80 	call	299a8 <__floatsidf>
   24c6c:	a80b883a 	mov	r5,r21
   24c70:	a009883a 	mov	r4,r20
   24c74:	180f883a 	mov	r7,r3
   24c78:	100d883a 	mov	r6,r2
   24c7c:	0028ff00 	call	28ff0 <__subdf3>
   24c80:	d9801817 	ldw	r6,96(sp)
   24c84:	1823883a 	mov	r17,r3
   24c88:	d8801415 	stw	r2,80(sp)
   24c8c:	302d883a 	mov	r22,r6
   24c90:	d9800517 	ldw	r6,20(sp)
   24c94:	9cc00c04 	addi	r19,r19,48
   24c98:	dc401515 	stw	r17,84(sp)
   24c9c:	d8c01917 	ldw	r3,100(sp)
   24ca0:	34c00005 	stb	r19,0(r6)
   24ca4:	d8800517 	ldw	r2,20(sp)
   24ca8:	d9401917 	ldw	r5,100(sp)
   24cac:	d9801417 	ldw	r6,80(sp)
   24cb0:	b009883a 	mov	r4,r22
   24cb4:	880f883a 	mov	r7,r17
   24cb8:	182f883a 	mov	r23,r3
   24cbc:	17000044 	addi	fp,r2,1
   24cc0:	00298100 	call	29810 <__gtdf2>
   24cc4:	00804e16 	blt	zero,r2,24e00 <_dtoa_r+0x1158>
   24cc8:	d9801417 	ldw	r6,80(sp)
   24ccc:	0005883a 	mov	r2,zero
   24cd0:	00cffc34 	movhi	r3,16368
   24cd4:	180b883a 	mov	r5,r3
   24cd8:	880f883a 	mov	r7,r17
   24cdc:	1009883a 	mov	r4,r2
   24ce0:	0028ff00 	call	28ff0 <__subdf3>
   24ce4:	d9401917 	ldw	r5,100(sp)
   24ce8:	180f883a 	mov	r7,r3
   24cec:	b009883a 	mov	r4,r22
   24cf0:	100d883a 	mov	r6,r2
   24cf4:	00298100 	call	29810 <__gtdf2>
   24cf8:	00bda216 	blt	zero,r2,24384 <_dtoa_r+0x6dc>
   24cfc:	d8c00317 	ldw	r3,12(sp)
   24d00:	00800044 	movi	r2,1
   24d04:	10c01216 	blt	r2,r3,24d50 <_dtoa_r+0x10a8>
   24d08:	003d4506 	br	24220 <_dtoa_r+0x578>
   24d0c:	d9801417 	ldw	r6,80(sp)
   24d10:	0005883a 	mov	r2,zero
   24d14:	00cffc34 	movhi	r3,16368
   24d18:	180b883a 	mov	r5,r3
   24d1c:	880f883a 	mov	r7,r17
   24d20:	1009883a 	mov	r4,r2
   24d24:	0028ff00 	call	28ff0 <__subdf3>
   24d28:	d9c01b17 	ldw	r7,108(sp)
   24d2c:	180b883a 	mov	r5,r3
   24d30:	1009883a 	mov	r4,r2
   24d34:	b00d883a 	mov	r6,r22
   24d38:	00299200 	call	29920 <__ltdf2>
   24d3c:	103d9116 	blt	r2,zero,24384 <_dtoa_r+0x6dc>
   24d40:	d9800517 	ldw	r6,20(sp)
   24d44:	d9000317 	ldw	r4,12(sp)
   24d48:	3105883a 	add	r2,r6,r4
   24d4c:	e0bd3426 	beq	fp,r2,24220 <_dtoa_r+0x578>
   24d50:	04500934 	movhi	r17,16420
   24d54:	0021883a 	mov	r16,zero
   24d58:	b80b883a 	mov	r5,r23
   24d5c:	b009883a 	mov	r4,r22
   24d60:	800d883a 	mov	r6,r16
   24d64:	880f883a 	mov	r7,r17
   24d68:	00290e40 	call	290e4 <__muldf3>
   24d6c:	d9401517 	ldw	r5,84(sp)
   24d70:	d9001417 	ldw	r4,80(sp)
   24d74:	880f883a 	mov	r7,r17
   24d78:	000d883a 	mov	r6,zero
   24d7c:	d8801a15 	stw	r2,104(sp)
   24d80:	d8c01b15 	stw	r3,108(sp)
   24d84:	00290e40 	call	290e4 <__muldf3>
   24d88:	180b883a 	mov	r5,r3
   24d8c:	1009883a 	mov	r4,r2
   24d90:	1823883a 	mov	r17,r3
   24d94:	1021883a 	mov	r16,r2
   24d98:	0029aa00 	call	29aa0 <__fixdfsi>
   24d9c:	1009883a 	mov	r4,r2
   24da0:	102b883a 	mov	r21,r2
   24da4:	00299a80 	call	299a8 <__floatsidf>
   24da8:	880b883a 	mov	r5,r17
   24dac:	8009883a 	mov	r4,r16
   24db0:	180f883a 	mov	r7,r3
   24db4:	100d883a 	mov	r6,r2
   24db8:	0028ff00 	call	28ff0 <__subdf3>
   24dbc:	1021883a 	mov	r16,r2
   24dc0:	d9001b17 	ldw	r4,108(sp)
   24dc4:	1823883a 	mov	r17,r3
   24dc8:	dc001415 	stw	r16,80(sp)
   24dcc:	ad400c04 	addi	r21,r21,48
   24dd0:	dc401515 	stw	r17,84(sp)
   24dd4:	d8801a17 	ldw	r2,104(sp)
   24dd8:	e5400005 	stb	r21,0(fp)
   24ddc:	202f883a 	mov	r23,r4
   24de0:	d9c01b17 	ldw	r7,108(sp)
   24de4:	d9001417 	ldw	r4,80(sp)
   24de8:	880b883a 	mov	r5,r17
   24dec:	100d883a 	mov	r6,r2
   24df0:	102d883a 	mov	r22,r2
   24df4:	e7000044 	addi	fp,fp,1
   24df8:	00299200 	call	29920 <__ltdf2>
   24dfc:	103fc30e 	bge	r2,zero,24d0c <_dtoa_r+0x1064>
   24e00:	d9000417 	ldw	r4,16(sp)
   24e04:	d9000d15 	stw	r4,52(sp)
   24e08:	003d7106 	br	243d0 <_dtoa_r+0x728>
   24e0c:	d9801717 	ldw	r6,92(sp)
   24e10:	00800084 	movi	r2,2
   24e14:	11bde60e 	bge	r2,r6,245b0 <_dtoa_r+0x908>
   24e18:	203cfb1e 	bne	r4,zero,24208 <_dtoa_r+0x560>
   24e1c:	d9001617 	ldw	r4,88(sp)
   24e20:	900b883a 	mov	r5,r18
   24e24:	01800144 	movi	r6,5
   24e28:	000f883a 	mov	r7,zero
   24e2c:	00273a40 	call	273a4 <__multadd>
   24e30:	d9000717 	ldw	r4,28(sp)
   24e34:	100b883a 	mov	r5,r2
   24e38:	1025883a 	mov	r18,r2
   24e3c:	002684c0 	call	2684c <__mcmp>
   24e40:	00bcf10e 	bge	zero,r2,24208 <_dtoa_r+0x560>
   24e44:	d8c00d17 	ldw	r3,52(sp)
   24e48:	d9000517 	ldw	r4,20(sp)
   24e4c:	d8000615 	stw	zero,24(sp)
   24e50:	18c00044 	addi	r3,r3,1
   24e54:	d8c00d15 	stw	r3,52(sp)
   24e58:	00800c44 	movi	r2,49
   24e5c:	27000044 	addi	fp,r4,1
   24e60:	20800005 	stb	r2,0(r4)
   24e64:	003e8906 	br	2488c <_dtoa_r+0xbe4>
   24e68:	d8c00517 	ldw	r3,20(sp)
   24e6c:	003bc206 	br	23d78 <_dtoa_r+0xd0>
   24e70:	018000f4 	movhi	r6,3
   24e74:	31bb1f04 	addi	r6,r6,-4996
   24e78:	30c00917 	ldw	r3,36(r6)
   24e7c:	30800817 	ldw	r2,32(r6)
   24e80:	d9001217 	ldw	r4,72(sp)
   24e84:	d9401317 	ldw	r5,76(sp)
   24e88:	180f883a 	mov	r7,r3
   24e8c:	100d883a 	mov	r6,r2
   24e90:	00294a80 	call	294a8 <__divdf3>
   24e94:	948003cc 	andi	r18,r18,15
   24e98:	058000c4 	movi	r22,3
   24e9c:	1029883a 	mov	r20,r2
   24ea0:	182b883a 	mov	r21,r3
   24ea4:	003c8906 	br	240cc <_dtoa_r+0x424>
   24ea8:	d9001017 	ldw	r4,64(sp)
   24eac:	d9800917 	ldw	r6,36(sp)
   24eb0:	0025883a 	mov	r18,zero
   24eb4:	1105c83a 	sub	r2,r2,r4
   24eb8:	2089883a 	add	r4,r4,r2
   24ebc:	308d883a 	add	r6,r6,r2
   24ec0:	d9001015 	stw	r4,64(sp)
   24ec4:	d9800915 	stw	r6,36(sp)
   24ec8:	003e3206 	br	24794 <_dtoa_r+0xaec>
   24ecc:	28800044 	addi	r2,r5,1
   24ed0:	27000044 	addi	fp,r4,1
   24ed4:	20800005 	stb	r2,0(r4)
   24ed8:	003e6c06 	br	2488c <_dtoa_r+0xbe4>
   24edc:	d8800f17 	ldw	r2,60(sp)
   24ee0:	00bce016 	blt	zero,r2,24264 <_dtoa_r+0x5bc>
   24ee4:	d9800f17 	ldw	r6,60(sp)
   24ee8:	303cc51e 	bne	r6,zero,24200 <_dtoa_r+0x558>
   24eec:	0005883a 	mov	r2,zero
   24ef0:	00d00534 	movhi	r3,16404
   24ef4:	980b883a 	mov	r5,r19
   24ef8:	180f883a 	mov	r7,r3
   24efc:	9009883a 	mov	r4,r18
   24f00:	100d883a 	mov	r6,r2
   24f04:	00290e40 	call	290e4 <__muldf3>
   24f08:	180b883a 	mov	r5,r3
   24f0c:	a80f883a 	mov	r7,r21
   24f10:	1009883a 	mov	r4,r2
   24f14:	a00d883a 	mov	r6,r20
   24f18:	00298980 	call	29898 <__gedf2>
   24f1c:	103cb80e 	bge	r2,zero,24200 <_dtoa_r+0x558>
   24f20:	0027883a 	mov	r19,zero
   24f24:	0025883a 	mov	r18,zero
   24f28:	003fc606 	br	24e44 <_dtoa_r+0x119c>
   24f2c:	99400117 	ldw	r5,4(r19)
   24f30:	d9001617 	ldw	r4,88(sp)
   24f34:	0026c700 	call	26c70 <_Balloc>
   24f38:	99800417 	ldw	r6,16(r19)
   24f3c:	11000304 	addi	r4,r2,12
   24f40:	99400304 	addi	r5,r19,12
   24f44:	318d883a 	add	r6,r6,r6
   24f48:	318d883a 	add	r6,r6,r6
   24f4c:	31800204 	addi	r6,r6,8
   24f50:	1023883a 	mov	r17,r2
   24f54:	00264d80 	call	264d8 <memcpy>
   24f58:	d9001617 	ldw	r4,88(sp)
   24f5c:	880b883a 	mov	r5,r17
   24f60:	01800044 	movi	r6,1
   24f64:	00270340 	call	27034 <__lshift>
   24f68:	100b883a 	mov	r5,r2
   24f6c:	003d9c06 	br	245e0 <_dtoa_r+0x938>
   24f70:	00800e44 	movi	r2,57
   24f74:	b8807026 	beq	r23,r2,25138 <_dtoa_r+0x1490>
   24f78:	b8800044 	addi	r2,r23,1
   24f7c:	b7000044 	addi	fp,r22,1
   24f80:	b0800005 	stb	r2,0(r22)
   24f84:	003e4106 	br	2488c <_dtoa_r+0xbe4>
   24f88:	d8800317 	ldw	r2,12(sp)
   24f8c:	018000f4 	movhi	r6,3
   24f90:	31baed04 	addi	r6,r6,-5196
   24f94:	b009883a 	mov	r4,r22
   24f98:	100e90fa 	slli	r7,r2,3
   24f9c:	b80b883a 	mov	r5,r23
   24fa0:	398f883a 	add	r7,r7,r6
   24fa4:	38bffe17 	ldw	r2,-8(r7)
   24fa8:	d9800517 	ldw	r6,20(sp)
   24fac:	38ffff17 	ldw	r3,-4(r7)
   24fb0:	37000044 	addi	fp,r6,1
   24fb4:	180f883a 	mov	r7,r3
   24fb8:	100d883a 	mov	r6,r2
   24fbc:	00290e40 	call	290e4 <__muldf3>
   24fc0:	a80b883a 	mov	r5,r21
   24fc4:	a009883a 	mov	r4,r20
   24fc8:	182f883a 	mov	r23,r3
   24fcc:	102d883a 	mov	r22,r2
   24fd0:	0029aa00 	call	29aa0 <__fixdfsi>
   24fd4:	1009883a 	mov	r4,r2
   24fd8:	1027883a 	mov	r19,r2
   24fdc:	00299a80 	call	299a8 <__floatsidf>
   24fe0:	a80b883a 	mov	r5,r21
   24fe4:	a009883a 	mov	r4,r20
   24fe8:	180f883a 	mov	r7,r3
   24fec:	100d883a 	mov	r6,r2
   24ff0:	0028ff00 	call	28ff0 <__subdf3>
   24ff4:	180b883a 	mov	r5,r3
   24ff8:	d8c00517 	ldw	r3,20(sp)
   24ffc:	9cc00c04 	addi	r19,r19,48
   25000:	1009883a 	mov	r4,r2
   25004:	1cc00005 	stb	r19,0(r3)
   25008:	2021883a 	mov	r16,r4
   2500c:	d9000317 	ldw	r4,12(sp)
   25010:	00800044 	movi	r2,1
   25014:	2823883a 	mov	r17,r5
   25018:	20802226 	beq	r4,r2,250a4 <_dtoa_r+0x13fc>
   2501c:	1029883a 	mov	r20,r2
   25020:	0005883a 	mov	r2,zero
   25024:	00d00934 	movhi	r3,16420
   25028:	180f883a 	mov	r7,r3
   2502c:	100d883a 	mov	r6,r2
   25030:	880b883a 	mov	r5,r17
   25034:	8009883a 	mov	r4,r16
   25038:	00290e40 	call	290e4 <__muldf3>
   2503c:	180b883a 	mov	r5,r3
   25040:	1009883a 	mov	r4,r2
   25044:	1823883a 	mov	r17,r3
   25048:	1021883a 	mov	r16,r2
   2504c:	0029aa00 	call	29aa0 <__fixdfsi>
   25050:	1009883a 	mov	r4,r2
   25054:	102b883a 	mov	r21,r2
   25058:	00299a80 	call	299a8 <__floatsidf>
   2505c:	880b883a 	mov	r5,r17
   25060:	8009883a 	mov	r4,r16
   25064:	180f883a 	mov	r7,r3
   25068:	100d883a 	mov	r6,r2
   2506c:	0028ff00 	call	28ff0 <__subdf3>
   25070:	180b883a 	mov	r5,r3
   25074:	d8c00517 	ldw	r3,20(sp)
   25078:	1009883a 	mov	r4,r2
   2507c:	ad400c04 	addi	r21,r21,48
   25080:	1d05883a 	add	r2,r3,r20
   25084:	15400005 	stb	r21,0(r2)
   25088:	2021883a 	mov	r16,r4
   2508c:	d9000317 	ldw	r4,12(sp)
   25090:	a5000044 	addi	r20,r20,1
   25094:	2823883a 	mov	r17,r5
   25098:	a13fe11e 	bne	r20,r4,25020 <_dtoa_r+0x1378>
   2509c:	e505883a 	add	r2,fp,r20
   250a0:	173fffc4 	addi	fp,r2,-1
   250a4:	0025883a 	mov	r18,zero
   250a8:	04cff834 	movhi	r19,16352
   250ac:	b009883a 	mov	r4,r22
   250b0:	b80b883a 	mov	r5,r23
   250b4:	900d883a 	mov	r6,r18
   250b8:	980f883a 	mov	r7,r19
   250bc:	00290700 	call	29070 <__adddf3>
   250c0:	180b883a 	mov	r5,r3
   250c4:	1009883a 	mov	r4,r2
   250c8:	800d883a 	mov	r6,r16
   250cc:	880f883a 	mov	r7,r17
   250d0:	00299200 	call	29920 <__ltdf2>
   250d4:	103cab16 	blt	r2,zero,24384 <_dtoa_r+0x6dc>
   250d8:	0009883a 	mov	r4,zero
   250dc:	980b883a 	mov	r5,r19
   250e0:	b80f883a 	mov	r7,r23
   250e4:	b00d883a 	mov	r6,r22
   250e8:	0028ff00 	call	28ff0 <__subdf3>
   250ec:	180b883a 	mov	r5,r3
   250f0:	880f883a 	mov	r7,r17
   250f4:	1009883a 	mov	r4,r2
   250f8:	800d883a 	mov	r6,r16
   250fc:	00298100 	call	29810 <__gtdf2>
   25100:	00bc470e 	bge	zero,r2,24220 <_dtoa_r+0x578>
   25104:	00c00c04 	movi	r3,48
   25108:	e73fffc4 	addi	fp,fp,-1
   2510c:	e0800007 	ldb	r2,0(fp)
   25110:	10fffd26 	beq	r2,r3,25108 <_dtoa_r+0x1460>
   25114:	d9800417 	ldw	r6,16(sp)
   25118:	e7000044 	addi	fp,fp,1
   2511c:	d9800d15 	stw	r6,52(sp)
   25120:	003cab06 	br	243d0 <_dtoa_r+0x728>
   25124:	d8c00f17 	ldw	r3,60(sp)
   25128:	d9001117 	ldw	r4,68(sp)
   2512c:	20e1c83a 	sub	r16,r4,r3
   25130:	0007883a 	mov	r3,zero
   25134:	003d9b06 	br	247a4 <_dtoa_r+0xafc>
   25138:	00800e44 	movi	r2,57
   2513c:	b0800005 	stb	r2,0(r22)
   25140:	b5800044 	addi	r22,r22,1
   25144:	003dc106 	br	2484c <_dtoa_r+0xba4>
   25148:	05800084 	movi	r22,2
   2514c:	003bf706 	br	2412c <_dtoa_r+0x484>
   25150:	d9000f17 	ldw	r4,60(sp)
   25154:	013c000e 	bge	zero,r4,24158 <_dtoa_r+0x4b0>
   25158:	d9800e17 	ldw	r6,56(sp)
   2515c:	01bc300e 	bge	zero,r6,24220 <_dtoa_r+0x578>
   25160:	0005883a 	mov	r2,zero
   25164:	00d00934 	movhi	r3,16420
   25168:	a80b883a 	mov	r5,r21
   2516c:	180f883a 	mov	r7,r3
   25170:	a009883a 	mov	r4,r20
   25174:	100d883a 	mov	r6,r2
   25178:	00290e40 	call	290e4 <__muldf3>
   2517c:	b1000044 	addi	r4,r22,1
   25180:	1021883a 	mov	r16,r2
   25184:	1823883a 	mov	r17,r3
   25188:	00299a80 	call	299a8 <__floatsidf>
   2518c:	880b883a 	mov	r5,r17
   25190:	8009883a 	mov	r4,r16
   25194:	180f883a 	mov	r7,r3
   25198:	100d883a 	mov	r6,r2
   2519c:	00290e40 	call	290e4 <__muldf3>
   251a0:	0011883a 	mov	r8,zero
   251a4:	02500734 	movhi	r9,16412
   251a8:	180b883a 	mov	r5,r3
   251ac:	480f883a 	mov	r7,r9
   251b0:	1009883a 	mov	r4,r2
   251b4:	400d883a 	mov	r6,r8
   251b8:	00290700 	call	29070 <__adddf3>
   251bc:	102d883a 	mov	r22,r2
   251c0:	00bf3034 	movhi	r2,64704
   251c4:	10ef883a 	add	r23,r2,r3
   251c8:	d8800d17 	ldw	r2,52(sp)
   251cc:	d8c00e17 	ldw	r3,56(sp)
   251d0:	8029883a 	mov	r20,r16
   251d4:	10bfffc4 	addi	r2,r2,-1
   251d8:	882b883a 	mov	r21,r17
   251dc:	d8800415 	stw	r2,16(sp)
   251e0:	d8c00315 	stw	r3,12(sp)
   251e4:	003e8306 	br	24bf4 <_dtoa_r+0xf4c>
   251e8:	d8800117 	ldw	r2,4(sp)
   251ec:	dc001117 	ldw	r16,68(sp)
   251f0:	dc801017 	ldw	r18,64(sp)
   251f4:	00c00d84 	movi	r3,54
   251f8:	1887c83a 	sub	r3,r3,r2
   251fc:	003d6906 	br	247a4 <_dtoa_r+0xafc>
   25200:	01800044 	movi	r6,1
   25204:	3021883a 	mov	r16,r6
   25208:	d9800f15 	stw	r6,60(sp)
   2520c:	d9802615 	stw	r6,152(sp)
   25210:	d9800e15 	stw	r6,56(sp)
   25214:	003b9306 	br	24064 <_dtoa_r+0x3bc>
   25218:	b021883a 	mov	r16,r22
   2521c:	dd800f15 	stw	r22,60(sp)
   25220:	003b9006 	br	24064 <_dtoa_r+0x3bc>
   25224:	103e221e 	bne	r2,zero,24ab0 <_dtoa_r+0xe08>
   25228:	b880004c 	andi	r2,r23,1
   2522c:	1005003a 	cmpeq	r2,r2,zero
   25230:	103e1f1e 	bne	r2,zero,24ab0 <_dtoa_r+0xe08>
   25234:	003e1b06 	br	24aa4 <_dtoa_r+0xdfc>
   25238:	d9001617 	ldw	r4,88(sp)
   2523c:	980b883a 	mov	r5,r19
   25240:	01800284 	movi	r6,10
   25244:	000f883a 	mov	r7,zero
   25248:	00273a40 	call	273a4 <__multadd>
   2524c:	d8c00e17 	ldw	r3,56(sp)
   25250:	1027883a 	mov	r19,r2
   25254:	d8c00f15 	stw	r3,60(sp)
   25258:	003cd306 	br	245a8 <_dtoa_r+0x900>

0002525c <_fflush_r>:
   2525c:	defffb04 	addi	sp,sp,-20
   25260:	dcc00315 	stw	r19,12(sp)
   25264:	dc800215 	stw	r18,8(sp)
   25268:	dfc00415 	stw	ra,16(sp)
   2526c:	dc400115 	stw	r17,4(sp)
   25270:	dc000015 	stw	r16,0(sp)
   25274:	2027883a 	mov	r19,r4
   25278:	2825883a 	mov	r18,r5
   2527c:	20000226 	beq	r4,zero,25288 <_fflush_r+0x2c>
   25280:	20800e17 	ldw	r2,56(r4)
   25284:	10005626 	beq	r2,zero,253e0 <_fflush_r+0x184>
   25288:	9100030b 	ldhu	r4,12(r18)
   2528c:	20ffffcc 	andi	r3,r4,65535
   25290:	18e0001c 	xori	r3,r3,32768
   25294:	18e00004 	addi	r3,r3,-32768
   25298:	1880020c 	andi	r2,r3,8
   2529c:	1000261e 	bne	r2,zero,25338 <_fflush_r+0xdc>
   252a0:	90c00117 	ldw	r3,4(r18)
   252a4:	20820014 	ori	r2,r4,2048
   252a8:	9080030d 	sth	r2,12(r18)
   252ac:	1009883a 	mov	r4,r2
   252b0:	00c0400e 	bge	zero,r3,253b4 <_fflush_r+0x158>
   252b4:	92000a17 	ldw	r8,40(r18)
   252b8:	40004026 	beq	r8,zero,253bc <_fflush_r+0x160>
   252bc:	2084000c 	andi	r2,r4,4096
   252c0:	10005326 	beq	r2,zero,25410 <_fflush_r+0x1b4>
   252c4:	94001417 	ldw	r16,80(r18)
   252c8:	9080030b 	ldhu	r2,12(r18)
   252cc:	1080010c 	andi	r2,r2,4
   252d0:	1000481e 	bne	r2,zero,253f4 <_fflush_r+0x198>
   252d4:	91400717 	ldw	r5,28(r18)
   252d8:	9809883a 	mov	r4,r19
   252dc:	800d883a 	mov	r6,r16
   252e0:	000f883a 	mov	r7,zero
   252e4:	403ee83a 	callr	r8
   252e8:	8080261e 	bne	r16,r2,25384 <_fflush_r+0x128>
   252ec:	9080030b 	ldhu	r2,12(r18)
   252f0:	91000417 	ldw	r4,16(r18)
   252f4:	90000115 	stw	zero,4(r18)
   252f8:	10bdffcc 	andi	r2,r2,63487
   252fc:	10ffffcc 	andi	r3,r2,65535
   25300:	18c4000c 	andi	r3,r3,4096
   25304:	9080030d 	sth	r2,12(r18)
   25308:	91000015 	stw	r4,0(r18)
   2530c:	18002b26 	beq	r3,zero,253bc <_fflush_r+0x160>
   25310:	0007883a 	mov	r3,zero
   25314:	1805883a 	mov	r2,r3
   25318:	94001415 	stw	r16,80(r18)
   2531c:	dfc00417 	ldw	ra,16(sp)
   25320:	dcc00317 	ldw	r19,12(sp)
   25324:	dc800217 	ldw	r18,8(sp)
   25328:	dc400117 	ldw	r17,4(sp)
   2532c:	dc000017 	ldw	r16,0(sp)
   25330:	dec00504 	addi	sp,sp,20
   25334:	f800283a 	ret
   25338:	94400417 	ldw	r17,16(r18)
   2533c:	88001f26 	beq	r17,zero,253bc <_fflush_r+0x160>
   25340:	90800017 	ldw	r2,0(r18)
   25344:	18c000cc 	andi	r3,r3,3
   25348:	94400015 	stw	r17,0(r18)
   2534c:	1461c83a 	sub	r16,r2,r17
   25350:	18002526 	beq	r3,zero,253e8 <_fflush_r+0x18c>
   25354:	0005883a 	mov	r2,zero
   25358:	90800215 	stw	r2,8(r18)
   2535c:	0400170e 	bge	zero,r16,253bc <_fflush_r+0x160>
   25360:	90c00917 	ldw	r3,36(r18)
   25364:	91400717 	ldw	r5,28(r18)
   25368:	880d883a 	mov	r6,r17
   2536c:	800f883a 	mov	r7,r16
   25370:	9809883a 	mov	r4,r19
   25374:	183ee83a 	callr	r3
   25378:	88a3883a 	add	r17,r17,r2
   2537c:	80a1c83a 	sub	r16,r16,r2
   25380:	00bff616 	blt	zero,r2,2535c <_fflush_r+0x100>
   25384:	9080030b 	ldhu	r2,12(r18)
   25388:	00ffffc4 	movi	r3,-1
   2538c:	10801014 	ori	r2,r2,64
   25390:	9080030d 	sth	r2,12(r18)
   25394:	1805883a 	mov	r2,r3
   25398:	dfc00417 	ldw	ra,16(sp)
   2539c:	dcc00317 	ldw	r19,12(sp)
   253a0:	dc800217 	ldw	r18,8(sp)
   253a4:	dc400117 	ldw	r17,4(sp)
   253a8:	dc000017 	ldw	r16,0(sp)
   253ac:	dec00504 	addi	sp,sp,20
   253b0:	f800283a 	ret
   253b4:	90800f17 	ldw	r2,60(r18)
   253b8:	00bfbe16 	blt	zero,r2,252b4 <_fflush_r+0x58>
   253bc:	0007883a 	mov	r3,zero
   253c0:	1805883a 	mov	r2,r3
   253c4:	dfc00417 	ldw	ra,16(sp)
   253c8:	dcc00317 	ldw	r19,12(sp)
   253cc:	dc800217 	ldw	r18,8(sp)
   253d0:	dc400117 	ldw	r17,4(sp)
   253d4:	dc000017 	ldw	r16,0(sp)
   253d8:	dec00504 	addi	sp,sp,20
   253dc:	f800283a 	ret
   253e0:	00254f40 	call	254f4 <__sinit>
   253e4:	003fa806 	br	25288 <_fflush_r+0x2c>
   253e8:	90800517 	ldw	r2,20(r18)
   253ec:	90800215 	stw	r2,8(r18)
   253f0:	003fda06 	br	2535c <_fflush_r+0x100>
   253f4:	90800117 	ldw	r2,4(r18)
   253f8:	90c00c17 	ldw	r3,48(r18)
   253fc:	80a1c83a 	sub	r16,r16,r2
   25400:	183fb426 	beq	r3,zero,252d4 <_fflush_r+0x78>
   25404:	90800f17 	ldw	r2,60(r18)
   25408:	80a1c83a 	sub	r16,r16,r2
   2540c:	003fb106 	br	252d4 <_fflush_r+0x78>
   25410:	91400717 	ldw	r5,28(r18)
   25414:	9809883a 	mov	r4,r19
   25418:	000d883a 	mov	r6,zero
   2541c:	01c00044 	movi	r7,1
   25420:	403ee83a 	callr	r8
   25424:	1021883a 	mov	r16,r2
   25428:	00bfffc4 	movi	r2,-1
   2542c:	80800226 	beq	r16,r2,25438 <_fflush_r+0x1dc>
   25430:	92000a17 	ldw	r8,40(r18)
   25434:	003fa406 	br	252c8 <_fflush_r+0x6c>
   25438:	98c00017 	ldw	r3,0(r19)
   2543c:	00800744 	movi	r2,29
   25440:	18bfde26 	beq	r3,r2,253bc <_fflush_r+0x160>
   25444:	9080030b 	ldhu	r2,12(r18)
   25448:	8007883a 	mov	r3,r16
   2544c:	10801014 	ori	r2,r2,64
   25450:	9080030d 	sth	r2,12(r18)
   25454:	003fcf06 	br	25394 <_fflush_r+0x138>

00025458 <fflush>:
   25458:	014000b4 	movhi	r5,2
   2545c:	29549704 	addi	r5,r5,21084
   25460:	2007883a 	mov	r3,r4
   25464:	20000526 	beq	r4,zero,2547c <fflush+0x24>
   25468:	008000f4 	movhi	r2,3
   2546c:	10832d04 	addi	r2,r2,3252
   25470:	11000017 	ldw	r4,0(r2)
   25474:	180b883a 	mov	r5,r3
   25478:	002525c1 	jmpi	2525c <_fflush_r>
   2547c:	008000f4 	movhi	r2,3
   25480:	10832e04 	addi	r2,r2,3256
   25484:	11000017 	ldw	r4,0(r2)
   25488:	00260c81 	jmpi	260c8 <_fwalk_reent>

0002548c <std>:
   2548c:	008000b4 	movhi	r2,2
   25490:	1085e104 	addi	r2,r2,6020
   25494:	20800b15 	stw	r2,44(r4)
   25498:	008000b4 	movhi	r2,2
   2549c:	10861c04 	addi	r2,r2,6256
   254a0:	20800815 	stw	r2,32(r4)
   254a4:	00c000b4 	movhi	r3,2
   254a8:	18c5fd04 	addi	r3,r3,6132
   254ac:	008000b4 	movhi	r2,2
   254b0:	1085e304 	addi	r2,r2,6028
   254b4:	2140030d 	sth	r5,12(r4)
   254b8:	2180038d 	sth	r6,14(r4)
   254bc:	20c00915 	stw	r3,36(r4)
   254c0:	20800a15 	stw	r2,40(r4)
   254c4:	20000015 	stw	zero,0(r4)
   254c8:	20000115 	stw	zero,4(r4)
   254cc:	20000215 	stw	zero,8(r4)
   254d0:	20000415 	stw	zero,16(r4)
   254d4:	20000515 	stw	zero,20(r4)
   254d8:	20000615 	stw	zero,24(r4)
   254dc:	21000715 	stw	r4,28(r4)
   254e0:	f800283a 	ret

000254e4 <__sfp_lock_acquire>:
   254e4:	f800283a 	ret

000254e8 <__sfp_lock_release>:
   254e8:	f800283a 	ret

000254ec <__sinit_lock_acquire>:
   254ec:	f800283a 	ret

000254f0 <__sinit_lock_release>:
   254f0:	f800283a 	ret

000254f4 <__sinit>:
   254f4:	20800e17 	ldw	r2,56(r4)
   254f8:	defffd04 	addi	sp,sp,-12
   254fc:	dc400115 	stw	r17,4(sp)
   25500:	dc000015 	stw	r16,0(sp)
   25504:	dfc00215 	stw	ra,8(sp)
   25508:	04400044 	movi	r17,1
   2550c:	01400104 	movi	r5,4
   25510:	000d883a 	mov	r6,zero
   25514:	2021883a 	mov	r16,r4
   25518:	2200bb04 	addi	r8,r4,748
   2551c:	200f883a 	mov	r7,r4
   25520:	10000526 	beq	r2,zero,25538 <__sinit+0x44>
   25524:	dfc00217 	ldw	ra,8(sp)
   25528:	dc400117 	ldw	r17,4(sp)
   2552c:	dc000017 	ldw	r16,0(sp)
   25530:	dec00304 	addi	sp,sp,12
   25534:	f800283a 	ret
   25538:	21000117 	ldw	r4,4(r4)
   2553c:	008000b4 	movhi	r2,2
   25540:	10957604 	addi	r2,r2,21976
   25544:	00c000c4 	movi	r3,3
   25548:	80800f15 	stw	r2,60(r16)
   2554c:	80c0b915 	stw	r3,740(r16)
   25550:	8200ba15 	stw	r8,744(r16)
   25554:	84400e15 	stw	r17,56(r16)
   25558:	8000b815 	stw	zero,736(r16)
   2555c:	002548c0 	call	2548c <std>
   25560:	81000217 	ldw	r4,8(r16)
   25564:	880d883a 	mov	r6,r17
   25568:	800f883a 	mov	r7,r16
   2556c:	01400284 	movi	r5,10
   25570:	002548c0 	call	2548c <std>
   25574:	81000317 	ldw	r4,12(r16)
   25578:	800f883a 	mov	r7,r16
   2557c:	01400484 	movi	r5,18
   25580:	01800084 	movi	r6,2
   25584:	dfc00217 	ldw	ra,8(sp)
   25588:	dc400117 	ldw	r17,4(sp)
   2558c:	dc000017 	ldw	r16,0(sp)
   25590:	dec00304 	addi	sp,sp,12
   25594:	002548c1 	jmpi	2548c <std>

00025598 <__fp_lock>:
   25598:	0005883a 	mov	r2,zero
   2559c:	f800283a 	ret

000255a0 <__fp_unlock>:
   255a0:	0005883a 	mov	r2,zero
   255a4:	f800283a 	ret

000255a8 <__fp_unlock_all>:
   255a8:	008000f4 	movhi	r2,3
   255ac:	10832d04 	addi	r2,r2,3252
   255b0:	11000017 	ldw	r4,0(r2)
   255b4:	014000b4 	movhi	r5,2
   255b8:	29556804 	addi	r5,r5,21920
   255bc:	00261901 	jmpi	26190 <_fwalk>

000255c0 <__fp_lock_all>:
   255c0:	008000f4 	movhi	r2,3
   255c4:	10832d04 	addi	r2,r2,3252
   255c8:	11000017 	ldw	r4,0(r2)
   255cc:	014000b4 	movhi	r5,2
   255d0:	29556604 	addi	r5,r5,21912
   255d4:	00261901 	jmpi	26190 <_fwalk>

000255d8 <_cleanup_r>:
   255d8:	014000f4 	movhi	r5,3
   255dc:	29601004 	addi	r5,r5,-32704
   255e0:	00261901 	jmpi	26190 <_fwalk>

000255e4 <_cleanup>:
   255e4:	008000f4 	movhi	r2,3
   255e8:	10832e04 	addi	r2,r2,3256
   255ec:	11000017 	ldw	r4,0(r2)
   255f0:	00255d81 	jmpi	255d8 <_cleanup_r>

000255f4 <__sfmoreglue>:
   255f4:	defffc04 	addi	sp,sp,-16
   255f8:	dc400115 	stw	r17,4(sp)
   255fc:	2c401724 	muli	r17,r5,92
   25600:	dc800215 	stw	r18,8(sp)
   25604:	2825883a 	mov	r18,r5
   25608:	89400304 	addi	r5,r17,12
   2560c:	dc000015 	stw	r16,0(sp)
   25610:	dfc00315 	stw	ra,12(sp)
   25614:	0020c500 	call	20c50 <_malloc_r>
   25618:	0021883a 	mov	r16,zero
   2561c:	880d883a 	mov	r6,r17
   25620:	000b883a 	mov	r5,zero
   25624:	10000626 	beq	r2,zero,25640 <__sfmoreglue+0x4c>
   25628:	11000304 	addi	r4,r2,12
   2562c:	14800115 	stw	r18,4(r2)
   25630:	10000015 	stw	zero,0(r2)
   25634:	11000215 	stw	r4,8(r2)
   25638:	1021883a 	mov	r16,r2
   2563c:	00266580 	call	26658 <memset>
   25640:	8005883a 	mov	r2,r16
   25644:	dfc00317 	ldw	ra,12(sp)
   25648:	dc800217 	ldw	r18,8(sp)
   2564c:	dc400117 	ldw	r17,4(sp)
   25650:	dc000017 	ldw	r16,0(sp)
   25654:	dec00404 	addi	sp,sp,16
   25658:	f800283a 	ret

0002565c <__sfp>:
   2565c:	defffd04 	addi	sp,sp,-12
   25660:	008000f4 	movhi	r2,3
   25664:	10832e04 	addi	r2,r2,3256
   25668:	dc000015 	stw	r16,0(sp)
   2566c:	14000017 	ldw	r16,0(r2)
   25670:	dc400115 	stw	r17,4(sp)
   25674:	dfc00215 	stw	ra,8(sp)
   25678:	80800e17 	ldw	r2,56(r16)
   2567c:	2023883a 	mov	r17,r4
   25680:	10002626 	beq	r2,zero,2571c <__sfp+0xc0>
   25684:	8400b804 	addi	r16,r16,736
   25688:	80800117 	ldw	r2,4(r16)
   2568c:	81000217 	ldw	r4,8(r16)
   25690:	10ffffc4 	addi	r3,r2,-1
   25694:	18000916 	blt	r3,zero,256bc <__sfp+0x60>
   25698:	2080030f 	ldh	r2,12(r4)
   2569c:	10000b26 	beq	r2,zero,256cc <__sfp+0x70>
   256a0:	017fffc4 	movi	r5,-1
   256a4:	00000206 	br	256b0 <__sfp+0x54>
   256a8:	2080030f 	ldh	r2,12(r4)
   256ac:	10000726 	beq	r2,zero,256cc <__sfp+0x70>
   256b0:	18ffffc4 	addi	r3,r3,-1
   256b4:	21001704 	addi	r4,r4,92
   256b8:	197ffb1e 	bne	r3,r5,256a8 <__sfp+0x4c>
   256bc:	80800017 	ldw	r2,0(r16)
   256c0:	10001926 	beq	r2,zero,25728 <__sfp+0xcc>
   256c4:	1021883a 	mov	r16,r2
   256c8:	003fef06 	br	25688 <__sfp+0x2c>
   256cc:	00bfffc4 	movi	r2,-1
   256d0:	00c00044 	movi	r3,1
   256d4:	2080038d 	sth	r2,14(r4)
   256d8:	20c0030d 	sth	r3,12(r4)
   256dc:	20000015 	stw	zero,0(r4)
   256e0:	20000215 	stw	zero,8(r4)
   256e4:	20000115 	stw	zero,4(r4)
   256e8:	20000415 	stw	zero,16(r4)
   256ec:	20000515 	stw	zero,20(r4)
   256f0:	20000615 	stw	zero,24(r4)
   256f4:	20000c15 	stw	zero,48(r4)
   256f8:	20000d15 	stw	zero,52(r4)
   256fc:	20001115 	stw	zero,68(r4)
   25700:	20001215 	stw	zero,72(r4)
   25704:	2005883a 	mov	r2,r4
   25708:	dfc00217 	ldw	ra,8(sp)
   2570c:	dc400117 	ldw	r17,4(sp)
   25710:	dc000017 	ldw	r16,0(sp)
   25714:	dec00304 	addi	sp,sp,12
   25718:	f800283a 	ret
   2571c:	8009883a 	mov	r4,r16
   25720:	00254f40 	call	254f4 <__sinit>
   25724:	003fd706 	br	25684 <__sfp+0x28>
   25728:	8809883a 	mov	r4,r17
   2572c:	01400104 	movi	r5,4
   25730:	00255f40 	call	255f4 <__sfmoreglue>
   25734:	80800015 	stw	r2,0(r16)
   25738:	103fe21e 	bne	r2,zero,256c4 <__sfp+0x68>
   2573c:	00800304 	movi	r2,12
   25740:	0009883a 	mov	r4,zero
   25744:	88800015 	stw	r2,0(r17)
   25748:	003fee06 	br	25704 <__sfp+0xa8>

0002574c <__sflags>:
   2574c:	28c00007 	ldb	r3,0(r5)
   25750:	00801c84 	movi	r2,114
   25754:	18800926 	beq	r3,r2,2577c <__sflags+0x30>
   25758:	00801dc4 	movi	r2,119
   2575c:	18801426 	beq	r3,r2,257b0 <__sflags+0x64>
   25760:	00801844 	movi	r2,97
   25764:	18801626 	beq	r3,r2,257c0 <__sflags+0x74>
   25768:	0007883a 	mov	r3,zero
   2576c:	00800584 	movi	r2,22
   25770:	20800015 	stw	r2,0(r4)
   25774:	1805883a 	mov	r2,r3
   25778:	f800283a 	ret
   2577c:	000f883a 	mov	r7,zero
   25780:	0011883a 	mov	r8,zero
   25784:	00c00104 	movi	r3,4
   25788:	28800047 	ldb	r2,1(r5)
   2578c:	10000426 	beq	r2,zero,257a0 <__sflags+0x54>
   25790:	01000ac4 	movi	r4,43
   25794:	11000e26 	beq	r2,r4,257d0 <__sflags+0x84>
   25798:	28800087 	ldb	r2,2(r5)
   2579c:	11000c26 	beq	r2,r4,257d0 <__sflags+0x84>
   257a0:	3a04b03a 	or	r2,r7,r8
   257a4:	30800015 	stw	r2,0(r6)
   257a8:	1805883a 	mov	r2,r3
   257ac:	f800283a 	ret
   257b0:	01c00044 	movi	r7,1
   257b4:	02018004 	movi	r8,1536
   257b8:	00c00204 	movi	r3,8
   257bc:	003ff206 	br	25788 <__sflags+0x3c>
   257c0:	01c00044 	movi	r7,1
   257c4:	02008204 	movi	r8,520
   257c8:	00c04204 	movi	r3,264
   257cc:	003fee06 	br	25788 <__sflags+0x3c>
   257d0:	00bffcc4 	movi	r2,-13
   257d4:	1884703a 	and	r2,r3,r2
   257d8:	01c00084 	movi	r7,2
   257dc:	10c00414 	ori	r3,r2,16
   257e0:	3a04b03a 	or	r2,r7,r8
   257e4:	30800015 	stw	r2,0(r6)
   257e8:	003fef06 	br	257a8 <__sflags+0x5c>

000257ec <_malloc_trim_r>:
   257ec:	defffb04 	addi	sp,sp,-20
   257f0:	dcc00315 	stw	r19,12(sp)
   257f4:	04c000f4 	movhi	r19,3
   257f8:	9cfd2d04 	addi	r19,r19,-2892
   257fc:	dc800215 	stw	r18,8(sp)
   25800:	dc400115 	stw	r17,4(sp)
   25804:	dc000015 	stw	r16,0(sp)
   25808:	2823883a 	mov	r17,r5
   2580c:	2025883a 	mov	r18,r4
   25810:	dfc00415 	stw	ra,16(sp)
   25814:	002ab080 	call	2ab08 <__malloc_lock>
   25818:	98800217 	ldw	r2,8(r19)
   2581c:	9009883a 	mov	r4,r18
   25820:	000b883a 	mov	r5,zero
   25824:	10c00117 	ldw	r3,4(r2)
   25828:	00bfff04 	movi	r2,-4
   2582c:	18a0703a 	and	r16,r3,r2
   25830:	8463c83a 	sub	r17,r16,r17
   25834:	8c43fbc4 	addi	r17,r17,4079
   25838:	8822d33a 	srli	r17,r17,12
   2583c:	0083ffc4 	movi	r2,4095
   25840:	8c7fffc4 	addi	r17,r17,-1
   25844:	8822933a 	slli	r17,r17,12
   25848:	1440060e 	bge	r2,r17,25864 <_malloc_trim_r+0x78>
   2584c:	00217140 	call	21714 <_sbrk_r>
   25850:	98c00217 	ldw	r3,8(r19)
   25854:	9009883a 	mov	r4,r18
   25858:	044bc83a 	sub	r5,zero,r17
   2585c:	80c7883a 	add	r3,r16,r3
   25860:	10c00926 	beq	r2,r3,25888 <_malloc_trim_r+0x9c>
   25864:	002ab280 	call	2ab28 <__malloc_unlock>
   25868:	0005883a 	mov	r2,zero
   2586c:	dfc00417 	ldw	ra,16(sp)
   25870:	dcc00317 	ldw	r19,12(sp)
   25874:	dc800217 	ldw	r18,8(sp)
   25878:	dc400117 	ldw	r17,4(sp)
   2587c:	dc000017 	ldw	r16,0(sp)
   25880:	dec00504 	addi	sp,sp,20
   25884:	f800283a 	ret
   25888:	9009883a 	mov	r4,r18
   2588c:	00217140 	call	21714 <_sbrk_r>
   25890:	844dc83a 	sub	r6,r16,r17
   25894:	00ffffc4 	movi	r3,-1
   25898:	9009883a 	mov	r4,r18
   2589c:	000b883a 	mov	r5,zero
   258a0:	01c000f4 	movhi	r7,3
   258a4:	39ca5e04 	addi	r7,r7,10616
   258a8:	31800054 	ori	r6,r6,1
   258ac:	10c00926 	beq	r2,r3,258d4 <_malloc_trim_r+0xe8>
   258b0:	38800017 	ldw	r2,0(r7)
   258b4:	98c00217 	ldw	r3,8(r19)
   258b8:	9009883a 	mov	r4,r18
   258bc:	1445c83a 	sub	r2,r2,r17
   258c0:	38800015 	stw	r2,0(r7)
   258c4:	19800115 	stw	r6,4(r3)
   258c8:	002ab280 	call	2ab28 <__malloc_unlock>
   258cc:	00800044 	movi	r2,1
   258d0:	003fe606 	br	2586c <_malloc_trim_r+0x80>
   258d4:	00217140 	call	21714 <_sbrk_r>
   258d8:	99800217 	ldw	r6,8(r19)
   258dc:	100f883a 	mov	r7,r2
   258e0:	9009883a 	mov	r4,r18
   258e4:	1187c83a 	sub	r3,r2,r6
   258e8:	008003c4 	movi	r2,15
   258ec:	19400054 	ori	r5,r3,1
   258f0:	10ffdc0e 	bge	r2,r3,25864 <_malloc_trim_r+0x78>
   258f4:	008000f4 	movhi	r2,3
   258f8:	10833004 	addi	r2,r2,3264
   258fc:	10c00017 	ldw	r3,0(r2)
   25900:	008000f4 	movhi	r2,3
   25904:	108a5e04 	addi	r2,r2,10616
   25908:	31400115 	stw	r5,4(r6)
   2590c:	38c7c83a 	sub	r3,r7,r3
   25910:	10c00015 	stw	r3,0(r2)
   25914:	003fd306 	br	25864 <_malloc_trim_r+0x78>

00025918 <_free_r>:
   25918:	defffd04 	addi	sp,sp,-12
   2591c:	dc400115 	stw	r17,4(sp)
   25920:	dc000015 	stw	r16,0(sp)
   25924:	dfc00215 	stw	ra,8(sp)
   25928:	2821883a 	mov	r16,r5
   2592c:	2023883a 	mov	r17,r4
   25930:	28005a26 	beq	r5,zero,25a9c <_free_r+0x184>
   25934:	002ab080 	call	2ab08 <__malloc_lock>
   25938:	823ffe04 	addi	r8,r16,-8
   2593c:	41400117 	ldw	r5,4(r8)
   25940:	00bfff84 	movi	r2,-2
   25944:	028000f4 	movhi	r10,3
   25948:	52bd2d04 	addi	r10,r10,-2892
   2594c:	288e703a 	and	r7,r5,r2
   25950:	41cd883a 	add	r6,r8,r7
   25954:	30c00117 	ldw	r3,4(r6)
   25958:	51000217 	ldw	r4,8(r10)
   2595c:	00bfff04 	movi	r2,-4
   25960:	1892703a 	and	r9,r3,r2
   25964:	5017883a 	mov	r11,r10
   25968:	31006726 	beq	r6,r4,25b08 <_free_r+0x1f0>
   2596c:	2880004c 	andi	r2,r5,1
   25970:	1005003a 	cmpeq	r2,r2,zero
   25974:	32400115 	stw	r9,4(r6)
   25978:	10001a1e 	bne	r2,zero,259e4 <_free_r+0xcc>
   2597c:	000b883a 	mov	r5,zero
   25980:	3247883a 	add	r3,r6,r9
   25984:	18800117 	ldw	r2,4(r3)
   25988:	1080004c 	andi	r2,r2,1
   2598c:	1000231e 	bne	r2,zero,25a1c <_free_r+0x104>
   25990:	280ac03a 	cmpne	r5,r5,zero
   25994:	3a4f883a 	add	r7,r7,r9
   25998:	2800451e 	bne	r5,zero,25ab0 <_free_r+0x198>
   2599c:	31000217 	ldw	r4,8(r6)
   259a0:	008000f4 	movhi	r2,3
   259a4:	10bd2f04 	addi	r2,r2,-2884
   259a8:	20807b26 	beq	r4,r2,25b98 <_free_r+0x280>
   259ac:	30800317 	ldw	r2,12(r6)
   259b0:	3a07883a 	add	r3,r7,r8
   259b4:	19c00015 	stw	r7,0(r3)
   259b8:	11000215 	stw	r4,8(r2)
   259bc:	20800315 	stw	r2,12(r4)
   259c0:	38800054 	ori	r2,r7,1
   259c4:	40800115 	stw	r2,4(r8)
   259c8:	28001a26 	beq	r5,zero,25a34 <_free_r+0x11c>
   259cc:	8809883a 	mov	r4,r17
   259d0:	dfc00217 	ldw	ra,8(sp)
   259d4:	dc400117 	ldw	r17,4(sp)
   259d8:	dc000017 	ldw	r16,0(sp)
   259dc:	dec00304 	addi	sp,sp,12
   259e0:	002ab281 	jmpi	2ab28 <__malloc_unlock>
   259e4:	80bffe17 	ldw	r2,-8(r16)
   259e8:	50c00204 	addi	r3,r10,8
   259ec:	4091c83a 	sub	r8,r8,r2
   259f0:	41000217 	ldw	r4,8(r8)
   259f4:	388f883a 	add	r7,r7,r2
   259f8:	20c06126 	beq	r4,r3,25b80 <_free_r+0x268>
   259fc:	40800317 	ldw	r2,12(r8)
   25a00:	3247883a 	add	r3,r6,r9
   25a04:	000b883a 	mov	r5,zero
   25a08:	11000215 	stw	r4,8(r2)
   25a0c:	20800315 	stw	r2,12(r4)
   25a10:	18800117 	ldw	r2,4(r3)
   25a14:	1080004c 	andi	r2,r2,1
   25a18:	103fdd26 	beq	r2,zero,25990 <_free_r+0x78>
   25a1c:	38800054 	ori	r2,r7,1
   25a20:	3a07883a 	add	r3,r7,r8
   25a24:	280ac03a 	cmpne	r5,r5,zero
   25a28:	40800115 	stw	r2,4(r8)
   25a2c:	19c00015 	stw	r7,0(r3)
   25a30:	283fe61e 	bne	r5,zero,259cc <_free_r+0xb4>
   25a34:	00807fc4 	movi	r2,511
   25a38:	11c01f2e 	bgeu	r2,r7,25ab8 <_free_r+0x1a0>
   25a3c:	3806d27a 	srli	r3,r7,9
   25a40:	1800481e 	bne	r3,zero,25b64 <_free_r+0x24c>
   25a44:	3804d0fa 	srli	r2,r7,3
   25a48:	100690fa 	slli	r3,r2,3
   25a4c:	1acd883a 	add	r6,r3,r11
   25a50:	31400217 	ldw	r5,8(r6)
   25a54:	31405926 	beq	r6,r5,25bbc <_free_r+0x2a4>
   25a58:	28800117 	ldw	r2,4(r5)
   25a5c:	00ffff04 	movi	r3,-4
   25a60:	10c4703a 	and	r2,r2,r3
   25a64:	3880022e 	bgeu	r7,r2,25a70 <_free_r+0x158>
   25a68:	29400217 	ldw	r5,8(r5)
   25a6c:	317ffa1e 	bne	r6,r5,25a58 <_free_r+0x140>
   25a70:	29800317 	ldw	r6,12(r5)
   25a74:	41800315 	stw	r6,12(r8)
   25a78:	41400215 	stw	r5,8(r8)
   25a7c:	8809883a 	mov	r4,r17
   25a80:	2a000315 	stw	r8,12(r5)
   25a84:	32000215 	stw	r8,8(r6)
   25a88:	dfc00217 	ldw	ra,8(sp)
   25a8c:	dc400117 	ldw	r17,4(sp)
   25a90:	dc000017 	ldw	r16,0(sp)
   25a94:	dec00304 	addi	sp,sp,12
   25a98:	002ab281 	jmpi	2ab28 <__malloc_unlock>
   25a9c:	dfc00217 	ldw	ra,8(sp)
   25aa0:	dc400117 	ldw	r17,4(sp)
   25aa4:	dc000017 	ldw	r16,0(sp)
   25aa8:	dec00304 	addi	sp,sp,12
   25aac:	f800283a 	ret
   25ab0:	31000217 	ldw	r4,8(r6)
   25ab4:	003fbd06 	br	259ac <_free_r+0x94>
   25ab8:	3806d0fa 	srli	r3,r7,3
   25abc:	00800044 	movi	r2,1
   25ac0:	51400117 	ldw	r5,4(r10)
   25ac4:	180890fa 	slli	r4,r3,3
   25ac8:	1807d0ba 	srai	r3,r3,2
   25acc:	22c9883a 	add	r4,r4,r11
   25ad0:	21800217 	ldw	r6,8(r4)
   25ad4:	10c4983a 	sll	r2,r2,r3
   25ad8:	41000315 	stw	r4,12(r8)
   25adc:	41800215 	stw	r6,8(r8)
   25ae0:	288ab03a 	or	r5,r5,r2
   25ae4:	22000215 	stw	r8,8(r4)
   25ae8:	8809883a 	mov	r4,r17
   25aec:	51400115 	stw	r5,4(r10)
   25af0:	32000315 	stw	r8,12(r6)
   25af4:	dfc00217 	ldw	ra,8(sp)
   25af8:	dc400117 	ldw	r17,4(sp)
   25afc:	dc000017 	ldw	r16,0(sp)
   25b00:	dec00304 	addi	sp,sp,12
   25b04:	002ab281 	jmpi	2ab28 <__malloc_unlock>
   25b08:	2880004c 	andi	r2,r5,1
   25b0c:	3a4d883a 	add	r6,r7,r9
   25b10:	1000071e 	bne	r2,zero,25b30 <_free_r+0x218>
   25b14:	80bffe17 	ldw	r2,-8(r16)
   25b18:	4091c83a 	sub	r8,r8,r2
   25b1c:	41000317 	ldw	r4,12(r8)
   25b20:	40c00217 	ldw	r3,8(r8)
   25b24:	308d883a 	add	r6,r6,r2
   25b28:	20c00215 	stw	r3,8(r4)
   25b2c:	19000315 	stw	r4,12(r3)
   25b30:	008000f4 	movhi	r2,3
   25b34:	10832f04 	addi	r2,r2,3260
   25b38:	11000017 	ldw	r4,0(r2)
   25b3c:	30c00054 	ori	r3,r6,1
   25b40:	52000215 	stw	r8,8(r10)
   25b44:	40c00115 	stw	r3,4(r8)
   25b48:	313fa036 	bltu	r6,r4,259cc <_free_r+0xb4>
   25b4c:	008000f4 	movhi	r2,3
   25b50:	108a5204 	addi	r2,r2,10568
   25b54:	11400017 	ldw	r5,0(r2)
   25b58:	8809883a 	mov	r4,r17
   25b5c:	00257ec0 	call	257ec <_malloc_trim_r>
   25b60:	003f9a06 	br	259cc <_free_r+0xb4>
   25b64:	00800104 	movi	r2,4
   25b68:	10c0072e 	bgeu	r2,r3,25b88 <_free_r+0x270>
   25b6c:	00800504 	movi	r2,20
   25b70:	10c01936 	bltu	r2,r3,25bd8 <_free_r+0x2c0>
   25b74:	188016c4 	addi	r2,r3,91
   25b78:	100690fa 	slli	r3,r2,3
   25b7c:	003fb306 	br	25a4c <_free_r+0x134>
   25b80:	01400044 	movi	r5,1
   25b84:	003f7e06 	br	25980 <_free_r+0x68>
   25b88:	3804d1ba 	srli	r2,r7,6
   25b8c:	10800e04 	addi	r2,r2,56
   25b90:	100690fa 	slli	r3,r2,3
   25b94:	003fad06 	br	25a4c <_free_r+0x134>
   25b98:	22000315 	stw	r8,12(r4)
   25b9c:	22000215 	stw	r8,8(r4)
   25ba0:	3a05883a 	add	r2,r7,r8
   25ba4:	38c00054 	ori	r3,r7,1
   25ba8:	11c00015 	stw	r7,0(r2)
   25bac:	41000215 	stw	r4,8(r8)
   25bb0:	40c00115 	stw	r3,4(r8)
   25bb4:	41000315 	stw	r4,12(r8)
   25bb8:	003f8406 	br	259cc <_free_r+0xb4>
   25bbc:	1005d0ba 	srai	r2,r2,2
   25bc0:	00c00044 	movi	r3,1
   25bc4:	51000117 	ldw	r4,4(r10)
   25bc8:	1886983a 	sll	r3,r3,r2
   25bcc:	20c8b03a 	or	r4,r4,r3
   25bd0:	51000115 	stw	r4,4(r10)
   25bd4:	003fa706 	br	25a74 <_free_r+0x15c>
   25bd8:	00801504 	movi	r2,84
   25bdc:	10c00436 	bltu	r2,r3,25bf0 <_free_r+0x2d8>
   25be0:	3804d33a 	srli	r2,r7,12
   25be4:	10801b84 	addi	r2,r2,110
   25be8:	100690fa 	slli	r3,r2,3
   25bec:	003f9706 	br	25a4c <_free_r+0x134>
   25bf0:	00805504 	movi	r2,340
   25bf4:	10c00436 	bltu	r2,r3,25c08 <_free_r+0x2f0>
   25bf8:	3804d3fa 	srli	r2,r7,15
   25bfc:	10801dc4 	addi	r2,r2,119
   25c00:	100690fa 	slli	r3,r2,3
   25c04:	003f9106 	br	25a4c <_free_r+0x134>
   25c08:	00815504 	movi	r2,1364
   25c0c:	10c0032e 	bgeu	r2,r3,25c1c <_free_r+0x304>
   25c10:	00801f84 	movi	r2,126
   25c14:	00c0fc04 	movi	r3,1008
   25c18:	003f8c06 	br	25a4c <_free_r+0x134>
   25c1c:	3804d4ba 	srli	r2,r7,18
   25c20:	10801f04 	addi	r2,r2,124
   25c24:	100690fa 	slli	r3,r2,3
   25c28:	003f8806 	br	25a4c <_free_r+0x134>

00025c2c <__sfvwrite_r>:
   25c2c:	30800217 	ldw	r2,8(r6)
   25c30:	defff504 	addi	sp,sp,-44
   25c34:	df000915 	stw	fp,36(sp)
   25c38:	dd800715 	stw	r22,28(sp)
   25c3c:	dc800315 	stw	r18,12(sp)
   25c40:	dfc00a15 	stw	ra,40(sp)
   25c44:	ddc00815 	stw	r23,32(sp)
   25c48:	dd400615 	stw	r21,24(sp)
   25c4c:	dd000515 	stw	r20,20(sp)
   25c50:	dcc00415 	stw	r19,16(sp)
   25c54:	dc400215 	stw	r17,8(sp)
   25c58:	dc000115 	stw	r16,4(sp)
   25c5c:	302d883a 	mov	r22,r6
   25c60:	2039883a 	mov	fp,r4
   25c64:	2825883a 	mov	r18,r5
   25c68:	10001c26 	beq	r2,zero,25cdc <__sfvwrite_r+0xb0>
   25c6c:	29c0030b 	ldhu	r7,12(r5)
   25c70:	3880020c 	andi	r2,r7,8
   25c74:	10002726 	beq	r2,zero,25d14 <__sfvwrite_r+0xe8>
   25c78:	28800417 	ldw	r2,16(r5)
   25c7c:	10002526 	beq	r2,zero,25d14 <__sfvwrite_r+0xe8>
   25c80:	3880008c 	andi	r2,r7,2
   25c84:	b5400017 	ldw	r21,0(r22)
   25c88:	10002826 	beq	r2,zero,25d2c <__sfvwrite_r+0x100>
   25c8c:	0021883a 	mov	r16,zero
   25c90:	0023883a 	mov	r17,zero
   25c94:	880d883a 	mov	r6,r17
   25c98:	e009883a 	mov	r4,fp
   25c9c:	00810004 	movi	r2,1024
   25ca0:	80006e26 	beq	r16,zero,25e5c <__sfvwrite_r+0x230>
   25ca4:	800f883a 	mov	r7,r16
   25ca8:	91400717 	ldw	r5,28(r18)
   25cac:	1400012e 	bgeu	r2,r16,25cb4 <__sfvwrite_r+0x88>
   25cb0:	100f883a 	mov	r7,r2
   25cb4:	90c00917 	ldw	r3,36(r18)
   25cb8:	183ee83a 	callr	r3
   25cbc:	1007883a 	mov	r3,r2
   25cc0:	80a1c83a 	sub	r16,r16,r2
   25cc4:	88a3883a 	add	r17,r17,r2
   25cc8:	00806d0e 	bge	zero,r2,25e80 <__sfvwrite_r+0x254>
   25ccc:	b0800217 	ldw	r2,8(r22)
   25cd0:	10c5c83a 	sub	r2,r2,r3
   25cd4:	b0800215 	stw	r2,8(r22)
   25cd8:	103fee1e 	bne	r2,zero,25c94 <__sfvwrite_r+0x68>
   25cdc:	0009883a 	mov	r4,zero
   25ce0:	2005883a 	mov	r2,r4
   25ce4:	dfc00a17 	ldw	ra,40(sp)
   25ce8:	df000917 	ldw	fp,36(sp)
   25cec:	ddc00817 	ldw	r23,32(sp)
   25cf0:	dd800717 	ldw	r22,28(sp)
   25cf4:	dd400617 	ldw	r21,24(sp)
   25cf8:	dd000517 	ldw	r20,20(sp)
   25cfc:	dcc00417 	ldw	r19,16(sp)
   25d00:	dc800317 	ldw	r18,12(sp)
   25d04:	dc400217 	ldw	r17,8(sp)
   25d08:	dc000117 	ldw	r16,4(sp)
   25d0c:	dec00b04 	addi	sp,sp,44
   25d10:	f800283a 	ret
   25d14:	00238e40 	call	238e4 <__swsetup_r>
   25d18:	1000e41e 	bne	r2,zero,260ac <__sfvwrite_r+0x480>
   25d1c:	91c0030b 	ldhu	r7,12(r18)
   25d20:	b5400017 	ldw	r21,0(r22)
   25d24:	3880008c 	andi	r2,r7,2
   25d28:	103fd81e 	bne	r2,zero,25c8c <__sfvwrite_r+0x60>
   25d2c:	3880004c 	andi	r2,r7,1
   25d30:	1005003a 	cmpeq	r2,r2,zero
   25d34:	10005726 	beq	r2,zero,25e94 <__sfvwrite_r+0x268>
   25d38:	0029883a 	mov	r20,zero
   25d3c:	002f883a 	mov	r23,zero
   25d40:	a0004226 	beq	r20,zero,25e4c <__sfvwrite_r+0x220>
   25d44:	3880800c 	andi	r2,r7,512
   25d48:	94000217 	ldw	r16,8(r18)
   25d4c:	10008b26 	beq	r2,zero,25f7c <__sfvwrite_r+0x350>
   25d50:	800d883a 	mov	r6,r16
   25d54:	a400a536 	bltu	r20,r16,25fec <__sfvwrite_r+0x3c0>
   25d58:	3881200c 	andi	r2,r7,1152
   25d5c:	10002726 	beq	r2,zero,25dfc <__sfvwrite_r+0x1d0>
   25d60:	90800517 	ldw	r2,20(r18)
   25d64:	92000417 	ldw	r8,16(r18)
   25d68:	91400017 	ldw	r5,0(r18)
   25d6c:	1087883a 	add	r3,r2,r2
   25d70:	1887883a 	add	r3,r3,r2
   25d74:	1808d7fa 	srli	r4,r3,31
   25d78:	2a21c83a 	sub	r16,r5,r8
   25d7c:	80800044 	addi	r2,r16,1
   25d80:	20c9883a 	add	r4,r4,r3
   25d84:	2027d07a 	srai	r19,r4,1
   25d88:	a085883a 	add	r2,r20,r2
   25d8c:	980d883a 	mov	r6,r19
   25d90:	9880022e 	bgeu	r19,r2,25d9c <__sfvwrite_r+0x170>
   25d94:	1027883a 	mov	r19,r2
   25d98:	100d883a 	mov	r6,r2
   25d9c:	3881000c 	andi	r2,r7,1024
   25da0:	1000b826 	beq	r2,zero,26084 <__sfvwrite_r+0x458>
   25da4:	300b883a 	mov	r5,r6
   25da8:	e009883a 	mov	r4,fp
   25dac:	0020c500 	call	20c50 <_malloc_r>
   25db0:	10003126 	beq	r2,zero,25e78 <__sfvwrite_r+0x24c>
   25db4:	91400417 	ldw	r5,16(r18)
   25db8:	1009883a 	mov	r4,r2
   25dbc:	800d883a 	mov	r6,r16
   25dc0:	1023883a 	mov	r17,r2
   25dc4:	00264d80 	call	264d8 <memcpy>
   25dc8:	90c0030b 	ldhu	r3,12(r18)
   25dcc:	00beffc4 	movi	r2,-1025
   25dd0:	1886703a 	and	r3,r3,r2
   25dd4:	18c02014 	ori	r3,r3,128
   25dd8:	90c0030d 	sth	r3,12(r18)
   25ddc:	9c07c83a 	sub	r3,r19,r16
   25de0:	8c05883a 	add	r2,r17,r16
   25de4:	a00d883a 	mov	r6,r20
   25de8:	a021883a 	mov	r16,r20
   25dec:	90800015 	stw	r2,0(r18)
   25df0:	90c00215 	stw	r3,8(r18)
   25df4:	94400415 	stw	r17,16(r18)
   25df8:	94c00515 	stw	r19,20(r18)
   25dfc:	91000017 	ldw	r4,0(r18)
   25e00:	b80b883a 	mov	r5,r23
   25e04:	a023883a 	mov	r17,r20
   25e08:	00265780 	call	26578 <memmove>
   25e0c:	90c00217 	ldw	r3,8(r18)
   25e10:	90800017 	ldw	r2,0(r18)
   25e14:	a027883a 	mov	r19,r20
   25e18:	1c07c83a 	sub	r3,r3,r16
   25e1c:	1405883a 	add	r2,r2,r16
   25e20:	90c00215 	stw	r3,8(r18)
   25e24:	a021883a 	mov	r16,r20
   25e28:	90800015 	stw	r2,0(r18)
   25e2c:	b0800217 	ldw	r2,8(r22)
   25e30:	1405c83a 	sub	r2,r2,r16
   25e34:	b0800215 	stw	r2,8(r22)
   25e38:	103fa826 	beq	r2,zero,25cdc <__sfvwrite_r+0xb0>
   25e3c:	a469c83a 	sub	r20,r20,r17
   25e40:	91c0030b 	ldhu	r7,12(r18)
   25e44:	bcef883a 	add	r23,r23,r19
   25e48:	a03fbe1e 	bne	r20,zero,25d44 <__sfvwrite_r+0x118>
   25e4c:	adc00017 	ldw	r23,0(r21)
   25e50:	ad000117 	ldw	r20,4(r21)
   25e54:	ad400204 	addi	r21,r21,8
   25e58:	003fb906 	br	25d40 <__sfvwrite_r+0x114>
   25e5c:	ac400017 	ldw	r17,0(r21)
   25e60:	ac000117 	ldw	r16,4(r21)
   25e64:	ad400204 	addi	r21,r21,8
   25e68:	003f8a06 	br	25c94 <__sfvwrite_r+0x68>
   25e6c:	91400417 	ldw	r5,16(r18)
   25e70:	e009883a 	mov	r4,fp
   25e74:	00259180 	call	25918 <_free_r>
   25e78:	00800304 	movi	r2,12
   25e7c:	e0800015 	stw	r2,0(fp)
   25e80:	9080030b 	ldhu	r2,12(r18)
   25e84:	013fffc4 	movi	r4,-1
   25e88:	10801014 	ori	r2,r2,64
   25e8c:	9080030d 	sth	r2,12(r18)
   25e90:	003f9306 	br	25ce0 <__sfvwrite_r+0xb4>
   25e94:	0027883a 	mov	r19,zero
   25e98:	002f883a 	mov	r23,zero
   25e9c:	d8000015 	stw	zero,0(sp)
   25ea0:	0029883a 	mov	r20,zero
   25ea4:	98001e26 	beq	r19,zero,25f20 <__sfvwrite_r+0x2f4>
   25ea8:	d8c00017 	ldw	r3,0(sp)
   25eac:	1804c03a 	cmpne	r2,r3,zero
   25eb0:	10005e26 	beq	r2,zero,2602c <__sfvwrite_r+0x400>
   25eb4:	9821883a 	mov	r16,r19
   25eb8:	a4c0012e 	bgeu	r20,r19,25ec0 <__sfvwrite_r+0x294>
   25ebc:	a021883a 	mov	r16,r20
   25ec0:	91000017 	ldw	r4,0(r18)
   25ec4:	90800417 	ldw	r2,16(r18)
   25ec8:	91800217 	ldw	r6,8(r18)
   25ecc:	91c00517 	ldw	r7,20(r18)
   25ed0:	1100022e 	bgeu	r2,r4,25edc <__sfvwrite_r+0x2b0>
   25ed4:	31e3883a 	add	r17,r6,r7
   25ed8:	8c001616 	blt	r17,r16,25f34 <__sfvwrite_r+0x308>
   25edc:	81c03816 	blt	r16,r7,25fc0 <__sfvwrite_r+0x394>
   25ee0:	90c00917 	ldw	r3,36(r18)
   25ee4:	91400717 	ldw	r5,28(r18)
   25ee8:	e009883a 	mov	r4,fp
   25eec:	b80d883a 	mov	r6,r23
   25ef0:	183ee83a 	callr	r3
   25ef4:	1023883a 	mov	r17,r2
   25ef8:	00bfe10e 	bge	zero,r2,25e80 <__sfvwrite_r+0x254>
   25efc:	a469c83a 	sub	r20,r20,r17
   25f00:	a0001826 	beq	r20,zero,25f64 <__sfvwrite_r+0x338>
   25f04:	b0800217 	ldw	r2,8(r22)
   25f08:	1445c83a 	sub	r2,r2,r17
   25f0c:	b0800215 	stw	r2,8(r22)
   25f10:	103f7226 	beq	r2,zero,25cdc <__sfvwrite_r+0xb0>
   25f14:	9c67c83a 	sub	r19,r19,r17
   25f18:	bc6f883a 	add	r23,r23,r17
   25f1c:	983fe21e 	bne	r19,zero,25ea8 <__sfvwrite_r+0x27c>
   25f20:	adc00017 	ldw	r23,0(r21)
   25f24:	acc00117 	ldw	r19,4(r21)
   25f28:	ad400204 	addi	r21,r21,8
   25f2c:	d8000015 	stw	zero,0(sp)
   25f30:	003fdc06 	br	25ea4 <__sfvwrite_r+0x278>
   25f34:	b80b883a 	mov	r5,r23
   25f38:	880d883a 	mov	r6,r17
   25f3c:	00265780 	call	26578 <memmove>
   25f40:	90c00017 	ldw	r3,0(r18)
   25f44:	e009883a 	mov	r4,fp
   25f48:	900b883a 	mov	r5,r18
   25f4c:	1c47883a 	add	r3,r3,r17
   25f50:	90c00015 	stw	r3,0(r18)
   25f54:	002525c0 	call	2525c <_fflush_r>
   25f58:	103fc91e 	bne	r2,zero,25e80 <__sfvwrite_r+0x254>
   25f5c:	a469c83a 	sub	r20,r20,r17
   25f60:	a03fe81e 	bne	r20,zero,25f04 <__sfvwrite_r+0x2d8>
   25f64:	e009883a 	mov	r4,fp
   25f68:	900b883a 	mov	r5,r18
   25f6c:	002525c0 	call	2525c <_fflush_r>
   25f70:	103fc31e 	bne	r2,zero,25e80 <__sfvwrite_r+0x254>
   25f74:	d8000015 	stw	zero,0(sp)
   25f78:	003fe206 	br	25f04 <__sfvwrite_r+0x2d8>
   25f7c:	91000017 	ldw	r4,0(r18)
   25f80:	90800417 	ldw	r2,16(r18)
   25f84:	1100022e 	bgeu	r2,r4,25f90 <__sfvwrite_r+0x364>
   25f88:	8023883a 	mov	r17,r16
   25f8c:	85003136 	bltu	r16,r20,26054 <__sfvwrite_r+0x428>
   25f90:	91c00517 	ldw	r7,20(r18)
   25f94:	a1c01836 	bltu	r20,r7,25ff8 <__sfvwrite_r+0x3cc>
   25f98:	90c00917 	ldw	r3,36(r18)
   25f9c:	91400717 	ldw	r5,28(r18)
   25fa0:	e009883a 	mov	r4,fp
   25fa4:	b80d883a 	mov	r6,r23
   25fa8:	183ee83a 	callr	r3
   25fac:	1021883a 	mov	r16,r2
   25fb0:	00bfb30e 	bge	zero,r2,25e80 <__sfvwrite_r+0x254>
   25fb4:	1023883a 	mov	r17,r2
   25fb8:	1027883a 	mov	r19,r2
   25fbc:	003f9b06 	br	25e2c <__sfvwrite_r+0x200>
   25fc0:	b80b883a 	mov	r5,r23
   25fc4:	800d883a 	mov	r6,r16
   25fc8:	00265780 	call	26578 <memmove>
   25fcc:	90c00217 	ldw	r3,8(r18)
   25fd0:	90800017 	ldw	r2,0(r18)
   25fd4:	8023883a 	mov	r17,r16
   25fd8:	1c07c83a 	sub	r3,r3,r16
   25fdc:	1405883a 	add	r2,r2,r16
   25fe0:	90c00215 	stw	r3,8(r18)
   25fe4:	90800015 	stw	r2,0(r18)
   25fe8:	003fc406 	br	25efc <__sfvwrite_r+0x2d0>
   25fec:	a00d883a 	mov	r6,r20
   25ff0:	a021883a 	mov	r16,r20
   25ff4:	003f8106 	br	25dfc <__sfvwrite_r+0x1d0>
   25ff8:	b80b883a 	mov	r5,r23
   25ffc:	a00d883a 	mov	r6,r20
   26000:	00265780 	call	26578 <memmove>
   26004:	90c00217 	ldw	r3,8(r18)
   26008:	90800017 	ldw	r2,0(r18)
   2600c:	a021883a 	mov	r16,r20
   26010:	1d07c83a 	sub	r3,r3,r20
   26014:	1505883a 	add	r2,r2,r20
   26018:	a023883a 	mov	r17,r20
   2601c:	a027883a 	mov	r19,r20
   26020:	90c00215 	stw	r3,8(r18)
   26024:	90800015 	stw	r2,0(r18)
   26028:	003f8006 	br	25e2c <__sfvwrite_r+0x200>
   2602c:	b809883a 	mov	r4,r23
   26030:	01400284 	movi	r5,10
   26034:	980d883a 	mov	r6,r19
   26038:	00263f40 	call	263f4 <memchr>
   2603c:	10001726 	beq	r2,zero,2609c <__sfvwrite_r+0x470>
   26040:	15c5c83a 	sub	r2,r2,r23
   26044:	15000044 	addi	r20,r2,1
   26048:	00800044 	movi	r2,1
   2604c:	d8800015 	stw	r2,0(sp)
   26050:	003f9806 	br	25eb4 <__sfvwrite_r+0x288>
   26054:	b80b883a 	mov	r5,r23
   26058:	800d883a 	mov	r6,r16
   2605c:	00265780 	call	26578 <memmove>
   26060:	90c00017 	ldw	r3,0(r18)
   26064:	e009883a 	mov	r4,fp
   26068:	900b883a 	mov	r5,r18
   2606c:	1c07883a 	add	r3,r3,r16
   26070:	90c00015 	stw	r3,0(r18)
   26074:	8027883a 	mov	r19,r16
   26078:	002525c0 	call	2525c <_fflush_r>
   2607c:	103f6b26 	beq	r2,zero,25e2c <__sfvwrite_r+0x200>
   26080:	003f7f06 	br	25e80 <__sfvwrite_r+0x254>
   26084:	400b883a 	mov	r5,r8
   26088:	e009883a 	mov	r4,fp
   2608c:	002775c0 	call	2775c <_realloc_r>
   26090:	103f7626 	beq	r2,zero,25e6c <__sfvwrite_r+0x240>
   26094:	1023883a 	mov	r17,r2
   26098:	003f5006 	br	25ddc <__sfvwrite_r+0x1b0>
   2609c:	00c00044 	movi	r3,1
   260a0:	9d000044 	addi	r20,r19,1
   260a4:	d8c00015 	stw	r3,0(sp)
   260a8:	003f8206 	br	25eb4 <__sfvwrite_r+0x288>
   260ac:	9080030b 	ldhu	r2,12(r18)
   260b0:	00c00244 	movi	r3,9
   260b4:	013fffc4 	movi	r4,-1
   260b8:	10801014 	ori	r2,r2,64
   260bc:	9080030d 	sth	r2,12(r18)
   260c0:	e0c00015 	stw	r3,0(fp)
   260c4:	003f0606 	br	25ce0 <__sfvwrite_r+0xb4>

000260c8 <_fwalk_reent>:
   260c8:	defff704 	addi	sp,sp,-36
   260cc:	dcc00315 	stw	r19,12(sp)
   260d0:	24c0b804 	addi	r19,r4,736
   260d4:	dd800615 	stw	r22,24(sp)
   260d8:	dd400515 	stw	r21,20(sp)
   260dc:	dfc00815 	stw	ra,32(sp)
   260e0:	ddc00715 	stw	r23,28(sp)
   260e4:	dd000415 	stw	r20,16(sp)
   260e8:	dc800215 	stw	r18,8(sp)
   260ec:	dc400115 	stw	r17,4(sp)
   260f0:	dc000015 	stw	r16,0(sp)
   260f4:	202b883a 	mov	r21,r4
   260f8:	282d883a 	mov	r22,r5
   260fc:	00254e40 	call	254e4 <__sfp_lock_acquire>
   26100:	98002126 	beq	r19,zero,26188 <_fwalk_reent+0xc0>
   26104:	002f883a 	mov	r23,zero
   26108:	9c800117 	ldw	r18,4(r19)
   2610c:	9c000217 	ldw	r16,8(r19)
   26110:	90bfffc4 	addi	r2,r18,-1
   26114:	10000d16 	blt	r2,zero,2614c <_fwalk_reent+0x84>
   26118:	0023883a 	mov	r17,zero
   2611c:	053fffc4 	movi	r20,-1
   26120:	8080030f 	ldh	r2,12(r16)
   26124:	8c400044 	addi	r17,r17,1
   26128:	10000626 	beq	r2,zero,26144 <_fwalk_reent+0x7c>
   2612c:	8080038f 	ldh	r2,14(r16)
   26130:	800b883a 	mov	r5,r16
   26134:	a809883a 	mov	r4,r21
   26138:	15000226 	beq	r2,r20,26144 <_fwalk_reent+0x7c>
   2613c:	b03ee83a 	callr	r22
   26140:	b8aeb03a 	or	r23,r23,r2
   26144:	84001704 	addi	r16,r16,92
   26148:	947ff51e 	bne	r18,r17,26120 <_fwalk_reent+0x58>
   2614c:	9cc00017 	ldw	r19,0(r19)
   26150:	983fed1e 	bne	r19,zero,26108 <_fwalk_reent+0x40>
   26154:	00254e80 	call	254e8 <__sfp_lock_release>
   26158:	b805883a 	mov	r2,r23
   2615c:	dfc00817 	ldw	ra,32(sp)
   26160:	ddc00717 	ldw	r23,28(sp)
   26164:	dd800617 	ldw	r22,24(sp)
   26168:	dd400517 	ldw	r21,20(sp)
   2616c:	dd000417 	ldw	r20,16(sp)
   26170:	dcc00317 	ldw	r19,12(sp)
   26174:	dc800217 	ldw	r18,8(sp)
   26178:	dc400117 	ldw	r17,4(sp)
   2617c:	dc000017 	ldw	r16,0(sp)
   26180:	dec00904 	addi	sp,sp,36
   26184:	f800283a 	ret
   26188:	002f883a 	mov	r23,zero
   2618c:	003ff106 	br	26154 <_fwalk_reent+0x8c>

00026190 <_fwalk>:
   26190:	defff804 	addi	sp,sp,-32
   26194:	dcc00315 	stw	r19,12(sp)
   26198:	24c0b804 	addi	r19,r4,736
   2619c:	dd400515 	stw	r21,20(sp)
   261a0:	dfc00715 	stw	ra,28(sp)
   261a4:	dd800615 	stw	r22,24(sp)
   261a8:	dd000415 	stw	r20,16(sp)
   261ac:	dc800215 	stw	r18,8(sp)
   261b0:	dc400115 	stw	r17,4(sp)
   261b4:	dc000015 	stw	r16,0(sp)
   261b8:	282b883a 	mov	r21,r5
   261bc:	00254e40 	call	254e4 <__sfp_lock_acquire>
   261c0:	98001f26 	beq	r19,zero,26240 <_fwalk+0xb0>
   261c4:	002d883a 	mov	r22,zero
   261c8:	9c800117 	ldw	r18,4(r19)
   261cc:	9c000217 	ldw	r16,8(r19)
   261d0:	90bfffc4 	addi	r2,r18,-1
   261d4:	10000c16 	blt	r2,zero,26208 <_fwalk+0x78>
   261d8:	0023883a 	mov	r17,zero
   261dc:	053fffc4 	movi	r20,-1
   261e0:	8080030f 	ldh	r2,12(r16)
   261e4:	8c400044 	addi	r17,r17,1
   261e8:	10000526 	beq	r2,zero,26200 <_fwalk+0x70>
   261ec:	8080038f 	ldh	r2,14(r16)
   261f0:	8009883a 	mov	r4,r16
   261f4:	15000226 	beq	r2,r20,26200 <_fwalk+0x70>
   261f8:	a83ee83a 	callr	r21
   261fc:	b0acb03a 	or	r22,r22,r2
   26200:	84001704 	addi	r16,r16,92
   26204:	947ff61e 	bne	r18,r17,261e0 <_fwalk+0x50>
   26208:	9cc00017 	ldw	r19,0(r19)
   2620c:	983fee1e 	bne	r19,zero,261c8 <_fwalk+0x38>
   26210:	00254e80 	call	254e8 <__sfp_lock_release>
   26214:	b005883a 	mov	r2,r22
   26218:	dfc00717 	ldw	ra,28(sp)
   2621c:	dd800617 	ldw	r22,24(sp)
   26220:	dd400517 	ldw	r21,20(sp)
   26224:	dd000417 	ldw	r20,16(sp)
   26228:	dcc00317 	ldw	r19,12(sp)
   2622c:	dc800217 	ldw	r18,8(sp)
   26230:	dc400117 	ldw	r17,4(sp)
   26234:	dc000017 	ldw	r16,0(sp)
   26238:	dec00804 	addi	sp,sp,32
   2623c:	f800283a 	ret
   26240:	002d883a 	mov	r22,zero
   26244:	003ff206 	br	26210 <_fwalk+0x80>

00026248 <_isatty_r>:
   26248:	defffd04 	addi	sp,sp,-12
   2624c:	dc000015 	stw	r16,0(sp)
   26250:	040000f4 	movhi	r16,3
   26254:	840a5104 	addi	r16,r16,10564
   26258:	dc400115 	stw	r17,4(sp)
   2625c:	80000015 	stw	zero,0(r16)
   26260:	2023883a 	mov	r17,r4
   26264:	2809883a 	mov	r4,r5
   26268:	dfc00215 	stw	ra,8(sp)
   2626c:	002a7400 	call	2a740 <isatty>
   26270:	1007883a 	mov	r3,r2
   26274:	00bfffc4 	movi	r2,-1
   26278:	18800626 	beq	r3,r2,26294 <_isatty_r+0x4c>
   2627c:	1805883a 	mov	r2,r3
   26280:	dfc00217 	ldw	ra,8(sp)
   26284:	dc400117 	ldw	r17,4(sp)
   26288:	dc000017 	ldw	r16,0(sp)
   2628c:	dec00304 	addi	sp,sp,12
   26290:	f800283a 	ret
   26294:	80800017 	ldw	r2,0(r16)
   26298:	103ff826 	beq	r2,zero,2627c <_isatty_r+0x34>
   2629c:	88800015 	stw	r2,0(r17)
   262a0:	1805883a 	mov	r2,r3
   262a4:	dfc00217 	ldw	ra,8(sp)
   262a8:	dc400117 	ldw	r17,4(sp)
   262ac:	dc000017 	ldw	r16,0(sp)
   262b0:	dec00304 	addi	sp,sp,12
   262b4:	f800283a 	ret

000262b8 <__locale_charset>:
   262b8:	d0a00517 	ldw	r2,-32748(gp)
   262bc:	f800283a 	ret

000262c0 <_localeconv_r>:
   262c0:	008000f4 	movhi	r2,3
   262c4:	10bae104 	addi	r2,r2,-5244
   262c8:	f800283a 	ret

000262cc <localeconv>:
   262cc:	008000f4 	movhi	r2,3
   262d0:	10832d04 	addi	r2,r2,3252
   262d4:	11000017 	ldw	r4,0(r2)
   262d8:	00262c01 	jmpi	262c0 <_localeconv_r>

000262dc <_setlocale_r>:
   262dc:	defffc04 	addi	sp,sp,-16
   262e0:	00c000f4 	movhi	r3,3
   262e4:	18fab704 	addi	r3,r3,-5412
   262e8:	dc800215 	stw	r18,8(sp)
   262ec:	dc400115 	stw	r17,4(sp)
   262f0:	dc000015 	stw	r16,0(sp)
   262f4:	2023883a 	mov	r17,r4
   262f8:	2825883a 	mov	r18,r5
   262fc:	dfc00315 	stw	ra,12(sp)
   26300:	3021883a 	mov	r16,r6
   26304:	3009883a 	mov	r4,r6
   26308:	180b883a 	mov	r5,r3
   2630c:	30000926 	beq	r6,zero,26334 <_setlocale_r+0x58>
   26310:	0027dc00 	call	27dc0 <strcmp>
   26314:	8009883a 	mov	r4,r16
   26318:	014000f4 	movhi	r5,3
   2631c:	297ac804 	addi	r5,r5,-5344
   26320:	10000b1e 	bne	r2,zero,26350 <_setlocale_r+0x74>
   26324:	8c000d15 	stw	r16,52(r17)
   26328:	8c800c15 	stw	r18,48(r17)
   2632c:	00c000f4 	movhi	r3,3
   26330:	18fab704 	addi	r3,r3,-5412
   26334:	1805883a 	mov	r2,r3
   26338:	dfc00317 	ldw	ra,12(sp)
   2633c:	dc800217 	ldw	r18,8(sp)
   26340:	dc400117 	ldw	r17,4(sp)
   26344:	dc000017 	ldw	r16,0(sp)
   26348:	dec00404 	addi	sp,sp,16
   2634c:	f800283a 	ret
   26350:	0027dc00 	call	27dc0 <strcmp>
   26354:	0007883a 	mov	r3,zero
   26358:	103ff226 	beq	r2,zero,26324 <_setlocale_r+0x48>
   2635c:	003ff506 	br	26334 <_setlocale_r+0x58>

00026360 <setlocale>:
   26360:	018000f4 	movhi	r6,3
   26364:	31832d04 	addi	r6,r6,3252
   26368:	2007883a 	mov	r3,r4
   2636c:	31000017 	ldw	r4,0(r6)
   26370:	280d883a 	mov	r6,r5
   26374:	180b883a 	mov	r5,r3
   26378:	00262dc1 	jmpi	262dc <_setlocale_r>

0002637c <_lseek_r>:
   2637c:	defffd04 	addi	sp,sp,-12
   26380:	dc000015 	stw	r16,0(sp)
   26384:	040000f4 	movhi	r16,3
   26388:	840a5104 	addi	r16,r16,10564
   2638c:	dc400115 	stw	r17,4(sp)
   26390:	80000015 	stw	zero,0(r16)
   26394:	2023883a 	mov	r17,r4
   26398:	2809883a 	mov	r4,r5
   2639c:	300b883a 	mov	r5,r6
   263a0:	380d883a 	mov	r6,r7
   263a4:	dfc00215 	stw	ra,8(sp)
   263a8:	002a94c0 	call	2a94c <lseek>
   263ac:	1007883a 	mov	r3,r2
   263b0:	00bfffc4 	movi	r2,-1
   263b4:	18800626 	beq	r3,r2,263d0 <_lseek_r+0x54>
   263b8:	1805883a 	mov	r2,r3
   263bc:	dfc00217 	ldw	ra,8(sp)
   263c0:	dc400117 	ldw	r17,4(sp)
   263c4:	dc000017 	ldw	r16,0(sp)
   263c8:	dec00304 	addi	sp,sp,12
   263cc:	f800283a 	ret
   263d0:	80800017 	ldw	r2,0(r16)
   263d4:	103ff826 	beq	r2,zero,263b8 <_lseek_r+0x3c>
   263d8:	88800015 	stw	r2,0(r17)
   263dc:	1805883a 	mov	r2,r3
   263e0:	dfc00217 	ldw	ra,8(sp)
   263e4:	dc400117 	ldw	r17,4(sp)
   263e8:	dc000017 	ldw	r16,0(sp)
   263ec:	dec00304 	addi	sp,sp,12
   263f0:	f800283a 	ret

000263f4 <memchr>:
   263f4:	008000c4 	movi	r2,3
   263f8:	29403fcc 	andi	r5,r5,255
   263fc:	2007883a 	mov	r3,r4
   26400:	1180022e 	bgeu	r2,r6,2640c <memchr+0x18>
   26404:	2084703a 	and	r2,r4,r2
   26408:	10000b26 	beq	r2,zero,26438 <memchr+0x44>
   2640c:	313fffc4 	addi	r4,r6,-1
   26410:	3000051e 	bne	r6,zero,26428 <memchr+0x34>
   26414:	00002c06 	br	264c8 <memchr+0xd4>
   26418:	213fffc4 	addi	r4,r4,-1
   2641c:	00bfffc4 	movi	r2,-1
   26420:	18c00044 	addi	r3,r3,1
   26424:	20802826 	beq	r4,r2,264c8 <memchr+0xd4>
   26428:	18800003 	ldbu	r2,0(r3)
   2642c:	28bffa1e 	bne	r5,r2,26418 <memchr+0x24>
   26430:	1805883a 	mov	r2,r3
   26434:	f800283a 	ret
   26438:	0011883a 	mov	r8,zero
   2643c:	0007883a 	mov	r3,zero
   26440:	01c00104 	movi	r7,4
   26444:	4004923a 	slli	r2,r8,8
   26448:	18c00044 	addi	r3,r3,1
   2644c:	1151883a 	add	r8,r2,r5
   26450:	19fffc1e 	bne	r3,r7,26444 <memchr+0x50>
   26454:	02bfbff4 	movhi	r10,65279
   26458:	52bfbfc4 	addi	r10,r10,-257
   2645c:	02602074 	movhi	r9,32897
   26460:	4a602004 	addi	r9,r9,-32640
   26464:	02c000c4 	movi	r11,3
   26468:	20800017 	ldw	r2,0(r4)
   2646c:	31bfff04 	addi	r6,r6,-4
   26470:	200f883a 	mov	r7,r4
   26474:	1204f03a 	xor	r2,r2,r8
   26478:	1287883a 	add	r3,r2,r10
   2647c:	1a46703a 	and	r3,r3,r9
   26480:	0084303a 	nor	r2,zero,r2
   26484:	10c4703a 	and	r2,r2,r3
   26488:	10000b26 	beq	r2,zero,264b8 <memchr+0xc4>
   2648c:	20800003 	ldbu	r2,0(r4)
   26490:	28800f26 	beq	r5,r2,264d0 <memchr+0xdc>
   26494:	20800043 	ldbu	r2,1(r4)
   26498:	21c00044 	addi	r7,r4,1
   2649c:	28800c26 	beq	r5,r2,264d0 <memchr+0xdc>
   264a0:	20800083 	ldbu	r2,2(r4)
   264a4:	21c00084 	addi	r7,r4,2
   264a8:	28800926 	beq	r5,r2,264d0 <memchr+0xdc>
   264ac:	208000c3 	ldbu	r2,3(r4)
   264b0:	21c000c4 	addi	r7,r4,3
   264b4:	28800626 	beq	r5,r2,264d0 <memchr+0xdc>
   264b8:	21000104 	addi	r4,r4,4
   264bc:	59bfea36 	bltu	r11,r6,26468 <memchr+0x74>
   264c0:	2007883a 	mov	r3,r4
   264c4:	003fd106 	br	2640c <memchr+0x18>
   264c8:	0005883a 	mov	r2,zero
   264cc:	f800283a 	ret
   264d0:	3805883a 	mov	r2,r7
   264d4:	f800283a 	ret

000264d8 <memcpy>:
   264d8:	01c003c4 	movi	r7,15
   264dc:	2007883a 	mov	r3,r4
   264e0:	3980032e 	bgeu	r7,r6,264f0 <memcpy+0x18>
   264e4:	2904b03a 	or	r2,r5,r4
   264e8:	108000cc 	andi	r2,r2,3
   264ec:	10000926 	beq	r2,zero,26514 <memcpy+0x3c>
   264f0:	30000626 	beq	r6,zero,2650c <memcpy+0x34>
   264f4:	30cd883a 	add	r6,r6,r3
   264f8:	28800003 	ldbu	r2,0(r5)
   264fc:	29400044 	addi	r5,r5,1
   26500:	18800005 	stb	r2,0(r3)
   26504:	18c00044 	addi	r3,r3,1
   26508:	30fffb1e 	bne	r6,r3,264f8 <memcpy+0x20>
   2650c:	2005883a 	mov	r2,r4
   26510:	f800283a 	ret
   26514:	3811883a 	mov	r8,r7
   26518:	200f883a 	mov	r7,r4
   2651c:	28c00017 	ldw	r3,0(r5)
   26520:	31bffc04 	addi	r6,r6,-16
   26524:	38c00015 	stw	r3,0(r7)
   26528:	28800117 	ldw	r2,4(r5)
   2652c:	38800115 	stw	r2,4(r7)
   26530:	28c00217 	ldw	r3,8(r5)
   26534:	38c00215 	stw	r3,8(r7)
   26538:	28800317 	ldw	r2,12(r5)
   2653c:	29400404 	addi	r5,r5,16
   26540:	38800315 	stw	r2,12(r7)
   26544:	39c00404 	addi	r7,r7,16
   26548:	41bff436 	bltu	r8,r6,2651c <memcpy+0x44>
   2654c:	008000c4 	movi	r2,3
   26550:	1180072e 	bgeu	r2,r6,26570 <memcpy+0x98>
   26554:	1007883a 	mov	r3,r2
   26558:	28800017 	ldw	r2,0(r5)
   2655c:	31bfff04 	addi	r6,r6,-4
   26560:	29400104 	addi	r5,r5,4
   26564:	38800015 	stw	r2,0(r7)
   26568:	39c00104 	addi	r7,r7,4
   2656c:	19bffa36 	bltu	r3,r6,26558 <memcpy+0x80>
   26570:	3807883a 	mov	r3,r7
   26574:	003fde06 	br	264f0 <memcpy+0x18>

00026578 <memmove>:
   26578:	2807883a 	mov	r3,r5
   2657c:	2011883a 	mov	r8,r4
   26580:	29000c2e 	bgeu	r5,r4,265b4 <memmove+0x3c>
   26584:	298f883a 	add	r7,r5,r6
   26588:	21c00a2e 	bgeu	r4,r7,265b4 <memmove+0x3c>
   2658c:	30000726 	beq	r6,zero,265ac <memmove+0x34>
   26590:	2187883a 	add	r3,r4,r6
   26594:	198dc83a 	sub	r6,r3,r6
   26598:	39ffffc4 	addi	r7,r7,-1
   2659c:	38800003 	ldbu	r2,0(r7)
   265a0:	18ffffc4 	addi	r3,r3,-1
   265a4:	18800005 	stb	r2,0(r3)
   265a8:	19bffb1e 	bne	r3,r6,26598 <memmove+0x20>
   265ac:	2005883a 	mov	r2,r4
   265b0:	f800283a 	ret
   265b4:	01c003c4 	movi	r7,15
   265b8:	39800a36 	bltu	r7,r6,265e4 <memmove+0x6c>
   265bc:	303ffb26 	beq	r6,zero,265ac <memmove+0x34>
   265c0:	400f883a 	mov	r7,r8
   265c4:	320d883a 	add	r6,r6,r8
   265c8:	28800003 	ldbu	r2,0(r5)
   265cc:	29400044 	addi	r5,r5,1
   265d0:	38800005 	stb	r2,0(r7)
   265d4:	39c00044 	addi	r7,r7,1
   265d8:	39bffb1e 	bne	r7,r6,265c8 <memmove+0x50>
   265dc:	2005883a 	mov	r2,r4
   265e0:	f800283a 	ret
   265e4:	1904b03a 	or	r2,r3,r4
   265e8:	108000cc 	andi	r2,r2,3
   265ec:	103ff31e 	bne	r2,zero,265bc <memmove+0x44>
   265f0:	3811883a 	mov	r8,r7
   265f4:	180b883a 	mov	r5,r3
   265f8:	200f883a 	mov	r7,r4
   265fc:	28c00017 	ldw	r3,0(r5)
   26600:	31bffc04 	addi	r6,r6,-16
   26604:	38c00015 	stw	r3,0(r7)
   26608:	28800117 	ldw	r2,4(r5)
   2660c:	38800115 	stw	r2,4(r7)
   26610:	28c00217 	ldw	r3,8(r5)
   26614:	38c00215 	stw	r3,8(r7)
   26618:	28800317 	ldw	r2,12(r5)
   2661c:	29400404 	addi	r5,r5,16
   26620:	38800315 	stw	r2,12(r7)
   26624:	39c00404 	addi	r7,r7,16
   26628:	41bff436 	bltu	r8,r6,265fc <memmove+0x84>
   2662c:	008000c4 	movi	r2,3
   26630:	1180072e 	bgeu	r2,r6,26650 <memmove+0xd8>
   26634:	1007883a 	mov	r3,r2
   26638:	28800017 	ldw	r2,0(r5)
   2663c:	31bfff04 	addi	r6,r6,-4
   26640:	29400104 	addi	r5,r5,4
   26644:	38800015 	stw	r2,0(r7)
   26648:	39c00104 	addi	r7,r7,4
   2664c:	19bffa36 	bltu	r3,r6,26638 <memmove+0xc0>
   26650:	3811883a 	mov	r8,r7
   26654:	003fd906 	br	265bc <memmove+0x44>

00026658 <memset>:
   26658:	008000c4 	movi	r2,3
   2665c:	29403fcc 	andi	r5,r5,255
   26660:	2007883a 	mov	r3,r4
   26664:	1180022e 	bgeu	r2,r6,26670 <memset+0x18>
   26668:	2084703a 	and	r2,r4,r2
   2666c:	10000826 	beq	r2,zero,26690 <memset+0x38>
   26670:	30000526 	beq	r6,zero,26688 <memset+0x30>
   26674:	2805883a 	mov	r2,r5
   26678:	30cd883a 	add	r6,r6,r3
   2667c:	18800005 	stb	r2,0(r3)
   26680:	18c00044 	addi	r3,r3,1
   26684:	19bffd1e 	bne	r3,r6,2667c <memset+0x24>
   26688:	2005883a 	mov	r2,r4
   2668c:	f800283a 	ret
   26690:	2804923a 	slli	r2,r5,8
   26694:	020003c4 	movi	r8,15
   26698:	200f883a 	mov	r7,r4
   2669c:	2884b03a 	or	r2,r5,r2
   266a0:	1006943a 	slli	r3,r2,16
   266a4:	10c6b03a 	or	r3,r2,r3
   266a8:	41800a2e 	bgeu	r8,r6,266d4 <memset+0x7c>
   266ac:	4005883a 	mov	r2,r8
   266b0:	31bffc04 	addi	r6,r6,-16
   266b4:	38c00015 	stw	r3,0(r7)
   266b8:	38c00115 	stw	r3,4(r7)
   266bc:	38c00215 	stw	r3,8(r7)
   266c0:	38c00315 	stw	r3,12(r7)
   266c4:	39c00404 	addi	r7,r7,16
   266c8:	11bff936 	bltu	r2,r6,266b0 <memset+0x58>
   266cc:	008000c4 	movi	r2,3
   266d0:	1180052e 	bgeu	r2,r6,266e8 <memset+0x90>
   266d4:	31bfff04 	addi	r6,r6,-4
   266d8:	008000c4 	movi	r2,3
   266dc:	38c00015 	stw	r3,0(r7)
   266e0:	39c00104 	addi	r7,r7,4
   266e4:	11bffb36 	bltu	r2,r6,266d4 <memset+0x7c>
   266e8:	3807883a 	mov	r3,r7
   266ec:	003fe006 	br	26670 <memset+0x18>

000266f0 <_Bfree>:
   266f0:	28000826 	beq	r5,zero,26714 <_Bfree+0x24>
   266f4:	28800117 	ldw	r2,4(r5)
   266f8:	21001317 	ldw	r4,76(r4)
   266fc:	1085883a 	add	r2,r2,r2
   26700:	1085883a 	add	r2,r2,r2
   26704:	1105883a 	add	r2,r2,r4
   26708:	10c00017 	ldw	r3,0(r2)
   2670c:	28c00015 	stw	r3,0(r5)
   26710:	11400015 	stw	r5,0(r2)
   26714:	f800283a 	ret

00026718 <__hi0bits>:
   26718:	20bfffec 	andhi	r2,r4,65535
   2671c:	10001426 	beq	r2,zero,26770 <__hi0bits+0x58>
   26720:	0007883a 	mov	r3,zero
   26724:	20bfc02c 	andhi	r2,r4,65280
   26728:	1000021e 	bne	r2,zero,26734 <__hi0bits+0x1c>
   2672c:	2008923a 	slli	r4,r4,8
   26730:	18c00204 	addi	r3,r3,8
   26734:	20bc002c 	andhi	r2,r4,61440
   26738:	1000021e 	bne	r2,zero,26744 <__hi0bits+0x2c>
   2673c:	2008913a 	slli	r4,r4,4
   26740:	18c00104 	addi	r3,r3,4
   26744:	20b0002c 	andhi	r2,r4,49152
   26748:	1000031e 	bne	r2,zero,26758 <__hi0bits+0x40>
   2674c:	2105883a 	add	r2,r4,r4
   26750:	18c00084 	addi	r3,r3,2
   26754:	1089883a 	add	r4,r2,r2
   26758:	20000316 	blt	r4,zero,26768 <__hi0bits+0x50>
   2675c:	2090002c 	andhi	r2,r4,16384
   26760:	10000626 	beq	r2,zero,2677c <__hi0bits+0x64>
   26764:	18c00044 	addi	r3,r3,1
   26768:	1805883a 	mov	r2,r3
   2676c:	f800283a 	ret
   26770:	2008943a 	slli	r4,r4,16
   26774:	00c00404 	movi	r3,16
   26778:	003fea06 	br	26724 <__hi0bits+0xc>
   2677c:	00c00804 	movi	r3,32
   26780:	1805883a 	mov	r2,r3
   26784:	f800283a 	ret

00026788 <__lo0bits>:
   26788:	20c00017 	ldw	r3,0(r4)
   2678c:	188001cc 	andi	r2,r3,7
   26790:	10000a26 	beq	r2,zero,267bc <__lo0bits+0x34>
   26794:	1880004c 	andi	r2,r3,1
   26798:	1005003a 	cmpeq	r2,r2,zero
   2679c:	10002126 	beq	r2,zero,26824 <__lo0bits+0x9c>
   267a0:	1880008c 	andi	r2,r3,2
   267a4:	1000251e 	bne	r2,zero,2683c <__lo0bits+0xb4>
   267a8:	1804d0ba 	srli	r2,r3,2
   267ac:	01400084 	movi	r5,2
   267b0:	20800015 	stw	r2,0(r4)
   267b4:	2805883a 	mov	r2,r5
   267b8:	f800283a 	ret
   267bc:	18bfffcc 	andi	r2,r3,65535
   267c0:	10001526 	beq	r2,zero,26818 <__lo0bits+0x90>
   267c4:	000b883a 	mov	r5,zero
   267c8:	18803fcc 	andi	r2,r3,255
   267cc:	1000021e 	bne	r2,zero,267d8 <__lo0bits+0x50>
   267d0:	1806d23a 	srli	r3,r3,8
   267d4:	29400204 	addi	r5,r5,8
   267d8:	188003cc 	andi	r2,r3,15
   267dc:	1000021e 	bne	r2,zero,267e8 <__lo0bits+0x60>
   267e0:	1806d13a 	srli	r3,r3,4
   267e4:	29400104 	addi	r5,r5,4
   267e8:	188000cc 	andi	r2,r3,3
   267ec:	1000021e 	bne	r2,zero,267f8 <__lo0bits+0x70>
   267f0:	1806d0ba 	srli	r3,r3,2
   267f4:	29400084 	addi	r5,r5,2
   267f8:	1880004c 	andi	r2,r3,1
   267fc:	1000031e 	bne	r2,zero,2680c <__lo0bits+0x84>
   26800:	1806d07a 	srli	r3,r3,1
   26804:	18000a26 	beq	r3,zero,26830 <__lo0bits+0xa8>
   26808:	29400044 	addi	r5,r5,1
   2680c:	2805883a 	mov	r2,r5
   26810:	20c00015 	stw	r3,0(r4)
   26814:	f800283a 	ret
   26818:	1806d43a 	srli	r3,r3,16
   2681c:	01400404 	movi	r5,16
   26820:	003fe906 	br	267c8 <__lo0bits+0x40>
   26824:	000b883a 	mov	r5,zero
   26828:	2805883a 	mov	r2,r5
   2682c:	f800283a 	ret
   26830:	01400804 	movi	r5,32
   26834:	2805883a 	mov	r2,r5
   26838:	f800283a 	ret
   2683c:	1804d07a 	srli	r2,r3,1
   26840:	01400044 	movi	r5,1
   26844:	20800015 	stw	r2,0(r4)
   26848:	003fda06 	br	267b4 <__lo0bits+0x2c>

0002684c <__mcmp>:
   2684c:	20800417 	ldw	r2,16(r4)
   26850:	28c00417 	ldw	r3,16(r5)
   26854:	10cfc83a 	sub	r7,r2,r3
   26858:	38000c1e 	bne	r7,zero,2688c <__mcmp+0x40>
   2685c:	18c5883a 	add	r2,r3,r3
   26860:	1085883a 	add	r2,r2,r2
   26864:	10c00504 	addi	r3,r2,20
   26868:	21000504 	addi	r4,r4,20
   2686c:	28cb883a 	add	r5,r5,r3
   26870:	2085883a 	add	r2,r4,r2
   26874:	10bfff04 	addi	r2,r2,-4
   26878:	297fff04 	addi	r5,r5,-4
   2687c:	11800017 	ldw	r6,0(r2)
   26880:	28c00017 	ldw	r3,0(r5)
   26884:	30c0031e 	bne	r6,r3,26894 <__mcmp+0x48>
   26888:	20bffa36 	bltu	r4,r2,26874 <__mcmp+0x28>
   2688c:	3805883a 	mov	r2,r7
   26890:	f800283a 	ret
   26894:	30c00336 	bltu	r6,r3,268a4 <__mcmp+0x58>
   26898:	01c00044 	movi	r7,1
   2689c:	3805883a 	mov	r2,r7
   268a0:	f800283a 	ret
   268a4:	01ffffc4 	movi	r7,-1
   268a8:	003ff806 	br	2688c <__mcmp+0x40>

000268ac <__ulp>:
   268ac:	295ffc2c 	andhi	r5,r5,32752
   268b0:	013f3034 	movhi	r4,64704
   268b4:	290b883a 	add	r5,r5,r4
   268b8:	0145c83a 	sub	r2,zero,r5
   268bc:	1007d53a 	srai	r3,r2,20
   268c0:	000d883a 	mov	r6,zero
   268c4:	0140040e 	bge	zero,r5,268d8 <__ulp+0x2c>
   268c8:	280f883a 	mov	r7,r5
   268cc:	3807883a 	mov	r3,r7
   268d0:	3005883a 	mov	r2,r6
   268d4:	f800283a 	ret
   268d8:	008004c4 	movi	r2,19
   268dc:	193ffb04 	addi	r4,r3,-20
   268e0:	10c00c0e 	bge	r2,r3,26914 <__ulp+0x68>
   268e4:	008007c4 	movi	r2,31
   268e8:	1107c83a 	sub	r3,r2,r4
   268ec:	00800784 	movi	r2,30
   268f0:	01400044 	movi	r5,1
   268f4:	11000216 	blt	r2,r4,26900 <__ulp+0x54>
   268f8:	00800044 	movi	r2,1
   268fc:	10ca983a 	sll	r5,r2,r3
   26900:	000f883a 	mov	r7,zero
   26904:	280d883a 	mov	r6,r5
   26908:	3807883a 	mov	r3,r7
   2690c:	3005883a 	mov	r2,r6
   26910:	f800283a 	ret
   26914:	00800234 	movhi	r2,8
   26918:	10cfd83a 	sra	r7,r2,r3
   2691c:	000d883a 	mov	r6,zero
   26920:	3005883a 	mov	r2,r6
   26924:	3807883a 	mov	r3,r7
   26928:	f800283a 	ret

0002692c <__b2d>:
   2692c:	20800417 	ldw	r2,16(r4)
   26930:	defff904 	addi	sp,sp,-28
   26934:	dd000415 	stw	r20,16(sp)
   26938:	1085883a 	add	r2,r2,r2
   2693c:	25000504 	addi	r20,r4,20
   26940:	1085883a 	add	r2,r2,r2
   26944:	dc000015 	stw	r16,0(sp)
   26948:	a0a1883a 	add	r16,r20,r2
   2694c:	dd400515 	stw	r21,20(sp)
   26950:	857fff17 	ldw	r21,-4(r16)
   26954:	dc400115 	stw	r17,4(sp)
   26958:	dfc00615 	stw	ra,24(sp)
   2695c:	a809883a 	mov	r4,r21
   26960:	2823883a 	mov	r17,r5
   26964:	dcc00315 	stw	r19,12(sp)
   26968:	dc800215 	stw	r18,8(sp)
   2696c:	00267180 	call	26718 <__hi0bits>
   26970:	100b883a 	mov	r5,r2
   26974:	00800804 	movi	r2,32
   26978:	1145c83a 	sub	r2,r2,r5
   2697c:	88800015 	stw	r2,0(r17)
   26980:	00800284 	movi	r2,10
   26984:	80ffff04 	addi	r3,r16,-4
   26988:	11401416 	blt	r2,r5,269dc <__b2d+0xb0>
   2698c:	008002c4 	movi	r2,11
   26990:	1149c83a 	sub	r4,r2,r5
   26994:	a0c02736 	bltu	r20,r3,26a34 <__b2d+0x108>
   26998:	000d883a 	mov	r6,zero
   2699c:	28800544 	addi	r2,r5,21
   269a0:	a906d83a 	srl	r3,r21,r4
   269a4:	a884983a 	sll	r2,r21,r2
   269a8:	1ccffc34 	orhi	r19,r3,16368
   269ac:	11a4b03a 	or	r18,r2,r6
   269b0:	9005883a 	mov	r2,r18
   269b4:	9807883a 	mov	r3,r19
   269b8:	dfc00617 	ldw	ra,24(sp)
   269bc:	dd400517 	ldw	r21,20(sp)
   269c0:	dd000417 	ldw	r20,16(sp)
   269c4:	dcc00317 	ldw	r19,12(sp)
   269c8:	dc800217 	ldw	r18,8(sp)
   269cc:	dc400117 	ldw	r17,4(sp)
   269d0:	dc000017 	ldw	r16,0(sp)
   269d4:	dec00704 	addi	sp,sp,28
   269d8:	f800283a 	ret
   269dc:	a0c00e36 	bltu	r20,r3,26a18 <__b2d+0xec>
   269e0:	293ffd44 	addi	r4,r5,-11
   269e4:	000d883a 	mov	r6,zero
   269e8:	20000f26 	beq	r4,zero,26a28 <__b2d+0xfc>
   269ec:	00800804 	movi	r2,32
   269f0:	110bc83a 	sub	r5,r2,r4
   269f4:	a0c01236 	bltu	r20,r3,26a40 <__b2d+0x114>
   269f8:	000f883a 	mov	r7,zero
   269fc:	a904983a 	sll	r2,r21,r4
   26a00:	3146d83a 	srl	r3,r6,r5
   26a04:	3108983a 	sll	r4,r6,r4
   26a08:	108ffc34 	orhi	r2,r2,16368
   26a0c:	18a6b03a 	or	r19,r3,r2
   26a10:	3924b03a 	or	r18,r7,r4
   26a14:	003fe606 	br	269b0 <__b2d+0x84>
   26a18:	293ffd44 	addi	r4,r5,-11
   26a1c:	81bffe17 	ldw	r6,-8(r16)
   26a20:	80fffe04 	addi	r3,r16,-8
   26a24:	203ff11e 	bne	r4,zero,269ec <__b2d+0xc0>
   26a28:	accffc34 	orhi	r19,r21,16368
   26a2c:	3025883a 	mov	r18,r6
   26a30:	003fdf06 	br	269b0 <__b2d+0x84>
   26a34:	18bfff17 	ldw	r2,-4(r3)
   26a38:	110cd83a 	srl	r6,r2,r4
   26a3c:	003fd706 	br	2699c <__b2d+0x70>
   26a40:	18bfff17 	ldw	r2,-4(r3)
   26a44:	114ed83a 	srl	r7,r2,r5
   26a48:	003fec06 	br	269fc <__b2d+0xd0>

00026a4c <__ratio>:
   26a4c:	defff904 	addi	sp,sp,-28
   26a50:	dc400215 	stw	r17,8(sp)
   26a54:	2823883a 	mov	r17,r5
   26a58:	d80b883a 	mov	r5,sp
   26a5c:	dfc00615 	stw	ra,24(sp)
   26a60:	dd000515 	stw	r20,20(sp)
   26a64:	dcc00415 	stw	r19,16(sp)
   26a68:	dc800315 	stw	r18,12(sp)
   26a6c:	2025883a 	mov	r18,r4
   26a70:	002692c0 	call	2692c <__b2d>
   26a74:	8809883a 	mov	r4,r17
   26a78:	d9400104 	addi	r5,sp,4
   26a7c:	1027883a 	mov	r19,r2
   26a80:	1829883a 	mov	r20,r3
   26a84:	002692c0 	call	2692c <__b2d>
   26a88:	89000417 	ldw	r4,16(r17)
   26a8c:	91c00417 	ldw	r7,16(r18)
   26a90:	d9800117 	ldw	r6,4(sp)
   26a94:	180b883a 	mov	r5,r3
   26a98:	390fc83a 	sub	r7,r7,r4
   26a9c:	1009883a 	mov	r4,r2
   26aa0:	d8800017 	ldw	r2,0(sp)
   26aa4:	380e917a 	slli	r7,r7,5
   26aa8:	2011883a 	mov	r8,r4
   26aac:	1185c83a 	sub	r2,r2,r6
   26ab0:	11c5883a 	add	r2,r2,r7
   26ab4:	1006953a 	slli	r3,r2,20
   26ab8:	2813883a 	mov	r9,r5
   26abc:	00800d0e 	bge	zero,r2,26af4 <__ratio+0xa8>
   26ac0:	1d29883a 	add	r20,r3,r20
   26ac4:	a00b883a 	mov	r5,r20
   26ac8:	480f883a 	mov	r7,r9
   26acc:	9809883a 	mov	r4,r19
   26ad0:	400d883a 	mov	r6,r8
   26ad4:	00294a80 	call	294a8 <__divdf3>
   26ad8:	dfc00617 	ldw	ra,24(sp)
   26adc:	dd000517 	ldw	r20,20(sp)
   26ae0:	dcc00417 	ldw	r19,16(sp)
   26ae4:	dc800317 	ldw	r18,12(sp)
   26ae8:	dc400217 	ldw	r17,8(sp)
   26aec:	dec00704 	addi	sp,sp,28
   26af0:	f800283a 	ret
   26af4:	28d3c83a 	sub	r9,r5,r3
   26af8:	003ff206 	br	26ac4 <__ratio+0x78>

00026afc <_mprec_log10>:
   26afc:	defffe04 	addi	sp,sp,-8
   26b00:	008005c4 	movi	r2,23
   26b04:	dc000015 	stw	r16,0(sp)
   26b08:	dfc00115 	stw	ra,4(sp)
   26b0c:	2021883a 	mov	r16,r4
   26b10:	11000c16 	blt	r2,r4,26b44 <_mprec_log10+0x48>
   26b14:	200490fa 	slli	r2,r4,3
   26b18:	00c000f4 	movhi	r3,3
   26b1c:	18faed04 	addi	r3,r3,-5196
   26b20:	10c5883a 	add	r2,r2,r3
   26b24:	12400117 	ldw	r9,4(r2)
   26b28:	12000017 	ldw	r8,0(r2)
   26b2c:	4807883a 	mov	r3,r9
   26b30:	4005883a 	mov	r2,r8
   26b34:	dfc00117 	ldw	ra,4(sp)
   26b38:	dc000017 	ldw	r16,0(sp)
   26b3c:	dec00204 	addi	sp,sp,8
   26b40:	f800283a 	ret
   26b44:	0011883a 	mov	r8,zero
   26b48:	024ffc34 	movhi	r9,16368
   26b4c:	0005883a 	mov	r2,zero
   26b50:	00d00934 	movhi	r3,16420
   26b54:	480b883a 	mov	r5,r9
   26b58:	4009883a 	mov	r4,r8
   26b5c:	180f883a 	mov	r7,r3
   26b60:	100d883a 	mov	r6,r2
   26b64:	00290e40 	call	290e4 <__muldf3>
   26b68:	843fffc4 	addi	r16,r16,-1
   26b6c:	1011883a 	mov	r8,r2
   26b70:	1813883a 	mov	r9,r3
   26b74:	803ff51e 	bne	r16,zero,26b4c <_mprec_log10+0x50>
   26b78:	4005883a 	mov	r2,r8
   26b7c:	4807883a 	mov	r3,r9
   26b80:	dfc00117 	ldw	ra,4(sp)
   26b84:	dc000017 	ldw	r16,0(sp)
   26b88:	dec00204 	addi	sp,sp,8
   26b8c:	f800283a 	ret

00026b90 <__copybits>:
   26b90:	297fffc4 	addi	r5,r5,-1
   26b94:	30800417 	ldw	r2,16(r6)
   26b98:	280bd17a 	srai	r5,r5,5
   26b9c:	31800504 	addi	r6,r6,20
   26ba0:	1085883a 	add	r2,r2,r2
   26ba4:	294b883a 	add	r5,r5,r5
   26ba8:	294b883a 	add	r5,r5,r5
   26bac:	1085883a 	add	r2,r2,r2
   26bb0:	290b883a 	add	r5,r5,r4
   26bb4:	3087883a 	add	r3,r6,r2
   26bb8:	29400104 	addi	r5,r5,4
   26bbc:	30c0052e 	bgeu	r6,r3,26bd4 <__copybits+0x44>
   26bc0:	30800017 	ldw	r2,0(r6)
   26bc4:	31800104 	addi	r6,r6,4
   26bc8:	20800015 	stw	r2,0(r4)
   26bcc:	21000104 	addi	r4,r4,4
   26bd0:	30fffb36 	bltu	r6,r3,26bc0 <__copybits+0x30>
   26bd4:	2140032e 	bgeu	r4,r5,26be4 <__copybits+0x54>
   26bd8:	20000015 	stw	zero,0(r4)
   26bdc:	21000104 	addi	r4,r4,4
   26be0:	217ffd36 	bltu	r4,r5,26bd8 <__copybits+0x48>
   26be4:	f800283a 	ret

00026be8 <__any_on>:
   26be8:	20800417 	ldw	r2,16(r4)
   26bec:	2807d17a 	srai	r3,r5,5
   26bf0:	21000504 	addi	r4,r4,20
   26bf4:	10c00d0e 	bge	r2,r3,26c2c <__any_on+0x44>
   26bf8:	1085883a 	add	r2,r2,r2
   26bfc:	1085883a 	add	r2,r2,r2
   26c00:	208d883a 	add	r6,r4,r2
   26c04:	2180182e 	bgeu	r4,r6,26c68 <__any_on+0x80>
   26c08:	30bfff17 	ldw	r2,-4(r6)
   26c0c:	30ffff04 	addi	r3,r6,-4
   26c10:	1000041e 	bne	r2,zero,26c24 <__any_on+0x3c>
   26c14:	20c0142e 	bgeu	r4,r3,26c68 <__any_on+0x80>
   26c18:	18ffff04 	addi	r3,r3,-4
   26c1c:	18800017 	ldw	r2,0(r3)
   26c20:	103ffc26 	beq	r2,zero,26c14 <__any_on+0x2c>
   26c24:	00800044 	movi	r2,1
   26c28:	f800283a 	ret
   26c2c:	18800a0e 	bge	r3,r2,26c58 <__any_on+0x70>
   26c30:	294007cc 	andi	r5,r5,31
   26c34:	28000826 	beq	r5,zero,26c58 <__any_on+0x70>
   26c38:	18c5883a 	add	r2,r3,r3
   26c3c:	1085883a 	add	r2,r2,r2
   26c40:	208d883a 	add	r6,r4,r2
   26c44:	30c00017 	ldw	r3,0(r6)
   26c48:	1944d83a 	srl	r2,r3,r5
   26c4c:	1144983a 	sll	r2,r2,r5
   26c50:	18bff41e 	bne	r3,r2,26c24 <__any_on+0x3c>
   26c54:	003feb06 	br	26c04 <__any_on+0x1c>
   26c58:	18c5883a 	add	r2,r3,r3
   26c5c:	1085883a 	add	r2,r2,r2
   26c60:	208d883a 	add	r6,r4,r2
   26c64:	003fe706 	br	26c04 <__any_on+0x1c>
   26c68:	0005883a 	mov	r2,zero
   26c6c:	f800283a 	ret

00026c70 <_Balloc>:
   26c70:	20c01317 	ldw	r3,76(r4)
   26c74:	defffb04 	addi	sp,sp,-20
   26c78:	dcc00315 	stw	r19,12(sp)
   26c7c:	dc800215 	stw	r18,8(sp)
   26c80:	dfc00415 	stw	ra,16(sp)
   26c84:	2825883a 	mov	r18,r5
   26c88:	dc400115 	stw	r17,4(sp)
   26c8c:	dc000015 	stw	r16,0(sp)
   26c90:	2027883a 	mov	r19,r4
   26c94:	01800404 	movi	r6,16
   26c98:	01400104 	movi	r5,4
   26c9c:	18001726 	beq	r3,zero,26cfc <_Balloc+0x8c>
   26ca0:	01400044 	movi	r5,1
   26ca4:	9485883a 	add	r2,r18,r18
   26ca8:	2ca2983a 	sll	r17,r5,r18
   26cac:	1085883a 	add	r2,r2,r2
   26cb0:	10c7883a 	add	r3,r2,r3
   26cb4:	1c000017 	ldw	r16,0(r3)
   26cb8:	8c4d883a 	add	r6,r17,r17
   26cbc:	318d883a 	add	r6,r6,r6
   26cc0:	9809883a 	mov	r4,r19
   26cc4:	31800504 	addi	r6,r6,20
   26cc8:	80001226 	beq	r16,zero,26d14 <_Balloc+0xa4>
   26ccc:	80800017 	ldw	r2,0(r16)
   26cd0:	18800015 	stw	r2,0(r3)
   26cd4:	80000415 	stw	zero,16(r16)
   26cd8:	80000315 	stw	zero,12(r16)
   26cdc:	8005883a 	mov	r2,r16
   26ce0:	dfc00417 	ldw	ra,16(sp)
   26ce4:	dcc00317 	ldw	r19,12(sp)
   26ce8:	dc800217 	ldw	r18,8(sp)
   26cec:	dc400117 	ldw	r17,4(sp)
   26cf0:	dc000017 	ldw	r16,0(sp)
   26cf4:	dec00504 	addi	sp,sp,20
   26cf8:	f800283a 	ret
   26cfc:	0027e7c0 	call	27e7c <_calloc_r>
   26d00:	1007883a 	mov	r3,r2
   26d04:	0021883a 	mov	r16,zero
   26d08:	98801315 	stw	r2,76(r19)
   26d0c:	103fe41e 	bne	r2,zero,26ca0 <_Balloc+0x30>
   26d10:	003ff206 	br	26cdc <_Balloc+0x6c>
   26d14:	0027e7c0 	call	27e7c <_calloc_r>
   26d18:	103ff026 	beq	r2,zero,26cdc <_Balloc+0x6c>
   26d1c:	1021883a 	mov	r16,r2
   26d20:	14800115 	stw	r18,4(r2)
   26d24:	14400215 	stw	r17,8(r2)
   26d28:	003fea06 	br	26cd4 <_Balloc+0x64>

00026d2c <__d2b>:
   26d2c:	defff504 	addi	sp,sp,-44
   26d30:	dcc00515 	stw	r19,20(sp)
   26d34:	04c00044 	movi	r19,1
   26d38:	dc000215 	stw	r16,8(sp)
   26d3c:	2821883a 	mov	r16,r5
   26d40:	980b883a 	mov	r5,r19
   26d44:	ddc00915 	stw	r23,36(sp)
   26d48:	dd800815 	stw	r22,32(sp)
   26d4c:	dd400715 	stw	r21,28(sp)
   26d50:	dd000615 	stw	r20,24(sp)
   26d54:	dc800415 	stw	r18,16(sp)
   26d58:	dc400315 	stw	r17,12(sp)
   26d5c:	dfc00a15 	stw	ra,40(sp)
   26d60:	3023883a 	mov	r17,r6
   26d64:	382d883a 	mov	r22,r7
   26d68:	ddc00b17 	ldw	r23,44(sp)
   26d6c:	0026c700 	call	26c70 <_Balloc>
   26d70:	1025883a 	mov	r18,r2
   26d74:	00a00034 	movhi	r2,32768
   26d78:	10bfffc4 	addi	r2,r2,-1
   26d7c:	8888703a 	and	r4,r17,r2
   26d80:	202ad53a 	srli	r21,r4,20
   26d84:	00800434 	movhi	r2,16
   26d88:	10bfffc4 	addi	r2,r2,-1
   26d8c:	8886703a 	and	r3,r17,r2
   26d90:	a829003a 	cmpeq	r20,r21,zero
   26d94:	800b883a 	mov	r5,r16
   26d98:	d8c00115 	stw	r3,4(sp)
   26d9c:	94000504 	addi	r16,r18,20
   26da0:	a000021e 	bne	r20,zero,26dac <__d2b+0x80>
   26da4:	18c00434 	orhi	r3,r3,16
   26da8:	d8c00115 	stw	r3,4(sp)
   26dac:	28002726 	beq	r5,zero,26e4c <__d2b+0x120>
   26db0:	d809883a 	mov	r4,sp
   26db4:	d9400015 	stw	r5,0(sp)
   26db8:	00267880 	call	26788 <__lo0bits>
   26dbc:	100d883a 	mov	r6,r2
   26dc0:	10003526 	beq	r2,zero,26e98 <__d2b+0x16c>
   26dc4:	d8c00117 	ldw	r3,4(sp)
   26dc8:	00800804 	movi	r2,32
   26dcc:	1185c83a 	sub	r2,r2,r6
   26dd0:	d9000017 	ldw	r4,0(sp)
   26dd4:	1886983a 	sll	r3,r3,r2
   26dd8:	1906b03a 	or	r3,r3,r4
   26ddc:	90c00515 	stw	r3,20(r18)
   26de0:	d8c00117 	ldw	r3,4(sp)
   26de4:	1986d83a 	srl	r3,r3,r6
   26de8:	d8c00115 	stw	r3,4(sp)
   26dec:	180b003a 	cmpeq	r5,r3,zero
   26df0:	00800084 	movi	r2,2
   26df4:	114bc83a 	sub	r5,r2,r5
   26df8:	80c00115 	stw	r3,4(r16)
   26dfc:	91400415 	stw	r5,16(r18)
   26e00:	a0001a1e 	bne	r20,zero,26e6c <__d2b+0x140>
   26e04:	3545883a 	add	r2,r6,r21
   26e08:	10bef344 	addi	r2,r2,-1075
   26e0c:	00c00d44 	movi	r3,53
   26e10:	b0800015 	stw	r2,0(r22)
   26e14:	1987c83a 	sub	r3,r3,r6
   26e18:	b8c00015 	stw	r3,0(r23)
   26e1c:	9005883a 	mov	r2,r18
   26e20:	dfc00a17 	ldw	ra,40(sp)
   26e24:	ddc00917 	ldw	r23,36(sp)
   26e28:	dd800817 	ldw	r22,32(sp)
   26e2c:	dd400717 	ldw	r21,28(sp)
   26e30:	dd000617 	ldw	r20,24(sp)
   26e34:	dcc00517 	ldw	r19,20(sp)
   26e38:	dc800417 	ldw	r18,16(sp)
   26e3c:	dc400317 	ldw	r17,12(sp)
   26e40:	dc000217 	ldw	r16,8(sp)
   26e44:	dec00b04 	addi	sp,sp,44
   26e48:	f800283a 	ret
   26e4c:	d9000104 	addi	r4,sp,4
   26e50:	00267880 	call	26788 <__lo0bits>
   26e54:	11800804 	addi	r6,r2,32
   26e58:	d8800117 	ldw	r2,4(sp)
   26e5c:	94c00415 	stw	r19,16(r18)
   26e60:	980b883a 	mov	r5,r19
   26e64:	90800515 	stw	r2,20(r18)
   26e68:	a03fe626 	beq	r20,zero,26e04 <__d2b+0xd8>
   26e6c:	2945883a 	add	r2,r5,r5
   26e70:	1085883a 	add	r2,r2,r2
   26e74:	1405883a 	add	r2,r2,r16
   26e78:	113fff17 	ldw	r4,-4(r2)
   26e7c:	30fef384 	addi	r3,r6,-1074
   26e80:	2820917a 	slli	r16,r5,5
   26e84:	b0c00015 	stw	r3,0(r22)
   26e88:	00267180 	call	26718 <__hi0bits>
   26e8c:	80a1c83a 	sub	r16,r16,r2
   26e90:	bc000015 	stw	r16,0(r23)
   26e94:	003fe106 	br	26e1c <__d2b+0xf0>
   26e98:	d8800017 	ldw	r2,0(sp)
   26e9c:	90800515 	stw	r2,20(r18)
   26ea0:	d8c00117 	ldw	r3,4(sp)
   26ea4:	003fd106 	br	26dec <__d2b+0xc0>

00026ea8 <__mdiff>:
   26ea8:	defffb04 	addi	sp,sp,-20
   26eac:	dc000015 	stw	r16,0(sp)
   26eb0:	2821883a 	mov	r16,r5
   26eb4:	dc800215 	stw	r18,8(sp)
   26eb8:	300b883a 	mov	r5,r6
   26ebc:	2025883a 	mov	r18,r4
   26ec0:	8009883a 	mov	r4,r16
   26ec4:	dc400115 	stw	r17,4(sp)
   26ec8:	dfc00415 	stw	ra,16(sp)
   26ecc:	dcc00315 	stw	r19,12(sp)
   26ed0:	3023883a 	mov	r17,r6
   26ed4:	002684c0 	call	2684c <__mcmp>
   26ed8:	10004226 	beq	r2,zero,26fe4 <__mdiff+0x13c>
   26edc:	10005016 	blt	r2,zero,27020 <__mdiff+0x178>
   26ee0:	0027883a 	mov	r19,zero
   26ee4:	81400117 	ldw	r5,4(r16)
   26ee8:	9009883a 	mov	r4,r18
   26eec:	0026c700 	call	26c70 <_Balloc>
   26ef0:	1019883a 	mov	r12,r2
   26ef4:	82800417 	ldw	r10,16(r16)
   26ef8:	88800417 	ldw	r2,16(r17)
   26efc:	81800504 	addi	r6,r16,20
   26f00:	5287883a 	add	r3,r10,r10
   26f04:	1085883a 	add	r2,r2,r2
   26f08:	18c7883a 	add	r3,r3,r3
   26f0c:	1085883a 	add	r2,r2,r2
   26f10:	8a000504 	addi	r8,r17,20
   26f14:	64c00315 	stw	r19,12(r12)
   26f18:	30db883a 	add	r13,r6,r3
   26f1c:	4097883a 	add	r11,r8,r2
   26f20:	61c00504 	addi	r7,r12,20
   26f24:	0013883a 	mov	r9,zero
   26f28:	31000017 	ldw	r4,0(r6)
   26f2c:	41400017 	ldw	r5,0(r8)
   26f30:	42000104 	addi	r8,r8,4
   26f34:	20bfffcc 	andi	r2,r4,65535
   26f38:	28ffffcc 	andi	r3,r5,65535
   26f3c:	10c5c83a 	sub	r2,r2,r3
   26f40:	1245883a 	add	r2,r2,r9
   26f44:	2008d43a 	srli	r4,r4,16
   26f48:	280ad43a 	srli	r5,r5,16
   26f4c:	1007d43a 	srai	r3,r2,16
   26f50:	3880000d 	sth	r2,0(r7)
   26f54:	2149c83a 	sub	r4,r4,r5
   26f58:	20c9883a 	add	r4,r4,r3
   26f5c:	3900008d 	sth	r4,2(r7)
   26f60:	31800104 	addi	r6,r6,4
   26f64:	39c00104 	addi	r7,r7,4
   26f68:	2013d43a 	srai	r9,r4,16
   26f6c:	42ffee36 	bltu	r8,r11,26f28 <__mdiff+0x80>
   26f70:	33400c2e 	bgeu	r6,r13,26fa4 <__mdiff+0xfc>
   26f74:	30800017 	ldw	r2,0(r6)
   26f78:	31800104 	addi	r6,r6,4
   26f7c:	10ffffcc 	andi	r3,r2,65535
   26f80:	1a47883a 	add	r3,r3,r9
   26f84:	1004d43a 	srli	r2,r2,16
   26f88:	1809d43a 	srai	r4,r3,16
   26f8c:	38c0000d 	sth	r3,0(r7)
   26f90:	1105883a 	add	r2,r2,r4
   26f94:	3880008d 	sth	r2,2(r7)
   26f98:	1013d43a 	srai	r9,r2,16
   26f9c:	39c00104 	addi	r7,r7,4
   26fa0:	337ff436 	bltu	r6,r13,26f74 <__mdiff+0xcc>
   26fa4:	38bfff17 	ldw	r2,-4(r7)
   26fa8:	38ffff04 	addi	r3,r7,-4
   26fac:	1000041e 	bne	r2,zero,26fc0 <__mdiff+0x118>
   26fb0:	18ffff04 	addi	r3,r3,-4
   26fb4:	18800017 	ldw	r2,0(r3)
   26fb8:	52bfffc4 	addi	r10,r10,-1
   26fbc:	103ffc26 	beq	r2,zero,26fb0 <__mdiff+0x108>
   26fc0:	6005883a 	mov	r2,r12
   26fc4:	62800415 	stw	r10,16(r12)
   26fc8:	dfc00417 	ldw	ra,16(sp)
   26fcc:	dcc00317 	ldw	r19,12(sp)
   26fd0:	dc800217 	ldw	r18,8(sp)
   26fd4:	dc400117 	ldw	r17,4(sp)
   26fd8:	dc000017 	ldw	r16,0(sp)
   26fdc:	dec00504 	addi	sp,sp,20
   26fe0:	f800283a 	ret
   26fe4:	9009883a 	mov	r4,r18
   26fe8:	000b883a 	mov	r5,zero
   26fec:	0026c700 	call	26c70 <_Balloc>
   26ff0:	1019883a 	mov	r12,r2
   26ff4:	00800044 	movi	r2,1
   26ff8:	60800415 	stw	r2,16(r12)
   26ffc:	6005883a 	mov	r2,r12
   27000:	60000515 	stw	zero,20(r12)
   27004:	dfc00417 	ldw	ra,16(sp)
   27008:	dcc00317 	ldw	r19,12(sp)
   2700c:	dc800217 	ldw	r18,8(sp)
   27010:	dc400117 	ldw	r17,4(sp)
   27014:	dc000017 	ldw	r16,0(sp)
   27018:	dec00504 	addi	sp,sp,20
   2701c:	f800283a 	ret
   27020:	880d883a 	mov	r6,r17
   27024:	04c00044 	movi	r19,1
   27028:	8023883a 	mov	r17,r16
   2702c:	3021883a 	mov	r16,r6
   27030:	003fac06 	br	26ee4 <__mdiff+0x3c>

00027034 <__lshift>:
   27034:	defff904 	addi	sp,sp,-28
   27038:	28800417 	ldw	r2,16(r5)
   2703c:	dc000015 	stw	r16,0(sp)
   27040:	3021d17a 	srai	r16,r6,5
   27044:	28c00217 	ldw	r3,8(r5)
   27048:	10800044 	addi	r2,r2,1
   2704c:	dc400115 	stw	r17,4(sp)
   27050:	80a3883a 	add	r17,r16,r2
   27054:	dd400515 	stw	r21,20(sp)
   27058:	dd000415 	stw	r20,16(sp)
   2705c:	dc800215 	stw	r18,8(sp)
   27060:	dfc00615 	stw	ra,24(sp)
   27064:	2825883a 	mov	r18,r5
   27068:	dcc00315 	stw	r19,12(sp)
   2706c:	3029883a 	mov	r20,r6
   27070:	202b883a 	mov	r21,r4
   27074:	29400117 	ldw	r5,4(r5)
   27078:	1c40030e 	bge	r3,r17,27088 <__lshift+0x54>
   2707c:	18c7883a 	add	r3,r3,r3
   27080:	29400044 	addi	r5,r5,1
   27084:	1c7ffd16 	blt	r3,r17,2707c <__lshift+0x48>
   27088:	a809883a 	mov	r4,r21
   2708c:	0026c700 	call	26c70 <_Balloc>
   27090:	1027883a 	mov	r19,r2
   27094:	11400504 	addi	r5,r2,20
   27098:	0400090e 	bge	zero,r16,270c0 <__lshift+0x8c>
   2709c:	2805883a 	mov	r2,r5
   270a0:	0007883a 	mov	r3,zero
   270a4:	18c00044 	addi	r3,r3,1
   270a8:	10000015 	stw	zero,0(r2)
   270ac:	10800104 	addi	r2,r2,4
   270b0:	80fffc1e 	bne	r16,r3,270a4 <__lshift+0x70>
   270b4:	8405883a 	add	r2,r16,r16
   270b8:	1085883a 	add	r2,r2,r2
   270bc:	288b883a 	add	r5,r5,r2
   270c0:	90800417 	ldw	r2,16(r18)
   270c4:	91000504 	addi	r4,r18,20
   270c8:	a18007cc 	andi	r6,r20,31
   270cc:	1085883a 	add	r2,r2,r2
   270d0:	1085883a 	add	r2,r2,r2
   270d4:	208f883a 	add	r7,r4,r2
   270d8:	30001e26 	beq	r6,zero,27154 <__lshift+0x120>
   270dc:	00800804 	movi	r2,32
   270e0:	1191c83a 	sub	r8,r2,r6
   270e4:	0007883a 	mov	r3,zero
   270e8:	20800017 	ldw	r2,0(r4)
   270ec:	1184983a 	sll	r2,r2,r6
   270f0:	1884b03a 	or	r2,r3,r2
   270f4:	28800015 	stw	r2,0(r5)
   270f8:	20c00017 	ldw	r3,0(r4)
   270fc:	21000104 	addi	r4,r4,4
   27100:	29400104 	addi	r5,r5,4
   27104:	1a06d83a 	srl	r3,r3,r8
   27108:	21fff736 	bltu	r4,r7,270e8 <__lshift+0xb4>
   2710c:	28c00015 	stw	r3,0(r5)
   27110:	18000126 	beq	r3,zero,27118 <__lshift+0xe4>
   27114:	8c400044 	addi	r17,r17,1
   27118:	88bfffc4 	addi	r2,r17,-1
   2711c:	98800415 	stw	r2,16(r19)
   27120:	a809883a 	mov	r4,r21
   27124:	900b883a 	mov	r5,r18
   27128:	00266f00 	call	266f0 <_Bfree>
   2712c:	9805883a 	mov	r2,r19
   27130:	dfc00617 	ldw	ra,24(sp)
   27134:	dd400517 	ldw	r21,20(sp)
   27138:	dd000417 	ldw	r20,16(sp)
   2713c:	dcc00317 	ldw	r19,12(sp)
   27140:	dc800217 	ldw	r18,8(sp)
   27144:	dc400117 	ldw	r17,4(sp)
   27148:	dc000017 	ldw	r16,0(sp)
   2714c:	dec00704 	addi	sp,sp,28
   27150:	f800283a 	ret
   27154:	20800017 	ldw	r2,0(r4)
   27158:	21000104 	addi	r4,r4,4
   2715c:	28800015 	stw	r2,0(r5)
   27160:	29400104 	addi	r5,r5,4
   27164:	21ffec2e 	bgeu	r4,r7,27118 <__lshift+0xe4>
   27168:	20800017 	ldw	r2,0(r4)
   2716c:	21000104 	addi	r4,r4,4
   27170:	28800015 	stw	r2,0(r5)
   27174:	29400104 	addi	r5,r5,4
   27178:	21fff636 	bltu	r4,r7,27154 <__lshift+0x120>
   2717c:	003fe606 	br	27118 <__lshift+0xe4>

00027180 <__multiply>:
   27180:	defff904 	addi	sp,sp,-28
   27184:	dcc00315 	stw	r19,12(sp)
   27188:	dc800215 	stw	r18,8(sp)
   2718c:	2cc00417 	ldw	r19,16(r5)
   27190:	34800417 	ldw	r18,16(r6)
   27194:	dd000415 	stw	r20,16(sp)
   27198:	dc400115 	stw	r17,4(sp)
   2719c:	dfc00615 	stw	ra,24(sp)
   271a0:	dd400515 	stw	r21,20(sp)
   271a4:	dc000015 	stw	r16,0(sp)
   271a8:	2823883a 	mov	r17,r5
   271ac:	3029883a 	mov	r20,r6
   271b0:	9c80040e 	bge	r19,r18,271c4 <__multiply+0x44>
   271b4:	9027883a 	mov	r19,r18
   271b8:	2c800417 	ldw	r18,16(r5)
   271bc:	2829883a 	mov	r20,r5
   271c0:	3023883a 	mov	r17,r6
   271c4:	88800217 	ldw	r2,8(r17)
   271c8:	9ca1883a 	add	r16,r19,r18
   271cc:	89400117 	ldw	r5,4(r17)
   271d0:	1400010e 	bge	r2,r16,271d8 <__multiply+0x58>
   271d4:	29400044 	addi	r5,r5,1
   271d8:	0026c700 	call	26c70 <_Balloc>
   271dc:	102b883a 	mov	r21,r2
   271e0:	8405883a 	add	r2,r16,r16
   271e4:	1085883a 	add	r2,r2,r2
   271e8:	a9000504 	addi	r4,r21,20
   271ec:	209d883a 	add	r14,r4,r2
   271f0:	2380042e 	bgeu	r4,r14,27204 <__multiply+0x84>
   271f4:	2005883a 	mov	r2,r4
   271f8:	10000015 	stw	zero,0(r2)
   271fc:	10800104 	addi	r2,r2,4
   27200:	13bffd36 	bltu	r2,r14,271f8 <__multiply+0x78>
   27204:	9485883a 	add	r2,r18,r18
   27208:	9cc7883a 	add	r3,r19,r19
   2720c:	a1800504 	addi	r6,r20,20
   27210:	1085883a 	add	r2,r2,r2
   27214:	8b400504 	addi	r13,r17,20
   27218:	18c7883a 	add	r3,r3,r3
   2721c:	309f883a 	add	r15,r6,r2
   27220:	68d7883a 	add	r11,r13,r3
   27224:	33c03b2e 	bgeu	r6,r15,27314 <__multiply+0x194>
   27228:	2019883a 	mov	r12,r4
   2722c:	30800017 	ldw	r2,0(r6)
   27230:	127fffcc 	andi	r9,r2,65535
   27234:	48001826 	beq	r9,zero,27298 <__multiply+0x118>
   27238:	6811883a 	mov	r8,r13
   2723c:	600f883a 	mov	r7,r12
   27240:	0015883a 	mov	r10,zero
   27244:	40c00017 	ldw	r3,0(r8)
   27248:	39400017 	ldw	r5,0(r7)
   2724c:	42000104 	addi	r8,r8,4
   27250:	193fffcc 	andi	r4,r3,65535
   27254:	4909383a 	mul	r4,r9,r4
   27258:	1806d43a 	srli	r3,r3,16
   2725c:	28bfffcc 	andi	r2,r5,65535
   27260:	5085883a 	add	r2,r10,r2
   27264:	2089883a 	add	r4,r4,r2
   27268:	48c7383a 	mul	r3,r9,r3
   2726c:	280ad43a 	srli	r5,r5,16
   27270:	2004d43a 	srli	r2,r4,16
   27274:	3900000d 	sth	r4,0(r7)
   27278:	1947883a 	add	r3,r3,r5
   2727c:	10c5883a 	add	r2,r2,r3
   27280:	3880008d 	sth	r2,2(r7)
   27284:	1014d43a 	srli	r10,r2,16
   27288:	39c00104 	addi	r7,r7,4
   2728c:	42ffed36 	bltu	r8,r11,27244 <__multiply+0xc4>
   27290:	3a800015 	stw	r10,0(r7)
   27294:	30800017 	ldw	r2,0(r6)
   27298:	1012d43a 	srli	r9,r2,16
   2729c:	48001926 	beq	r9,zero,27304 <__multiply+0x184>
   272a0:	60800017 	ldw	r2,0(r12)
   272a4:	6811883a 	mov	r8,r13
   272a8:	600f883a 	mov	r7,r12
   272ac:	0015883a 	mov	r10,zero
   272b0:	100b883a 	mov	r5,r2
   272b4:	41000017 	ldw	r4,0(r8)
   272b8:	2806d43a 	srli	r3,r5,16
   272bc:	3880000d 	sth	r2,0(r7)
   272c0:	20bfffcc 	andi	r2,r4,65535
   272c4:	4885383a 	mul	r2,r9,r2
   272c8:	50c7883a 	add	r3,r10,r3
   272cc:	2008d43a 	srli	r4,r4,16
   272d0:	10c5883a 	add	r2,r2,r3
   272d4:	3880008d 	sth	r2,2(r7)
   272d8:	39c00104 	addi	r7,r7,4
   272dc:	39400017 	ldw	r5,0(r7)
   272e0:	4909383a 	mul	r4,r9,r4
   272e4:	1004d43a 	srli	r2,r2,16
   272e8:	28ffffcc 	andi	r3,r5,65535
   272ec:	20c9883a 	add	r4,r4,r3
   272f0:	1105883a 	add	r2,r2,r4
   272f4:	42000104 	addi	r8,r8,4
   272f8:	1014d43a 	srli	r10,r2,16
   272fc:	42ffed36 	bltu	r8,r11,272b4 <__multiply+0x134>
   27300:	38800015 	stw	r2,0(r7)
   27304:	31800104 	addi	r6,r6,4
   27308:	33c0022e 	bgeu	r6,r15,27314 <__multiply+0x194>
   2730c:	63000104 	addi	r12,r12,4
   27310:	003fc606 	br	2722c <__multiply+0xac>
   27314:	0400090e 	bge	zero,r16,2733c <__multiply+0x1bc>
   27318:	70bfff17 	ldw	r2,-4(r14)
   2731c:	70ffff04 	addi	r3,r14,-4
   27320:	10000326 	beq	r2,zero,27330 <__multiply+0x1b0>
   27324:	00000506 	br	2733c <__multiply+0x1bc>
   27328:	18800017 	ldw	r2,0(r3)
   2732c:	1000031e 	bne	r2,zero,2733c <__multiply+0x1bc>
   27330:	843fffc4 	addi	r16,r16,-1
   27334:	18ffff04 	addi	r3,r3,-4
   27338:	803ffb1e 	bne	r16,zero,27328 <__multiply+0x1a8>
   2733c:	a805883a 	mov	r2,r21
   27340:	ac000415 	stw	r16,16(r21)
   27344:	dfc00617 	ldw	ra,24(sp)
   27348:	dd400517 	ldw	r21,20(sp)
   2734c:	dd000417 	ldw	r20,16(sp)
   27350:	dcc00317 	ldw	r19,12(sp)
   27354:	dc800217 	ldw	r18,8(sp)
   27358:	dc400117 	ldw	r17,4(sp)
   2735c:	dc000017 	ldw	r16,0(sp)
   27360:	dec00704 	addi	sp,sp,28
   27364:	f800283a 	ret

00027368 <__i2b>:
   27368:	defffd04 	addi	sp,sp,-12
   2736c:	dc000015 	stw	r16,0(sp)
   27370:	04000044 	movi	r16,1
   27374:	dc800115 	stw	r18,4(sp)
   27378:	2825883a 	mov	r18,r5
   2737c:	800b883a 	mov	r5,r16
   27380:	dfc00215 	stw	ra,8(sp)
   27384:	0026c700 	call	26c70 <_Balloc>
   27388:	14000415 	stw	r16,16(r2)
   2738c:	14800515 	stw	r18,20(r2)
   27390:	dfc00217 	ldw	ra,8(sp)
   27394:	dc800117 	ldw	r18,4(sp)
   27398:	dc000017 	ldw	r16,0(sp)
   2739c:	dec00304 	addi	sp,sp,12
   273a0:	f800283a 	ret

000273a4 <__multadd>:
   273a4:	defffa04 	addi	sp,sp,-24
   273a8:	dc800215 	stw	r18,8(sp)
   273ac:	2c800417 	ldw	r18,16(r5)
   273b0:	dd000415 	stw	r20,16(sp)
   273b4:	dcc00315 	stw	r19,12(sp)
   273b8:	dc000015 	stw	r16,0(sp)
   273bc:	dfc00515 	stw	ra,20(sp)
   273c0:	3821883a 	mov	r16,r7
   273c4:	dc400115 	stw	r17,4(sp)
   273c8:	2827883a 	mov	r19,r5
   273cc:	2029883a 	mov	r20,r4
   273d0:	2a000504 	addi	r8,r5,20
   273d4:	000f883a 	mov	r7,zero
   273d8:	40800017 	ldw	r2,0(r8)
   273dc:	39c00044 	addi	r7,r7,1
   273e0:	10ffffcc 	andi	r3,r2,65535
   273e4:	1987383a 	mul	r3,r3,r6
   273e8:	1004d43a 	srli	r2,r2,16
   273ec:	1c07883a 	add	r3,r3,r16
   273f0:	180ad43a 	srli	r5,r3,16
   273f4:	1185383a 	mul	r2,r2,r6
   273f8:	18ffffcc 	andi	r3,r3,65535
   273fc:	1145883a 	add	r2,r2,r5
   27400:	1008943a 	slli	r4,r2,16
   27404:	1020d43a 	srli	r16,r2,16
   27408:	20c9883a 	add	r4,r4,r3
   2740c:	41000015 	stw	r4,0(r8)
   27410:	42000104 	addi	r8,r8,4
   27414:	3cbff016 	blt	r7,r18,273d8 <__multadd+0x34>
   27418:	80000826 	beq	r16,zero,2743c <__multadd+0x98>
   2741c:	98800217 	ldw	r2,8(r19)
   27420:	90800f0e 	bge	r18,r2,27460 <__multadd+0xbc>
   27424:	9485883a 	add	r2,r18,r18
   27428:	1085883a 	add	r2,r2,r2
   2742c:	14c5883a 	add	r2,r2,r19
   27430:	90c00044 	addi	r3,r18,1
   27434:	14000515 	stw	r16,20(r2)
   27438:	98c00415 	stw	r3,16(r19)
   2743c:	9805883a 	mov	r2,r19
   27440:	dfc00517 	ldw	ra,20(sp)
   27444:	dd000417 	ldw	r20,16(sp)
   27448:	dcc00317 	ldw	r19,12(sp)
   2744c:	dc800217 	ldw	r18,8(sp)
   27450:	dc400117 	ldw	r17,4(sp)
   27454:	dc000017 	ldw	r16,0(sp)
   27458:	dec00604 	addi	sp,sp,24
   2745c:	f800283a 	ret
   27460:	99400117 	ldw	r5,4(r19)
   27464:	a009883a 	mov	r4,r20
   27468:	29400044 	addi	r5,r5,1
   2746c:	0026c700 	call	26c70 <_Balloc>
   27470:	99800417 	ldw	r6,16(r19)
   27474:	99400304 	addi	r5,r19,12
   27478:	11000304 	addi	r4,r2,12
   2747c:	318d883a 	add	r6,r6,r6
   27480:	318d883a 	add	r6,r6,r6
   27484:	31800204 	addi	r6,r6,8
   27488:	1023883a 	mov	r17,r2
   2748c:	00264d80 	call	264d8 <memcpy>
   27490:	980b883a 	mov	r5,r19
   27494:	a009883a 	mov	r4,r20
   27498:	00266f00 	call	266f0 <_Bfree>
   2749c:	8827883a 	mov	r19,r17
   274a0:	003fe006 	br	27424 <__multadd+0x80>

000274a4 <__pow5mult>:
   274a4:	defffa04 	addi	sp,sp,-24
   274a8:	308000cc 	andi	r2,r6,3
   274ac:	dd000415 	stw	r20,16(sp)
   274b0:	dcc00315 	stw	r19,12(sp)
   274b4:	dc000015 	stw	r16,0(sp)
   274b8:	dfc00515 	stw	ra,20(sp)
   274bc:	dc800215 	stw	r18,8(sp)
   274c0:	dc400115 	stw	r17,4(sp)
   274c4:	3021883a 	mov	r16,r6
   274c8:	2027883a 	mov	r19,r4
   274cc:	2829883a 	mov	r20,r5
   274d0:	10002b1e 	bne	r2,zero,27580 <__pow5mult+0xdc>
   274d4:	8025d0ba 	srai	r18,r16,2
   274d8:	90001b26 	beq	r18,zero,27548 <__pow5mult+0xa4>
   274dc:	9c001217 	ldw	r16,72(r19)
   274e0:	8000081e 	bne	r16,zero,27504 <__pow5mult+0x60>
   274e4:	00003006 	br	275a8 <__pow5mult+0x104>
   274e8:	800b883a 	mov	r5,r16
   274ec:	800d883a 	mov	r6,r16
   274f0:	9809883a 	mov	r4,r19
   274f4:	90001426 	beq	r18,zero,27548 <__pow5mult+0xa4>
   274f8:	80800017 	ldw	r2,0(r16)
   274fc:	10001b26 	beq	r2,zero,2756c <__pow5mult+0xc8>
   27500:	1021883a 	mov	r16,r2
   27504:	9080004c 	andi	r2,r18,1
   27508:	1005003a 	cmpeq	r2,r2,zero
   2750c:	9025d07a 	srai	r18,r18,1
   27510:	800d883a 	mov	r6,r16
   27514:	9809883a 	mov	r4,r19
   27518:	a00b883a 	mov	r5,r20
   2751c:	103ff21e 	bne	r2,zero,274e8 <__pow5mult+0x44>
   27520:	00271800 	call	27180 <__multiply>
   27524:	a00b883a 	mov	r5,r20
   27528:	9809883a 	mov	r4,r19
   2752c:	1023883a 	mov	r17,r2
   27530:	00266f00 	call	266f0 <_Bfree>
   27534:	8829883a 	mov	r20,r17
   27538:	800b883a 	mov	r5,r16
   2753c:	800d883a 	mov	r6,r16
   27540:	9809883a 	mov	r4,r19
   27544:	903fec1e 	bne	r18,zero,274f8 <__pow5mult+0x54>
   27548:	a005883a 	mov	r2,r20
   2754c:	dfc00517 	ldw	ra,20(sp)
   27550:	dd000417 	ldw	r20,16(sp)
   27554:	dcc00317 	ldw	r19,12(sp)
   27558:	dc800217 	ldw	r18,8(sp)
   2755c:	dc400117 	ldw	r17,4(sp)
   27560:	dc000017 	ldw	r16,0(sp)
   27564:	dec00604 	addi	sp,sp,24
   27568:	f800283a 	ret
   2756c:	00271800 	call	27180 <__multiply>
   27570:	80800015 	stw	r2,0(r16)
   27574:	1021883a 	mov	r16,r2
   27578:	10000015 	stw	zero,0(r2)
   2757c:	003fe106 	br	27504 <__pow5mult+0x60>
   27580:	1085883a 	add	r2,r2,r2
   27584:	00c000f4 	movhi	r3,3
   27588:	18fb3304 	addi	r3,r3,-4916
   2758c:	1085883a 	add	r2,r2,r2
   27590:	10c5883a 	add	r2,r2,r3
   27594:	11bfff17 	ldw	r6,-4(r2)
   27598:	000f883a 	mov	r7,zero
   2759c:	00273a40 	call	273a4 <__multadd>
   275a0:	1029883a 	mov	r20,r2
   275a4:	003fcb06 	br	274d4 <__pow5mult+0x30>
   275a8:	9809883a 	mov	r4,r19
   275ac:	01409c44 	movi	r5,625
   275b0:	00273680 	call	27368 <__i2b>
   275b4:	98801215 	stw	r2,72(r19)
   275b8:	1021883a 	mov	r16,r2
   275bc:	10000015 	stw	zero,0(r2)
   275c0:	003fd006 	br	27504 <__pow5mult+0x60>

000275c4 <__s2b>:
   275c4:	defff904 	addi	sp,sp,-28
   275c8:	dcc00315 	stw	r19,12(sp)
   275cc:	dc800215 	stw	r18,8(sp)
   275d0:	2827883a 	mov	r19,r5
   275d4:	2025883a 	mov	r18,r4
   275d8:	01400244 	movi	r5,9
   275dc:	39000204 	addi	r4,r7,8
   275e0:	dd000415 	stw	r20,16(sp)
   275e4:	dc400115 	stw	r17,4(sp)
   275e8:	dfc00615 	stw	ra,24(sp)
   275ec:	dd400515 	stw	r21,20(sp)
   275f0:	dc000015 	stw	r16,0(sp)
   275f4:	3829883a 	mov	r20,r7
   275f8:	3023883a 	mov	r17,r6
   275fc:	0029d880 	call	29d88 <__divsi3>
   27600:	00c00044 	movi	r3,1
   27604:	1880350e 	bge	r3,r2,276dc <__s2b+0x118>
   27608:	000b883a 	mov	r5,zero
   2760c:	18c7883a 	add	r3,r3,r3
   27610:	29400044 	addi	r5,r5,1
   27614:	18bffd16 	blt	r3,r2,2760c <__s2b+0x48>
   27618:	9009883a 	mov	r4,r18
   2761c:	0026c700 	call	26c70 <_Balloc>
   27620:	1011883a 	mov	r8,r2
   27624:	d8800717 	ldw	r2,28(sp)
   27628:	00c00044 	movi	r3,1
   2762c:	01800244 	movi	r6,9
   27630:	40800515 	stw	r2,20(r8)
   27634:	40c00415 	stw	r3,16(r8)
   27638:	3440260e 	bge	r6,r17,276d4 <__s2b+0x110>
   2763c:	3021883a 	mov	r16,r6
   27640:	99ab883a 	add	r21,r19,r6
   27644:	9c05883a 	add	r2,r19,r16
   27648:	11c00007 	ldb	r7,0(r2)
   2764c:	400b883a 	mov	r5,r8
   27650:	9009883a 	mov	r4,r18
   27654:	39fff404 	addi	r7,r7,-48
   27658:	01800284 	movi	r6,10
   2765c:	00273a40 	call	273a4 <__multadd>
   27660:	84000044 	addi	r16,r16,1
   27664:	1011883a 	mov	r8,r2
   27668:	8c3ff61e 	bne	r17,r16,27644 <__s2b+0x80>
   2766c:	ac45883a 	add	r2,r21,r17
   27670:	117ffe04 	addi	r5,r2,-8
   27674:	880d883a 	mov	r6,r17
   27678:	35000c0e 	bge	r6,r20,276ac <__s2b+0xe8>
   2767c:	a185c83a 	sub	r2,r20,r6
   27680:	2821883a 	mov	r16,r5
   27684:	28a3883a 	add	r17,r5,r2
   27688:	81c00007 	ldb	r7,0(r16)
   2768c:	400b883a 	mov	r5,r8
   27690:	9009883a 	mov	r4,r18
   27694:	39fff404 	addi	r7,r7,-48
   27698:	01800284 	movi	r6,10
   2769c:	00273a40 	call	273a4 <__multadd>
   276a0:	84000044 	addi	r16,r16,1
   276a4:	1011883a 	mov	r8,r2
   276a8:	847ff71e 	bne	r16,r17,27688 <__s2b+0xc4>
   276ac:	4005883a 	mov	r2,r8
   276b0:	dfc00617 	ldw	ra,24(sp)
   276b4:	dd400517 	ldw	r21,20(sp)
   276b8:	dd000417 	ldw	r20,16(sp)
   276bc:	dcc00317 	ldw	r19,12(sp)
   276c0:	dc800217 	ldw	r18,8(sp)
   276c4:	dc400117 	ldw	r17,4(sp)
   276c8:	dc000017 	ldw	r16,0(sp)
   276cc:	dec00704 	addi	sp,sp,28
   276d0:	f800283a 	ret
   276d4:	99400284 	addi	r5,r19,10
   276d8:	003fe706 	br	27678 <__s2b+0xb4>
   276dc:	000b883a 	mov	r5,zero
   276e0:	003fcd06 	br	27618 <__s2b+0x54>

000276e4 <_read_r>:
   276e4:	defffd04 	addi	sp,sp,-12
   276e8:	dc000015 	stw	r16,0(sp)
   276ec:	040000f4 	movhi	r16,3
   276f0:	840a5104 	addi	r16,r16,10564
   276f4:	dc400115 	stw	r17,4(sp)
   276f8:	80000015 	stw	zero,0(r16)
   276fc:	2023883a 	mov	r17,r4
   27700:	2809883a 	mov	r4,r5
   27704:	300b883a 	mov	r5,r6
   27708:	380d883a 	mov	r6,r7
   2770c:	dfc00215 	stw	ra,8(sp)
   27710:	002ae0c0 	call	2ae0c <read>
   27714:	1007883a 	mov	r3,r2
   27718:	00bfffc4 	movi	r2,-1
   2771c:	18800626 	beq	r3,r2,27738 <_read_r+0x54>
   27720:	1805883a 	mov	r2,r3
   27724:	dfc00217 	ldw	ra,8(sp)
   27728:	dc400117 	ldw	r17,4(sp)
   2772c:	dc000017 	ldw	r16,0(sp)
   27730:	dec00304 	addi	sp,sp,12
   27734:	f800283a 	ret
   27738:	80800017 	ldw	r2,0(r16)
   2773c:	103ff826 	beq	r2,zero,27720 <_read_r+0x3c>
   27740:	88800015 	stw	r2,0(r17)
   27744:	1805883a 	mov	r2,r3
   27748:	dfc00217 	ldw	ra,8(sp)
   2774c:	dc400117 	ldw	r17,4(sp)
   27750:	dc000017 	ldw	r16,0(sp)
   27754:	dec00304 	addi	sp,sp,12
   27758:	f800283a 	ret

0002775c <_realloc_r>:
   2775c:	defff404 	addi	sp,sp,-48
   27760:	dd800815 	stw	r22,32(sp)
   27764:	dc800415 	stw	r18,16(sp)
   27768:	dc400315 	stw	r17,12(sp)
   2776c:	dfc00b15 	stw	ra,44(sp)
   27770:	df000a15 	stw	fp,40(sp)
   27774:	ddc00915 	stw	r23,36(sp)
   27778:	dd400715 	stw	r21,28(sp)
   2777c:	dd000615 	stw	r20,24(sp)
   27780:	dcc00515 	stw	r19,20(sp)
   27784:	dc000215 	stw	r16,8(sp)
   27788:	2825883a 	mov	r18,r5
   2778c:	3023883a 	mov	r17,r6
   27790:	202d883a 	mov	r22,r4
   27794:	2800c926 	beq	r5,zero,27abc <_realloc_r+0x360>
   27798:	002ab080 	call	2ab08 <__malloc_lock>
   2779c:	943ffe04 	addi	r16,r18,-8
   277a0:	88c002c4 	addi	r3,r17,11
   277a4:	00800584 	movi	r2,22
   277a8:	82000117 	ldw	r8,4(r16)
   277ac:	10c01b2e 	bgeu	r2,r3,2781c <_realloc_r+0xc0>
   277b0:	00bffe04 	movi	r2,-8
   277b4:	188e703a 	and	r7,r3,r2
   277b8:	3839883a 	mov	fp,r7
   277bc:	38001a16 	blt	r7,zero,27828 <_realloc_r+0xcc>
   277c0:	e4401936 	bltu	fp,r17,27828 <_realloc_r+0xcc>
   277c4:	013fff04 	movi	r4,-4
   277c8:	4126703a 	and	r19,r8,r4
   277cc:	99c02616 	blt	r19,r7,27868 <_realloc_r+0x10c>
   277d0:	802b883a 	mov	r21,r16
   277d4:	9829883a 	mov	r20,r19
   277d8:	84000204 	addi	r16,r16,8
   277dc:	a80f883a 	mov	r7,r21
   277e0:	a70dc83a 	sub	r6,r20,fp
   277e4:	008003c4 	movi	r2,15
   277e8:	1180c136 	bltu	r2,r6,27af0 <_realloc_r+0x394>
   277ec:	38800117 	ldw	r2,4(r7)
   277f0:	a549883a 	add	r4,r20,r21
   277f4:	1080004c 	andi	r2,r2,1
   277f8:	a084b03a 	or	r2,r20,r2
   277fc:	38800115 	stw	r2,4(r7)
   27800:	20c00117 	ldw	r3,4(r4)
   27804:	18c00054 	ori	r3,r3,1
   27808:	20c00115 	stw	r3,4(r4)
   2780c:	b009883a 	mov	r4,r22
   27810:	002ab280 	call	2ab28 <__malloc_unlock>
   27814:	8023883a 	mov	r17,r16
   27818:	00000606 	br	27834 <_realloc_r+0xd8>
   2781c:	01c00404 	movi	r7,16
   27820:	3839883a 	mov	fp,r7
   27824:	e47fe72e 	bgeu	fp,r17,277c4 <_realloc_r+0x68>
   27828:	00800304 	movi	r2,12
   2782c:	0023883a 	mov	r17,zero
   27830:	b0800015 	stw	r2,0(r22)
   27834:	8805883a 	mov	r2,r17
   27838:	dfc00b17 	ldw	ra,44(sp)
   2783c:	df000a17 	ldw	fp,40(sp)
   27840:	ddc00917 	ldw	r23,36(sp)
   27844:	dd800817 	ldw	r22,32(sp)
   27848:	dd400717 	ldw	r21,28(sp)
   2784c:	dd000617 	ldw	r20,24(sp)
   27850:	dcc00517 	ldw	r19,20(sp)
   27854:	dc800417 	ldw	r18,16(sp)
   27858:	dc400317 	ldw	r17,12(sp)
   2785c:	dc000217 	ldw	r16,8(sp)
   27860:	dec00c04 	addi	sp,sp,48
   27864:	f800283a 	ret
   27868:	008000f4 	movhi	r2,3
   2786c:	10bd2d04 	addi	r2,r2,-2892
   27870:	12400217 	ldw	r9,8(r2)
   27874:	84cd883a 	add	r6,r16,r19
   27878:	802b883a 	mov	r21,r16
   2787c:	3240b926 	beq	r6,r9,27b64 <_realloc_r+0x408>
   27880:	31400117 	ldw	r5,4(r6)
   27884:	00bfff84 	movi	r2,-2
   27888:	2884703a 	and	r2,r5,r2
   2788c:	1185883a 	add	r2,r2,r6
   27890:	10c00117 	ldw	r3,4(r2)
   27894:	18c0004c 	andi	r3,r3,1
   27898:	1807003a 	cmpeq	r3,r3,zero
   2789c:	1800a326 	beq	r3,zero,27b2c <_realloc_r+0x3d0>
   278a0:	2908703a 	and	r4,r5,r4
   278a4:	9929883a 	add	r20,r19,r4
   278a8:	a1c0a30e 	bge	r20,r7,27b38 <_realloc_r+0x3dc>
   278ac:	4080004c 	andi	r2,r8,1
   278b0:	1000551e 	bne	r2,zero,27a08 <_realloc_r+0x2ac>
   278b4:	80800017 	ldw	r2,0(r16)
   278b8:	80afc83a 	sub	r23,r16,r2
   278bc:	b8c00117 	ldw	r3,4(r23)
   278c0:	00bfff04 	movi	r2,-4
   278c4:	1884703a 	and	r2,r3,r2
   278c8:	30002e26 	beq	r6,zero,27984 <_realloc_r+0x228>
   278cc:	3240b926 	beq	r6,r9,27bb4 <_realloc_r+0x458>
   278d0:	98a9883a 	add	r20,r19,r2
   278d4:	2509883a 	add	r4,r4,r20
   278d8:	d9000015 	stw	r4,0(sp)
   278dc:	21c02a16 	blt	r4,r7,27988 <_realloc_r+0x22c>
   278e0:	30800317 	ldw	r2,12(r6)
   278e4:	30c00217 	ldw	r3,8(r6)
   278e8:	01400904 	movi	r5,36
   278ec:	99bfff04 	addi	r6,r19,-4
   278f0:	18800315 	stw	r2,12(r3)
   278f4:	10c00215 	stw	r3,8(r2)
   278f8:	b9000317 	ldw	r4,12(r23)
   278fc:	b8800217 	ldw	r2,8(r23)
   27900:	b82b883a 	mov	r21,r23
   27904:	bc000204 	addi	r16,r23,8
   27908:	20800215 	stw	r2,8(r4)
   2790c:	11000315 	stw	r4,12(r2)
   27910:	2980e436 	bltu	r5,r6,27ca4 <_realloc_r+0x548>
   27914:	008004c4 	movi	r2,19
   27918:	9009883a 	mov	r4,r18
   2791c:	8011883a 	mov	r8,r16
   27920:	11800f2e 	bgeu	r2,r6,27960 <_realloc_r+0x204>
   27924:	90800017 	ldw	r2,0(r18)
   27928:	ba000404 	addi	r8,r23,16
   2792c:	91000204 	addi	r4,r18,8
   27930:	b8800215 	stw	r2,8(r23)
   27934:	90c00117 	ldw	r3,4(r18)
   27938:	008006c4 	movi	r2,27
   2793c:	b8c00315 	stw	r3,12(r23)
   27940:	1180072e 	bgeu	r2,r6,27960 <_realloc_r+0x204>
   27944:	90c00217 	ldw	r3,8(r18)
   27948:	ba000604 	addi	r8,r23,24
   2794c:	91000404 	addi	r4,r18,16
   27950:	b8c00415 	stw	r3,16(r23)
   27954:	90800317 	ldw	r2,12(r18)
   27958:	b8800515 	stw	r2,20(r23)
   2795c:	3140e726 	beq	r6,r5,27cfc <_realloc_r+0x5a0>
   27960:	20800017 	ldw	r2,0(r4)
   27964:	dd000017 	ldw	r20,0(sp)
   27968:	b80f883a 	mov	r7,r23
   2796c:	40800015 	stw	r2,0(r8)
   27970:	20c00117 	ldw	r3,4(r4)
   27974:	40c00115 	stw	r3,4(r8)
   27978:	20800217 	ldw	r2,8(r4)
   2797c:	40800215 	stw	r2,8(r8)
   27980:	003f9706 	br	277e0 <_realloc_r+0x84>
   27984:	98a9883a 	add	r20,r19,r2
   27988:	a1c01f16 	blt	r20,r7,27a08 <_realloc_r+0x2ac>
   2798c:	b8c00317 	ldw	r3,12(r23)
   27990:	b8800217 	ldw	r2,8(r23)
   27994:	99bfff04 	addi	r6,r19,-4
   27998:	01400904 	movi	r5,36
   2799c:	b82b883a 	mov	r21,r23
   279a0:	18800215 	stw	r2,8(r3)
   279a4:	10c00315 	stw	r3,12(r2)
   279a8:	bc000204 	addi	r16,r23,8
   279ac:	2980c336 	bltu	r5,r6,27cbc <_realloc_r+0x560>
   279b0:	008004c4 	movi	r2,19
   279b4:	9009883a 	mov	r4,r18
   279b8:	8011883a 	mov	r8,r16
   279bc:	11800f2e 	bgeu	r2,r6,279fc <_realloc_r+0x2a0>
   279c0:	90800017 	ldw	r2,0(r18)
   279c4:	ba000404 	addi	r8,r23,16
   279c8:	91000204 	addi	r4,r18,8
   279cc:	b8800215 	stw	r2,8(r23)
   279d0:	90c00117 	ldw	r3,4(r18)
   279d4:	008006c4 	movi	r2,27
   279d8:	b8c00315 	stw	r3,12(r23)
   279dc:	1180072e 	bgeu	r2,r6,279fc <_realloc_r+0x2a0>
   279e0:	90c00217 	ldw	r3,8(r18)
   279e4:	ba000604 	addi	r8,r23,24
   279e8:	91000404 	addi	r4,r18,16
   279ec:	b8c00415 	stw	r3,16(r23)
   279f0:	90800317 	ldw	r2,12(r18)
   279f4:	b8800515 	stw	r2,20(r23)
   279f8:	3140c726 	beq	r6,r5,27d18 <_realloc_r+0x5bc>
   279fc:	20800017 	ldw	r2,0(r4)
   27a00:	b80f883a 	mov	r7,r23
   27a04:	003fd906 	br	2796c <_realloc_r+0x210>
   27a08:	880b883a 	mov	r5,r17
   27a0c:	b009883a 	mov	r4,r22
   27a10:	0020c500 	call	20c50 <_malloc_r>
   27a14:	1023883a 	mov	r17,r2
   27a18:	10002526 	beq	r2,zero,27ab0 <_realloc_r+0x354>
   27a1c:	80800117 	ldw	r2,4(r16)
   27a20:	00ffff84 	movi	r3,-2
   27a24:	893ffe04 	addi	r4,r17,-8
   27a28:	10c4703a 	and	r2,r2,r3
   27a2c:	8085883a 	add	r2,r16,r2
   27a30:	20809526 	beq	r4,r2,27c88 <_realloc_r+0x52c>
   27a34:	99bfff04 	addi	r6,r19,-4
   27a38:	01c00904 	movi	r7,36
   27a3c:	39804536 	bltu	r7,r6,27b54 <_realloc_r+0x3f8>
   27a40:	008004c4 	movi	r2,19
   27a44:	9009883a 	mov	r4,r18
   27a48:	880b883a 	mov	r5,r17
   27a4c:	11800f2e 	bgeu	r2,r6,27a8c <_realloc_r+0x330>
   27a50:	90800017 	ldw	r2,0(r18)
   27a54:	89400204 	addi	r5,r17,8
   27a58:	91000204 	addi	r4,r18,8
   27a5c:	88800015 	stw	r2,0(r17)
   27a60:	90c00117 	ldw	r3,4(r18)
   27a64:	008006c4 	movi	r2,27
   27a68:	88c00115 	stw	r3,4(r17)
   27a6c:	1180072e 	bgeu	r2,r6,27a8c <_realloc_r+0x330>
   27a70:	90c00217 	ldw	r3,8(r18)
   27a74:	89400404 	addi	r5,r17,16
   27a78:	91000404 	addi	r4,r18,16
   27a7c:	88c00215 	stw	r3,8(r17)
   27a80:	90800317 	ldw	r2,12(r18)
   27a84:	88800315 	stw	r2,12(r17)
   27a88:	31c09126 	beq	r6,r7,27cd0 <_realloc_r+0x574>
   27a8c:	20800017 	ldw	r2,0(r4)
   27a90:	28800015 	stw	r2,0(r5)
   27a94:	20c00117 	ldw	r3,4(r4)
   27a98:	28c00115 	stw	r3,4(r5)
   27a9c:	20800217 	ldw	r2,8(r4)
   27aa0:	28800215 	stw	r2,8(r5)
   27aa4:	900b883a 	mov	r5,r18
   27aa8:	b009883a 	mov	r4,r22
   27aac:	00259180 	call	25918 <_free_r>
   27ab0:	b009883a 	mov	r4,r22
   27ab4:	002ab280 	call	2ab28 <__malloc_unlock>
   27ab8:	003f5e06 	br	27834 <_realloc_r+0xd8>
   27abc:	300b883a 	mov	r5,r6
   27ac0:	dfc00b17 	ldw	ra,44(sp)
   27ac4:	df000a17 	ldw	fp,40(sp)
   27ac8:	ddc00917 	ldw	r23,36(sp)
   27acc:	dd800817 	ldw	r22,32(sp)
   27ad0:	dd400717 	ldw	r21,28(sp)
   27ad4:	dd000617 	ldw	r20,24(sp)
   27ad8:	dcc00517 	ldw	r19,20(sp)
   27adc:	dc800417 	ldw	r18,16(sp)
   27ae0:	dc400317 	ldw	r17,12(sp)
   27ae4:	dc000217 	ldw	r16,8(sp)
   27ae8:	dec00c04 	addi	sp,sp,48
   27aec:	0020c501 	jmpi	20c50 <_malloc_r>
   27af0:	38800117 	ldw	r2,4(r7)
   27af4:	e54b883a 	add	r5,fp,r21
   27af8:	31000054 	ori	r4,r6,1
   27afc:	1080004c 	andi	r2,r2,1
   27b00:	1704b03a 	or	r2,r2,fp
   27b04:	38800115 	stw	r2,4(r7)
   27b08:	29000115 	stw	r4,4(r5)
   27b0c:	2987883a 	add	r3,r5,r6
   27b10:	18800117 	ldw	r2,4(r3)
   27b14:	29400204 	addi	r5,r5,8
   27b18:	b009883a 	mov	r4,r22
   27b1c:	10800054 	ori	r2,r2,1
   27b20:	18800115 	stw	r2,4(r3)
   27b24:	00259180 	call	25918 <_free_r>
   27b28:	003f3806 	br	2780c <_realloc_r+0xb0>
   27b2c:	000d883a 	mov	r6,zero
   27b30:	0009883a 	mov	r4,zero
   27b34:	003f5d06 	br	278ac <_realloc_r+0x150>
   27b38:	30c00217 	ldw	r3,8(r6)
   27b3c:	30800317 	ldw	r2,12(r6)
   27b40:	800f883a 	mov	r7,r16
   27b44:	84000204 	addi	r16,r16,8
   27b48:	10c00215 	stw	r3,8(r2)
   27b4c:	18800315 	stw	r2,12(r3)
   27b50:	003f2306 	br	277e0 <_realloc_r+0x84>
   27b54:	8809883a 	mov	r4,r17
   27b58:	900b883a 	mov	r5,r18
   27b5c:	00265780 	call	26578 <memmove>
   27b60:	003fd006 	br	27aa4 <_realloc_r+0x348>
   27b64:	30800117 	ldw	r2,4(r6)
   27b68:	e0c00404 	addi	r3,fp,16
   27b6c:	1108703a 	and	r4,r2,r4
   27b70:	9905883a 	add	r2,r19,r4
   27b74:	10ff4d16 	blt	r2,r3,278ac <_realloc_r+0x150>
   27b78:	1705c83a 	sub	r2,r2,fp
   27b7c:	870b883a 	add	r5,r16,fp
   27b80:	10800054 	ori	r2,r2,1
   27b84:	28800115 	stw	r2,4(r5)
   27b88:	80c00117 	ldw	r3,4(r16)
   27b8c:	008000f4 	movhi	r2,3
   27b90:	10bd2d04 	addi	r2,r2,-2892
   27b94:	b009883a 	mov	r4,r22
   27b98:	18c0004c 	andi	r3,r3,1
   27b9c:	e0c6b03a 	or	r3,fp,r3
   27ba0:	11400215 	stw	r5,8(r2)
   27ba4:	80c00115 	stw	r3,4(r16)
   27ba8:	002ab280 	call	2ab28 <__malloc_unlock>
   27bac:	84400204 	addi	r17,r16,8
   27bb0:	003f2006 	br	27834 <_realloc_r+0xd8>
   27bb4:	98a9883a 	add	r20,r19,r2
   27bb8:	2509883a 	add	r4,r4,r20
   27bbc:	e0800404 	addi	r2,fp,16
   27bc0:	d9000115 	stw	r4,4(sp)
   27bc4:	20bf7016 	blt	r4,r2,27988 <_realloc_r+0x22c>
   27bc8:	b8c00317 	ldw	r3,12(r23)
   27bcc:	b8800217 	ldw	r2,8(r23)
   27bd0:	99bfff04 	addi	r6,r19,-4
   27bd4:	01400904 	movi	r5,36
   27bd8:	18800215 	stw	r2,8(r3)
   27bdc:	10c00315 	stw	r3,12(r2)
   27be0:	bc400204 	addi	r17,r23,8
   27be4:	29804136 	bltu	r5,r6,27cec <_realloc_r+0x590>
   27be8:	008004c4 	movi	r2,19
   27bec:	9009883a 	mov	r4,r18
   27bf0:	880f883a 	mov	r7,r17
   27bf4:	11800f2e 	bgeu	r2,r6,27c34 <_realloc_r+0x4d8>
   27bf8:	90800017 	ldw	r2,0(r18)
   27bfc:	b9c00404 	addi	r7,r23,16
   27c00:	91000204 	addi	r4,r18,8
   27c04:	b8800215 	stw	r2,8(r23)
   27c08:	90c00117 	ldw	r3,4(r18)
   27c0c:	008006c4 	movi	r2,27
   27c10:	b8c00315 	stw	r3,12(r23)
   27c14:	1180072e 	bgeu	r2,r6,27c34 <_realloc_r+0x4d8>
   27c18:	90c00217 	ldw	r3,8(r18)
   27c1c:	b9c00604 	addi	r7,r23,24
   27c20:	91000404 	addi	r4,r18,16
   27c24:	b8c00415 	stw	r3,16(r23)
   27c28:	90800317 	ldw	r2,12(r18)
   27c2c:	b8800515 	stw	r2,20(r23)
   27c30:	31404026 	beq	r6,r5,27d34 <_realloc_r+0x5d8>
   27c34:	20800017 	ldw	r2,0(r4)
   27c38:	38800015 	stw	r2,0(r7)
   27c3c:	20c00117 	ldw	r3,4(r4)
   27c40:	38c00115 	stw	r3,4(r7)
   27c44:	20800217 	ldw	r2,8(r4)
   27c48:	38800215 	stw	r2,8(r7)
   27c4c:	d8c00117 	ldw	r3,4(sp)
   27c50:	bf0b883a 	add	r5,r23,fp
   27c54:	b009883a 	mov	r4,r22
   27c58:	1f05c83a 	sub	r2,r3,fp
   27c5c:	10800054 	ori	r2,r2,1
   27c60:	28800115 	stw	r2,4(r5)
   27c64:	b8c00117 	ldw	r3,4(r23)
   27c68:	008000f4 	movhi	r2,3
   27c6c:	10bd2d04 	addi	r2,r2,-2892
   27c70:	11400215 	stw	r5,8(r2)
   27c74:	18c0004c 	andi	r3,r3,1
   27c78:	e0c6b03a 	or	r3,fp,r3
   27c7c:	b8c00115 	stw	r3,4(r23)
   27c80:	002ab280 	call	2ab28 <__malloc_unlock>
   27c84:	003eeb06 	br	27834 <_realloc_r+0xd8>
   27c88:	20800117 	ldw	r2,4(r4)
   27c8c:	00ffff04 	movi	r3,-4
   27c90:	800f883a 	mov	r7,r16
   27c94:	10c4703a 	and	r2,r2,r3
   27c98:	98a9883a 	add	r20,r19,r2
   27c9c:	84000204 	addi	r16,r16,8
   27ca0:	003ecf06 	br	277e0 <_realloc_r+0x84>
   27ca4:	900b883a 	mov	r5,r18
   27ca8:	8009883a 	mov	r4,r16
   27cac:	00265780 	call	26578 <memmove>
   27cb0:	dd000017 	ldw	r20,0(sp)
   27cb4:	b80f883a 	mov	r7,r23
   27cb8:	003ec906 	br	277e0 <_realloc_r+0x84>
   27cbc:	900b883a 	mov	r5,r18
   27cc0:	8009883a 	mov	r4,r16
   27cc4:	00265780 	call	26578 <memmove>
   27cc8:	b80f883a 	mov	r7,r23
   27ccc:	003ec406 	br	277e0 <_realloc_r+0x84>
   27cd0:	90c00417 	ldw	r3,16(r18)
   27cd4:	89400604 	addi	r5,r17,24
   27cd8:	91000604 	addi	r4,r18,24
   27cdc:	88c00415 	stw	r3,16(r17)
   27ce0:	90800517 	ldw	r2,20(r18)
   27ce4:	88800515 	stw	r2,20(r17)
   27ce8:	003f6806 	br	27a8c <_realloc_r+0x330>
   27cec:	900b883a 	mov	r5,r18
   27cf0:	8809883a 	mov	r4,r17
   27cf4:	00265780 	call	26578 <memmove>
   27cf8:	003fd406 	br	27c4c <_realloc_r+0x4f0>
   27cfc:	90c00417 	ldw	r3,16(r18)
   27d00:	91000604 	addi	r4,r18,24
   27d04:	ba000804 	addi	r8,r23,32
   27d08:	b8c00615 	stw	r3,24(r23)
   27d0c:	90800517 	ldw	r2,20(r18)
   27d10:	b8800715 	stw	r2,28(r23)
   27d14:	003f1206 	br	27960 <_realloc_r+0x204>
   27d18:	90c00417 	ldw	r3,16(r18)
   27d1c:	91000604 	addi	r4,r18,24
   27d20:	ba000804 	addi	r8,r23,32
   27d24:	b8c00615 	stw	r3,24(r23)
   27d28:	90800517 	ldw	r2,20(r18)
   27d2c:	b8800715 	stw	r2,28(r23)
   27d30:	003f3206 	br	279fc <_realloc_r+0x2a0>
   27d34:	90c00417 	ldw	r3,16(r18)
   27d38:	91000604 	addi	r4,r18,24
   27d3c:	b9c00804 	addi	r7,r23,32
   27d40:	b8c00615 	stw	r3,24(r23)
   27d44:	90800517 	ldw	r2,20(r18)
   27d48:	b8800715 	stw	r2,28(r23)
   27d4c:	003fb906 	br	27c34 <_realloc_r+0x4d8>

00027d50 <__isinfd>:
   27d50:	200d883a 	mov	r6,r4
   27d54:	0109c83a 	sub	r4,zero,r4
   27d58:	2188b03a 	or	r4,r4,r6
   27d5c:	2008d7fa 	srli	r4,r4,31
   27d60:	00a00034 	movhi	r2,32768
   27d64:	10bfffc4 	addi	r2,r2,-1
   27d68:	1144703a 	and	r2,r2,r5
   27d6c:	2088b03a 	or	r4,r4,r2
   27d70:	009ffc34 	movhi	r2,32752
   27d74:	1105c83a 	sub	r2,r2,r4
   27d78:	0087c83a 	sub	r3,zero,r2
   27d7c:	10c4b03a 	or	r2,r2,r3
   27d80:	1004d7fa 	srli	r2,r2,31
   27d84:	00c00044 	movi	r3,1
   27d88:	1885c83a 	sub	r2,r3,r2
   27d8c:	f800283a 	ret

00027d90 <__isnand>:
   27d90:	200d883a 	mov	r6,r4
   27d94:	0109c83a 	sub	r4,zero,r4
   27d98:	2188b03a 	or	r4,r4,r6
   27d9c:	2008d7fa 	srli	r4,r4,31
   27da0:	00a00034 	movhi	r2,32768
   27da4:	10bfffc4 	addi	r2,r2,-1
   27da8:	1144703a 	and	r2,r2,r5
   27dac:	2088b03a 	or	r4,r4,r2
   27db0:	009ffc34 	movhi	r2,32752
   27db4:	1105c83a 	sub	r2,r2,r4
   27db8:	1004d7fa 	srli	r2,r2,31
   27dbc:	f800283a 	ret

00027dc0 <strcmp>:
   27dc0:	2144b03a 	or	r2,r4,r5
   27dc4:	108000cc 	andi	r2,r2,3
   27dc8:	10001d1e 	bne	r2,zero,27e40 <strcmp+0x80>
   27dcc:	200f883a 	mov	r7,r4
   27dd0:	28800017 	ldw	r2,0(r5)
   27dd4:	21000017 	ldw	r4,0(r4)
   27dd8:	280d883a 	mov	r6,r5
   27ddc:	2080161e 	bne	r4,r2,27e38 <strcmp+0x78>
   27de0:	023fbff4 	movhi	r8,65279
   27de4:	423fbfc4 	addi	r8,r8,-257
   27de8:	2207883a 	add	r3,r4,r8
   27dec:	01602074 	movhi	r5,32897
   27df0:	29602004 	addi	r5,r5,-32640
   27df4:	1946703a 	and	r3,r3,r5
   27df8:	0104303a 	nor	r2,zero,r4
   27dfc:	10c4703a 	and	r2,r2,r3
   27e00:	10001c1e 	bne	r2,zero,27e74 <strcmp+0xb4>
   27e04:	4013883a 	mov	r9,r8
   27e08:	2811883a 	mov	r8,r5
   27e0c:	00000106 	br	27e14 <strcmp+0x54>
   27e10:	1800181e 	bne	r3,zero,27e74 <strcmp+0xb4>
   27e14:	39c00104 	addi	r7,r7,4
   27e18:	39000017 	ldw	r4,0(r7)
   27e1c:	31800104 	addi	r6,r6,4
   27e20:	31400017 	ldw	r5,0(r6)
   27e24:	2245883a 	add	r2,r4,r9
   27e28:	1204703a 	and	r2,r2,r8
   27e2c:	0106303a 	nor	r3,zero,r4
   27e30:	1886703a 	and	r3,r3,r2
   27e34:	217ff626 	beq	r4,r5,27e10 <strcmp+0x50>
   27e38:	3809883a 	mov	r4,r7
   27e3c:	300b883a 	mov	r5,r6
   27e40:	20c00007 	ldb	r3,0(r4)
   27e44:	1800051e 	bne	r3,zero,27e5c <strcmp+0x9c>
   27e48:	00000606 	br	27e64 <strcmp+0xa4>
   27e4c:	21000044 	addi	r4,r4,1
   27e50:	20c00007 	ldb	r3,0(r4)
   27e54:	29400044 	addi	r5,r5,1
   27e58:	18000226 	beq	r3,zero,27e64 <strcmp+0xa4>
   27e5c:	28800007 	ldb	r2,0(r5)
   27e60:	18bffa26 	beq	r3,r2,27e4c <strcmp+0x8c>
   27e64:	20c00003 	ldbu	r3,0(r4)
   27e68:	28800003 	ldbu	r2,0(r5)
   27e6c:	1885c83a 	sub	r2,r3,r2
   27e70:	f800283a 	ret
   27e74:	0005883a 	mov	r2,zero
   27e78:	f800283a 	ret

00027e7c <_calloc_r>:
   27e7c:	298b383a 	mul	r5,r5,r6
   27e80:	defffe04 	addi	sp,sp,-8
   27e84:	dc000015 	stw	r16,0(sp)
   27e88:	dfc00115 	stw	ra,4(sp)
   27e8c:	0020c500 	call	20c50 <_malloc_r>
   27e90:	1021883a 	mov	r16,r2
   27e94:	01c00904 	movi	r7,36
   27e98:	10000d26 	beq	r2,zero,27ed0 <_calloc_r+0x54>
   27e9c:	10ffff17 	ldw	r3,-4(r2)
   27ea0:	1009883a 	mov	r4,r2
   27ea4:	00bfff04 	movi	r2,-4
   27ea8:	1886703a 	and	r3,r3,r2
   27eac:	1887883a 	add	r3,r3,r2
   27eb0:	180d883a 	mov	r6,r3
   27eb4:	000b883a 	mov	r5,zero
   27eb8:	38c01736 	bltu	r7,r3,27f18 <_calloc_r+0x9c>
   27ebc:	008004c4 	movi	r2,19
   27ec0:	10c00836 	bltu	r2,r3,27ee4 <_calloc_r+0x68>
   27ec4:	20000215 	stw	zero,8(r4)
   27ec8:	20000015 	stw	zero,0(r4)
   27ecc:	20000115 	stw	zero,4(r4)
   27ed0:	8005883a 	mov	r2,r16
   27ed4:	dfc00117 	ldw	ra,4(sp)
   27ed8:	dc000017 	ldw	r16,0(sp)
   27edc:	dec00204 	addi	sp,sp,8
   27ee0:	f800283a 	ret
   27ee4:	008006c4 	movi	r2,27
   27ee8:	80000015 	stw	zero,0(r16)
   27eec:	80000115 	stw	zero,4(r16)
   27ef0:	81000204 	addi	r4,r16,8
   27ef4:	10fff32e 	bgeu	r2,r3,27ec4 <_calloc_r+0x48>
   27ef8:	80000215 	stw	zero,8(r16)
   27efc:	80000315 	stw	zero,12(r16)
   27f00:	81000404 	addi	r4,r16,16
   27f04:	19ffef1e 	bne	r3,r7,27ec4 <_calloc_r+0x48>
   27f08:	81000604 	addi	r4,r16,24
   27f0c:	80000415 	stw	zero,16(r16)
   27f10:	80000515 	stw	zero,20(r16)
   27f14:	003feb06 	br	27ec4 <_calloc_r+0x48>
   27f18:	00266580 	call	26658 <memset>
   27f1c:	8005883a 	mov	r2,r16
   27f20:	dfc00117 	ldw	ra,4(sp)
   27f24:	dc000017 	ldw	r16,0(sp)
   27f28:	dec00204 	addi	sp,sp,8
   27f2c:	f800283a 	ret

00027f30 <_fclose_r>:
   27f30:	defffc04 	addi	sp,sp,-16
   27f34:	dc400115 	stw	r17,4(sp)
   27f38:	dc000015 	stw	r16,0(sp)
   27f3c:	dfc00315 	stw	ra,12(sp)
   27f40:	dc800215 	stw	r18,8(sp)
   27f44:	2821883a 	mov	r16,r5
   27f48:	2023883a 	mov	r17,r4
   27f4c:	28002926 	beq	r5,zero,27ff4 <_fclose_r+0xc4>
   27f50:	00254e40 	call	254e4 <__sfp_lock_acquire>
   27f54:	88000226 	beq	r17,zero,27f60 <_fclose_r+0x30>
   27f58:	88800e17 	ldw	r2,56(r17)
   27f5c:	10002d26 	beq	r2,zero,28014 <_fclose_r+0xe4>
   27f60:	8080030f 	ldh	r2,12(r16)
   27f64:	10002226 	beq	r2,zero,27ff0 <_fclose_r+0xc0>
   27f68:	8809883a 	mov	r4,r17
   27f6c:	800b883a 	mov	r5,r16
   27f70:	002525c0 	call	2525c <_fflush_r>
   27f74:	1025883a 	mov	r18,r2
   27f78:	80800b17 	ldw	r2,44(r16)
   27f7c:	10000426 	beq	r2,zero,27f90 <_fclose_r+0x60>
   27f80:	81400717 	ldw	r5,28(r16)
   27f84:	8809883a 	mov	r4,r17
   27f88:	103ee83a 	callr	r2
   27f8c:	10002a16 	blt	r2,zero,28038 <_fclose_r+0x108>
   27f90:	8080030b 	ldhu	r2,12(r16)
   27f94:	1080200c 	andi	r2,r2,128
   27f98:	1000231e 	bne	r2,zero,28028 <_fclose_r+0xf8>
   27f9c:	81400c17 	ldw	r5,48(r16)
   27fa0:	28000526 	beq	r5,zero,27fb8 <_fclose_r+0x88>
   27fa4:	80801004 	addi	r2,r16,64
   27fa8:	28800226 	beq	r5,r2,27fb4 <_fclose_r+0x84>
   27fac:	8809883a 	mov	r4,r17
   27fb0:	00259180 	call	25918 <_free_r>
   27fb4:	80000c15 	stw	zero,48(r16)
   27fb8:	81401117 	ldw	r5,68(r16)
   27fbc:	28000326 	beq	r5,zero,27fcc <_fclose_r+0x9c>
   27fc0:	8809883a 	mov	r4,r17
   27fc4:	00259180 	call	25918 <_free_r>
   27fc8:	80001115 	stw	zero,68(r16)
   27fcc:	8000030d 	sth	zero,12(r16)
   27fd0:	00254e80 	call	254e8 <__sfp_lock_release>
   27fd4:	9005883a 	mov	r2,r18
   27fd8:	dfc00317 	ldw	ra,12(sp)
   27fdc:	dc800217 	ldw	r18,8(sp)
   27fe0:	dc400117 	ldw	r17,4(sp)
   27fe4:	dc000017 	ldw	r16,0(sp)
   27fe8:	dec00404 	addi	sp,sp,16
   27fec:	f800283a 	ret
   27ff0:	00254e80 	call	254e8 <__sfp_lock_release>
   27ff4:	0025883a 	mov	r18,zero
   27ff8:	9005883a 	mov	r2,r18
   27ffc:	dfc00317 	ldw	ra,12(sp)
   28000:	dc800217 	ldw	r18,8(sp)
   28004:	dc400117 	ldw	r17,4(sp)
   28008:	dc000017 	ldw	r16,0(sp)
   2800c:	dec00404 	addi	sp,sp,16
   28010:	f800283a 	ret
   28014:	8809883a 	mov	r4,r17
   28018:	00254f40 	call	254f4 <__sinit>
   2801c:	8080030f 	ldh	r2,12(r16)
   28020:	103fd11e 	bne	r2,zero,27f68 <_fclose_r+0x38>
   28024:	003ff206 	br	27ff0 <_fclose_r+0xc0>
   28028:	81400417 	ldw	r5,16(r16)
   2802c:	8809883a 	mov	r4,r17
   28030:	00259180 	call	25918 <_free_r>
   28034:	003fd906 	br	27f9c <_fclose_r+0x6c>
   28038:	04bfffc4 	movi	r18,-1
   2803c:	003fd406 	br	27f90 <_fclose_r+0x60>

00028040 <fclose>:
   28040:	008000f4 	movhi	r2,3
   28044:	10832d04 	addi	r2,r2,3252
   28048:	200b883a 	mov	r5,r4
   2804c:	11000017 	ldw	r4,0(r2)
   28050:	0027f301 	jmpi	27f30 <_fclose_r>

00028054 <__udivdi3>:
   28054:	defff004 	addi	sp,sp,-64
   28058:	2005883a 	mov	r2,r4
   2805c:	3011883a 	mov	r8,r6
   28060:	df000e15 	stw	fp,56(sp)
   28064:	dd000a15 	stw	r20,40(sp)
   28068:	dc000615 	stw	r16,24(sp)
   2806c:	dfc00f15 	stw	ra,60(sp)
   28070:	ddc00d15 	stw	r23,52(sp)
   28074:	dd800c15 	stw	r22,48(sp)
   28078:	dd400b15 	stw	r21,44(sp)
   2807c:	dcc00915 	stw	r19,36(sp)
   28080:	dc800815 	stw	r18,32(sp)
   28084:	dc400715 	stw	r17,28(sp)
   28088:	4021883a 	mov	r16,r8
   2808c:	1039883a 	mov	fp,r2
   28090:	2829883a 	mov	r20,r5
   28094:	38003b1e 	bne	r7,zero,28184 <__udivdi3+0x130>
   28098:	2a005c36 	bltu	r5,r8,2820c <__udivdi3+0x1b8>
   2809c:	4000a626 	beq	r8,zero,28338 <__udivdi3+0x2e4>
   280a0:	00bfffd4 	movui	r2,65535
   280a4:	14009e36 	bltu	r2,r16,28320 <__udivdi3+0x2cc>
   280a8:	00803fc4 	movi	r2,255
   280ac:	14013d36 	bltu	r2,r16,285a4 <__udivdi3+0x550>
   280b0:	000b883a 	mov	r5,zero
   280b4:	0005883a 	mov	r2,zero
   280b8:	8084d83a 	srl	r2,r16,r2
   280bc:	010000f4 	movhi	r4,3
   280c0:	213b3b04 	addi	r4,r4,-4884
   280c4:	01800804 	movi	r6,32
   280c8:	1105883a 	add	r2,r2,r4
   280cc:	10c00003 	ldbu	r3,0(r2)
   280d0:	28c7883a 	add	r3,r5,r3
   280d4:	30edc83a 	sub	r22,r6,r3
   280d8:	b000ee1e 	bne	r22,zero,28494 <__udivdi3+0x440>
   280dc:	802ad43a 	srli	r21,r16,16
   280e0:	00800044 	movi	r2,1
   280e4:	a423c83a 	sub	r17,r20,r16
   280e8:	85ffffcc 	andi	r23,r16,65535
   280ec:	d8800315 	stw	r2,12(sp)
   280f0:	8809883a 	mov	r4,r17
   280f4:	a80b883a 	mov	r5,r21
   280f8:	0029e480 	call	29e48 <__udivsi3>
   280fc:	8809883a 	mov	r4,r17
   28100:	a80b883a 	mov	r5,r21
   28104:	102d883a 	mov	r22,r2
   28108:	0029e500 	call	29e50 <__umodsi3>
   2810c:	1004943a 	slli	r2,r2,16
   28110:	e006d43a 	srli	r3,fp,16
   28114:	bda3383a 	mul	r17,r23,r22
   28118:	10c4b03a 	or	r2,r2,r3
   2811c:	1440042e 	bgeu	r2,r17,28130 <__udivdi3+0xdc>
   28120:	1405883a 	add	r2,r2,r16
   28124:	b5bfffc4 	addi	r22,r22,-1
   28128:	14000136 	bltu	r2,r16,28130 <__udivdi3+0xdc>
   2812c:	14413d36 	bltu	r2,r17,28624 <__udivdi3+0x5d0>
   28130:	1463c83a 	sub	r17,r2,r17
   28134:	8809883a 	mov	r4,r17
   28138:	a80b883a 	mov	r5,r21
   2813c:	0029e480 	call	29e48 <__udivsi3>
   28140:	8809883a 	mov	r4,r17
   28144:	a80b883a 	mov	r5,r21
   28148:	1029883a 	mov	r20,r2
   2814c:	0029e500 	call	29e50 <__umodsi3>
   28150:	1004943a 	slli	r2,r2,16
   28154:	bd09383a 	mul	r4,r23,r20
   28158:	e0ffffcc 	andi	r3,fp,65535
   2815c:	10c4b03a 	or	r2,r2,r3
   28160:	1100042e 	bgeu	r2,r4,28174 <__udivdi3+0x120>
   28164:	8085883a 	add	r2,r16,r2
   28168:	a53fffc4 	addi	r20,r20,-1
   2816c:	14000136 	bltu	r2,r16,28174 <__udivdi3+0x120>
   28170:	11012036 	bltu	r2,r4,285f4 <__udivdi3+0x5a0>
   28174:	b004943a 	slli	r2,r22,16
   28178:	d9000317 	ldw	r4,12(sp)
   2817c:	a084b03a 	or	r2,r20,r2
   28180:	00001506 	br	281d8 <__udivdi3+0x184>
   28184:	380d883a 	mov	r6,r7
   28188:	29c06236 	bltu	r5,r7,28314 <__udivdi3+0x2c0>
   2818c:	00bfffd4 	movui	r2,65535
   28190:	11c05a36 	bltu	r2,r7,282fc <__udivdi3+0x2a8>
   28194:	00803fc4 	movi	r2,255
   28198:	11c0fc36 	bltu	r2,r7,2858c <__udivdi3+0x538>
   2819c:	000b883a 	mov	r5,zero
   281a0:	0005883a 	mov	r2,zero
   281a4:	3084d83a 	srl	r2,r6,r2
   281a8:	010000f4 	movhi	r4,3
   281ac:	213b3b04 	addi	r4,r4,-4884
   281b0:	01c00804 	movi	r7,32
   281b4:	1105883a 	add	r2,r2,r4
   281b8:	10c00003 	ldbu	r3,0(r2)
   281bc:	28c7883a 	add	r3,r5,r3
   281c0:	38efc83a 	sub	r23,r7,r3
   281c4:	b800691e 	bne	r23,zero,2836c <__udivdi3+0x318>
   281c8:	35000136 	bltu	r6,r20,281d0 <__udivdi3+0x17c>
   281cc:	e4005136 	bltu	fp,r16,28314 <__udivdi3+0x2c0>
   281d0:	00800044 	movi	r2,1
   281d4:	0009883a 	mov	r4,zero
   281d8:	2007883a 	mov	r3,r4
   281dc:	dfc00f17 	ldw	ra,60(sp)
   281e0:	df000e17 	ldw	fp,56(sp)
   281e4:	ddc00d17 	ldw	r23,52(sp)
   281e8:	dd800c17 	ldw	r22,48(sp)
   281ec:	dd400b17 	ldw	r21,44(sp)
   281f0:	dd000a17 	ldw	r20,40(sp)
   281f4:	dcc00917 	ldw	r19,36(sp)
   281f8:	dc800817 	ldw	r18,32(sp)
   281fc:	dc400717 	ldw	r17,28(sp)
   28200:	dc000617 	ldw	r16,24(sp)
   28204:	dec01004 	addi	sp,sp,64
   28208:	f800283a 	ret
   2820c:	00bfffd4 	movui	r2,65535
   28210:	12005036 	bltu	r2,r8,28354 <__udivdi3+0x300>
   28214:	00803fc4 	movi	r2,255
   28218:	1200e836 	bltu	r2,r8,285bc <__udivdi3+0x568>
   2821c:	000b883a 	mov	r5,zero
   28220:	0005883a 	mov	r2,zero
   28224:	8084d83a 	srl	r2,r16,r2
   28228:	010000f4 	movhi	r4,3
   2822c:	213b3b04 	addi	r4,r4,-4884
   28230:	01800804 	movi	r6,32
   28234:	1105883a 	add	r2,r2,r4
   28238:	10c00003 	ldbu	r3,0(r2)
   2823c:	28c7883a 	add	r3,r5,r3
   28240:	30cbc83a 	sub	r5,r6,r3
   28244:	28000626 	beq	r5,zero,28260 <__udivdi3+0x20c>
   28248:	3145c83a 	sub	r2,r6,r5
   2824c:	e084d83a 	srl	r2,fp,r2
   28250:	a146983a 	sll	r3,r20,r5
   28254:	e178983a 	sll	fp,fp,r5
   28258:	8160983a 	sll	r16,r16,r5
   2825c:	18a8b03a 	or	r20,r3,r2
   28260:	802ad43a 	srli	r21,r16,16
   28264:	a009883a 	mov	r4,r20
   28268:	85ffffcc 	andi	r23,r16,65535
   2826c:	a80b883a 	mov	r5,r21
   28270:	0029e480 	call	29e48 <__udivsi3>
   28274:	a009883a 	mov	r4,r20
   28278:	a80b883a 	mov	r5,r21
   2827c:	102d883a 	mov	r22,r2
   28280:	0029e500 	call	29e50 <__umodsi3>
   28284:	1004943a 	slli	r2,r2,16
   28288:	e006d43a 	srli	r3,fp,16
   2828c:	bda3383a 	mul	r17,r23,r22
   28290:	10c4b03a 	or	r2,r2,r3
   28294:	1440042e 	bgeu	r2,r17,282a8 <__udivdi3+0x254>
   28298:	1405883a 	add	r2,r2,r16
   2829c:	b5bfffc4 	addi	r22,r22,-1
   282a0:	14000136 	bltu	r2,r16,282a8 <__udivdi3+0x254>
   282a4:	1440d536 	bltu	r2,r17,285fc <__udivdi3+0x5a8>
   282a8:	1463c83a 	sub	r17,r2,r17
   282ac:	8809883a 	mov	r4,r17
   282b0:	a80b883a 	mov	r5,r21
   282b4:	0029e480 	call	29e48 <__udivsi3>
   282b8:	8809883a 	mov	r4,r17
   282bc:	a80b883a 	mov	r5,r21
   282c0:	1029883a 	mov	r20,r2
   282c4:	0029e500 	call	29e50 <__umodsi3>
   282c8:	1004943a 	slli	r2,r2,16
   282cc:	bd09383a 	mul	r4,r23,r20
   282d0:	e0ffffcc 	andi	r3,fp,65535
   282d4:	10c4b03a 	or	r2,r2,r3
   282d8:	1100042e 	bgeu	r2,r4,282ec <__udivdi3+0x298>
   282dc:	8085883a 	add	r2,r16,r2
   282e0:	a53fffc4 	addi	r20,r20,-1
   282e4:	14000136 	bltu	r2,r16,282ec <__udivdi3+0x298>
   282e8:	1100c736 	bltu	r2,r4,28608 <__udivdi3+0x5b4>
   282ec:	b004943a 	slli	r2,r22,16
   282f0:	0009883a 	mov	r4,zero
   282f4:	a084b03a 	or	r2,r20,r2
   282f8:	003fb706 	br	281d8 <__udivdi3+0x184>
   282fc:	00804034 	movhi	r2,256
   28300:	10bfffc4 	addi	r2,r2,-1
   28304:	11c0a436 	bltu	r2,r7,28598 <__udivdi3+0x544>
   28308:	01400404 	movi	r5,16
   2830c:	2805883a 	mov	r2,r5
   28310:	003fa406 	br	281a4 <__udivdi3+0x150>
   28314:	0005883a 	mov	r2,zero
   28318:	0009883a 	mov	r4,zero
   2831c:	003fae06 	br	281d8 <__udivdi3+0x184>
   28320:	00804034 	movhi	r2,256
   28324:	10bfffc4 	addi	r2,r2,-1
   28328:	1400a136 	bltu	r2,r16,285b0 <__udivdi3+0x55c>
   2832c:	01400404 	movi	r5,16
   28330:	2805883a 	mov	r2,r5
   28334:	003f6006 	br	280b8 <__udivdi3+0x64>
   28338:	01000044 	movi	r4,1
   2833c:	000b883a 	mov	r5,zero
   28340:	0029e480 	call	29e48 <__udivsi3>
   28344:	1021883a 	mov	r16,r2
   28348:	00bfffd4 	movui	r2,65535
   2834c:	143ff436 	bltu	r2,r16,28320 <__udivdi3+0x2cc>
   28350:	003f5506 	br	280a8 <__udivdi3+0x54>
   28354:	00804034 	movhi	r2,256
   28358:	10bfffc4 	addi	r2,r2,-1
   2835c:	12009a36 	bltu	r2,r8,285c8 <__udivdi3+0x574>
   28360:	01400404 	movi	r5,16
   28364:	2805883a 	mov	r2,r5
   28368:	003fae06 	br	28224 <__udivdi3+0x1d0>
   2836c:	3dc5c83a 	sub	r2,r7,r23
   28370:	35c8983a 	sll	r4,r6,r23
   28374:	8086d83a 	srl	r3,r16,r2
   28378:	a0a2d83a 	srl	r17,r20,r2
   2837c:	e084d83a 	srl	r2,fp,r2
   28380:	20eab03a 	or	r21,r4,r3
   28384:	a82cd43a 	srli	r22,r21,16
   28388:	a5c6983a 	sll	r3,r20,r23
   2838c:	8809883a 	mov	r4,r17
   28390:	b00b883a 	mov	r5,r22
   28394:	1886b03a 	or	r3,r3,r2
   28398:	d8c00215 	stw	r3,8(sp)
   2839c:	0029e480 	call	29e48 <__udivsi3>
   283a0:	8809883a 	mov	r4,r17
   283a4:	b00b883a 	mov	r5,r22
   283a8:	1029883a 	mov	r20,r2
   283ac:	0029e500 	call	29e50 <__umodsi3>
   283b0:	a8ffffcc 	andi	r3,r21,65535
   283b4:	d8c00515 	stw	r3,20(sp)
   283b8:	d9000217 	ldw	r4,8(sp)
   283bc:	d9400517 	ldw	r5,20(sp)
   283c0:	1004943a 	slli	r2,r2,16
   283c4:	2006d43a 	srli	r3,r4,16
   283c8:	85e0983a 	sll	r16,r16,r23
   283cc:	2d23383a 	mul	r17,r5,r20
   283d0:	10c4b03a 	or	r2,r2,r3
   283d4:	dc000015 	stw	r16,0(sp)
   283d8:	1440032e 	bgeu	r2,r17,283e8 <__udivdi3+0x394>
   283dc:	1545883a 	add	r2,r2,r21
   283e0:	a53fffc4 	addi	r20,r20,-1
   283e4:	15407f2e 	bgeu	r2,r21,285e4 <__udivdi3+0x590>
   283e8:	1463c83a 	sub	r17,r2,r17
   283ec:	8809883a 	mov	r4,r17
   283f0:	b00b883a 	mov	r5,r22
   283f4:	0029e480 	call	29e48 <__udivsi3>
   283f8:	8809883a 	mov	r4,r17
   283fc:	b00b883a 	mov	r5,r22
   28400:	1021883a 	mov	r16,r2
   28404:	0029e500 	call	29e50 <__umodsi3>
   28408:	d8c00517 	ldw	r3,20(sp)
   2840c:	d9000217 	ldw	r4,8(sp)
   28410:	1004943a 	slli	r2,r2,16
   28414:	1c0f383a 	mul	r7,r3,r16
   28418:	20ffffcc 	andi	r3,r4,65535
   2841c:	10e2b03a 	or	r17,r2,r3
   28420:	89c0032e 	bgeu	r17,r7,28430 <__udivdi3+0x3dc>
   28424:	8d63883a 	add	r17,r17,r21
   28428:	843fffc4 	addi	r16,r16,-1
   2842c:	8d40692e 	bgeu	r17,r21,285d4 <__udivdi3+0x580>
   28430:	a008943a 	slli	r4,r20,16
   28434:	d9400017 	ldw	r5,0(sp)
   28438:	89e3c83a 	sub	r17,r17,r7
   2843c:	8110b03a 	or	r8,r16,r4
   28440:	280cd43a 	srli	r6,r5,16
   28444:	28ffffcc 	andi	r3,r5,65535
   28448:	40bfffcc 	andi	r2,r8,65535
   2844c:	400ad43a 	srli	r5,r8,16
   28450:	10d3383a 	mul	r9,r2,r3
   28454:	1185383a 	mul	r2,r2,r6
   28458:	28c7383a 	mul	r3,r5,r3
   2845c:	4808d43a 	srli	r4,r9,16
   28460:	298b383a 	mul	r5,r5,r6
   28464:	10c5883a 	add	r2,r2,r3
   28468:	2089883a 	add	r4,r4,r2
   2846c:	20c0022e 	bgeu	r4,r3,28478 <__udivdi3+0x424>
   28470:	00800074 	movhi	r2,1
   28474:	288b883a 	add	r5,r5,r2
   28478:	2004d43a 	srli	r2,r4,16
   2847c:	288b883a 	add	r5,r5,r2
   28480:	89403f36 	bltu	r17,r5,28580 <__udivdi3+0x52c>
   28484:	89403926 	beq	r17,r5,2856c <__udivdi3+0x518>
   28488:	4005883a 	mov	r2,r8
   2848c:	0009883a 	mov	r4,zero
   28490:	003f5106 	br	281d8 <__udivdi3+0x184>
   28494:	85a0983a 	sll	r16,r16,r22
   28498:	3585c83a 	sub	r2,r6,r22
   2849c:	a0a2d83a 	srl	r17,r20,r2
   284a0:	802ad43a 	srli	r21,r16,16
   284a4:	e084d83a 	srl	r2,fp,r2
   284a8:	a586983a 	sll	r3,r20,r22
   284ac:	8809883a 	mov	r4,r17
   284b0:	a80b883a 	mov	r5,r21
   284b4:	1886b03a 	or	r3,r3,r2
   284b8:	d8c00115 	stw	r3,4(sp)
   284bc:	0029e480 	call	29e48 <__udivsi3>
   284c0:	8809883a 	mov	r4,r17
   284c4:	a80b883a 	mov	r5,r21
   284c8:	d8800415 	stw	r2,16(sp)
   284cc:	0029e500 	call	29e50 <__umodsi3>
   284d0:	d9000117 	ldw	r4,4(sp)
   284d4:	d9400417 	ldw	r5,16(sp)
   284d8:	1004943a 	slli	r2,r2,16
   284dc:	85ffffcc 	andi	r23,r16,65535
   284e0:	2006d43a 	srli	r3,r4,16
   284e4:	b963383a 	mul	r17,r23,r5
   284e8:	10c4b03a 	or	r2,r2,r3
   284ec:	1440042e 	bgeu	r2,r17,28500 <__udivdi3+0x4ac>
   284f0:	297fffc4 	addi	r5,r5,-1
   284f4:	1405883a 	add	r2,r2,r16
   284f8:	d9400415 	stw	r5,16(sp)
   284fc:	1400442e 	bgeu	r2,r16,28610 <__udivdi3+0x5bc>
   28500:	1463c83a 	sub	r17,r2,r17
   28504:	8809883a 	mov	r4,r17
   28508:	a80b883a 	mov	r5,r21
   2850c:	0029e480 	call	29e48 <__udivsi3>
   28510:	8809883a 	mov	r4,r17
   28514:	a80b883a 	mov	r5,r21
   28518:	1029883a 	mov	r20,r2
   2851c:	0029e500 	call	29e50 <__umodsi3>
   28520:	d9400117 	ldw	r5,4(sp)
   28524:	1004943a 	slli	r2,r2,16
   28528:	bd09383a 	mul	r4,r23,r20
   2852c:	28ffffcc 	andi	r3,r5,65535
   28530:	10c6b03a 	or	r3,r2,r3
   28534:	1900062e 	bgeu	r3,r4,28550 <__udivdi3+0x4fc>
   28538:	1c07883a 	add	r3,r3,r16
   2853c:	a53fffc4 	addi	r20,r20,-1
   28540:	1c000336 	bltu	r3,r16,28550 <__udivdi3+0x4fc>
   28544:	1900022e 	bgeu	r3,r4,28550 <__udivdi3+0x4fc>
   28548:	a53fffc4 	addi	r20,r20,-1
   2854c:	1c07883a 	add	r3,r3,r16
   28550:	d9400417 	ldw	r5,16(sp)
   28554:	e5b8983a 	sll	fp,fp,r22
   28558:	1923c83a 	sub	r17,r3,r4
   2855c:	2804943a 	slli	r2,r5,16
   28560:	a0a8b03a 	or	r20,r20,r2
   28564:	dd000315 	stw	r20,12(sp)
   28568:	003ee106 	br	280f0 <__udivdi3+0x9c>
   2856c:	2004943a 	slli	r2,r4,16
   28570:	e5c8983a 	sll	r4,fp,r23
   28574:	48ffffcc 	andi	r3,r9,65535
   28578:	10c5883a 	add	r2,r2,r3
   2857c:	20bfc22e 	bgeu	r4,r2,28488 <__udivdi3+0x434>
   28580:	40bfffc4 	addi	r2,r8,-1
   28584:	0009883a 	mov	r4,zero
   28588:	003f1306 	br	281d8 <__udivdi3+0x184>
   2858c:	01400204 	movi	r5,8
   28590:	2805883a 	mov	r2,r5
   28594:	003f0306 	br	281a4 <__udivdi3+0x150>
   28598:	01400604 	movi	r5,24
   2859c:	2805883a 	mov	r2,r5
   285a0:	003f0006 	br	281a4 <__udivdi3+0x150>
   285a4:	01400204 	movi	r5,8
   285a8:	2805883a 	mov	r2,r5
   285ac:	003ec206 	br	280b8 <__udivdi3+0x64>
   285b0:	01400604 	movi	r5,24
   285b4:	2805883a 	mov	r2,r5
   285b8:	003ebf06 	br	280b8 <__udivdi3+0x64>
   285bc:	01400204 	movi	r5,8
   285c0:	2805883a 	mov	r2,r5
   285c4:	003f1706 	br	28224 <__udivdi3+0x1d0>
   285c8:	01400604 	movi	r5,24
   285cc:	2805883a 	mov	r2,r5
   285d0:	003f1406 	br	28224 <__udivdi3+0x1d0>
   285d4:	89ff962e 	bgeu	r17,r7,28430 <__udivdi3+0x3dc>
   285d8:	8d63883a 	add	r17,r17,r21
   285dc:	843fffc4 	addi	r16,r16,-1
   285e0:	003f9306 	br	28430 <__udivdi3+0x3dc>
   285e4:	147f802e 	bgeu	r2,r17,283e8 <__udivdi3+0x394>
   285e8:	a53fffc4 	addi	r20,r20,-1
   285ec:	1545883a 	add	r2,r2,r21
   285f0:	003f7d06 	br	283e8 <__udivdi3+0x394>
   285f4:	a53fffc4 	addi	r20,r20,-1
   285f8:	003ede06 	br	28174 <__udivdi3+0x120>
   285fc:	b5bfffc4 	addi	r22,r22,-1
   28600:	1405883a 	add	r2,r2,r16
   28604:	003f2806 	br	282a8 <__udivdi3+0x254>
   28608:	a53fffc4 	addi	r20,r20,-1
   2860c:	003f3706 	br	282ec <__udivdi3+0x298>
   28610:	147fbb2e 	bgeu	r2,r17,28500 <__udivdi3+0x4ac>
   28614:	297fffc4 	addi	r5,r5,-1
   28618:	1405883a 	add	r2,r2,r16
   2861c:	d9400415 	stw	r5,16(sp)
   28620:	003fb706 	br	28500 <__udivdi3+0x4ac>
   28624:	b5bfffc4 	addi	r22,r22,-1
   28628:	1405883a 	add	r2,r2,r16
   2862c:	003ec006 	br	28130 <__udivdi3+0xdc>

00028630 <__umoddi3>:
   28630:	defff104 	addi	sp,sp,-60
   28634:	dd800b15 	stw	r22,44(sp)
   28638:	dd000915 	stw	r20,36(sp)
   2863c:	dc000515 	stw	r16,20(sp)
   28640:	dfc00e15 	stw	ra,56(sp)
   28644:	df000d15 	stw	fp,52(sp)
   28648:	ddc00c15 	stw	r23,48(sp)
   2864c:	dd400a15 	stw	r21,40(sp)
   28650:	dcc00815 	stw	r19,32(sp)
   28654:	dc800715 	stw	r18,28(sp)
   28658:	dc400615 	stw	r17,24(sp)
   2865c:	3021883a 	mov	r16,r6
   28660:	202d883a 	mov	r22,r4
   28664:	2829883a 	mov	r20,r5
   28668:	38002b1e 	bne	r7,zero,28718 <__umoddi3+0xe8>
   2866c:	29805036 	bltu	r5,r6,287b0 <__umoddi3+0x180>
   28670:	30008a26 	beq	r6,zero,2889c <__umoddi3+0x26c>
   28674:	00bfffd4 	movui	r2,65535
   28678:	14008236 	bltu	r2,r16,28884 <__umoddi3+0x254>
   2867c:	00803fc4 	movi	r2,255
   28680:	14013636 	bltu	r2,r16,28b5c <__umoddi3+0x52c>
   28684:	000b883a 	mov	r5,zero
   28688:	0005883a 	mov	r2,zero
   2868c:	8084d83a 	srl	r2,r16,r2
   28690:	010000f4 	movhi	r4,3
   28694:	213b3b04 	addi	r4,r4,-4884
   28698:	01800804 	movi	r6,32
   2869c:	1105883a 	add	r2,r2,r4
   286a0:	10c00003 	ldbu	r3,0(r2)
   286a4:	28c7883a 	add	r3,r5,r3
   286a8:	30efc83a 	sub	r23,r6,r3
   286ac:	b800941e 	bne	r23,zero,28900 <__umoddi3+0x2d0>
   286b0:	802ad43a 	srli	r21,r16,16
   286b4:	a423c83a 	sub	r17,r20,r16
   286b8:	0039883a 	mov	fp,zero
   286bc:	853fffcc 	andi	r20,r16,65535
   286c0:	8809883a 	mov	r4,r17
   286c4:	a80b883a 	mov	r5,r21
   286c8:	0029e480 	call	29e48 <__udivsi3>
   286cc:	8809883a 	mov	r4,r17
   286d0:	a80b883a 	mov	r5,r21
   286d4:	a0a3383a 	mul	r17,r20,r2
   286d8:	0029e500 	call	29e50 <__umodsi3>
   286dc:	1004943a 	slli	r2,r2,16
   286e0:	b006d43a 	srli	r3,r22,16
   286e4:	10c4b03a 	or	r2,r2,r3
   286e8:	1440032e 	bgeu	r2,r17,286f8 <__umoddi3+0xc8>
   286ec:	1405883a 	add	r2,r2,r16
   286f0:	14000136 	bltu	r2,r16,286f8 <__umoddi3+0xc8>
   286f4:	14413536 	bltu	r2,r17,28bcc <__umoddi3+0x59c>
   286f8:	1463c83a 	sub	r17,r2,r17
   286fc:	8809883a 	mov	r4,r17
   28700:	a80b883a 	mov	r5,r21
   28704:	0029e480 	call	29e48 <__udivsi3>
   28708:	8809883a 	mov	r4,r17
   2870c:	a0a3383a 	mul	r17,r20,r2
   28710:	a80b883a 	mov	r5,r21
   28714:	00004d06 	br	2884c <__umoddi3+0x21c>
   28718:	380d883a 	mov	r6,r7
   2871c:	29c0102e 	bgeu	r5,r7,28760 <__umoddi3+0x130>
   28720:	2011883a 	mov	r8,r4
   28724:	2813883a 	mov	r9,r5
   28728:	4005883a 	mov	r2,r8
   2872c:	4807883a 	mov	r3,r9
   28730:	dfc00e17 	ldw	ra,56(sp)
   28734:	df000d17 	ldw	fp,52(sp)
   28738:	ddc00c17 	ldw	r23,48(sp)
   2873c:	dd800b17 	ldw	r22,44(sp)
   28740:	dd400a17 	ldw	r21,40(sp)
   28744:	dd000917 	ldw	r20,36(sp)
   28748:	dcc00817 	ldw	r19,32(sp)
   2874c:	dc800717 	ldw	r18,28(sp)
   28750:	dc400617 	ldw	r17,24(sp)
   28754:	dc000517 	ldw	r16,20(sp)
   28758:	dec00f04 	addi	sp,sp,60
   2875c:	f800283a 	ret
   28760:	00bfffd4 	movui	r2,65535
   28764:	11c05a36 	bltu	r2,r7,288d0 <__umoddi3+0x2a0>
   28768:	00803fc4 	movi	r2,255
   2876c:	11c0fe36 	bltu	r2,r7,28b68 <__umoddi3+0x538>
   28770:	000b883a 	mov	r5,zero
   28774:	0005883a 	mov	r2,zero
   28778:	3084d83a 	srl	r2,r6,r2
   2877c:	010000f4 	movhi	r4,3
   28780:	213b3b04 	addi	r4,r4,-4884
   28784:	01c00804 	movi	r7,32
   28788:	1105883a 	add	r2,r2,r4
   2878c:	10c00003 	ldbu	r3,0(r2)
   28790:	28c7883a 	add	r3,r5,r3
   28794:	38ebc83a 	sub	r21,r7,r3
   28798:	a800851e 	bne	r21,zero,289b0 <__umoddi3+0x380>
   2879c:	35005236 	bltu	r6,r20,288e8 <__umoddi3+0x2b8>
   287a0:	b400512e 	bgeu	r22,r16,288e8 <__umoddi3+0x2b8>
   287a4:	b011883a 	mov	r8,r22
   287a8:	a013883a 	mov	r9,r20
   287ac:	003fde06 	br	28728 <__umoddi3+0xf8>
   287b0:	00bfffd4 	movui	r2,65535
   287b4:	11804036 	bltu	r2,r6,288b8 <__umoddi3+0x288>
   287b8:	00803fc4 	movi	r2,255
   287bc:	1180ed36 	bltu	r2,r6,28b74 <__umoddi3+0x544>
   287c0:	000b883a 	mov	r5,zero
   287c4:	0005883a 	mov	r2,zero
   287c8:	8084d83a 	srl	r2,r16,r2
   287cc:	010000f4 	movhi	r4,3
   287d0:	213b3b04 	addi	r4,r4,-4884
   287d4:	01800804 	movi	r6,32
   287d8:	1105883a 	add	r2,r2,r4
   287dc:	10c00003 	ldbu	r3,0(r2)
   287e0:	28c7883a 	add	r3,r5,r3
   287e4:	30c7c83a 	sub	r3,r6,r3
   287e8:	1800bf1e 	bne	r3,zero,28ae8 <__umoddi3+0x4b8>
   287ec:	0039883a 	mov	fp,zero
   287f0:	802ad43a 	srli	r21,r16,16
   287f4:	a009883a 	mov	r4,r20
   287f8:	85ffffcc 	andi	r23,r16,65535
   287fc:	a80b883a 	mov	r5,r21
   28800:	0029e480 	call	29e48 <__udivsi3>
   28804:	a009883a 	mov	r4,r20
   28808:	a80b883a 	mov	r5,r21
   2880c:	b8a3383a 	mul	r17,r23,r2
   28810:	0029e500 	call	29e50 <__umodsi3>
   28814:	1004943a 	slli	r2,r2,16
   28818:	b006d43a 	srli	r3,r22,16
   2881c:	10c4b03a 	or	r2,r2,r3
   28820:	1440032e 	bgeu	r2,r17,28830 <__umoddi3+0x200>
   28824:	1405883a 	add	r2,r2,r16
   28828:	14000136 	bltu	r2,r16,28830 <__umoddi3+0x200>
   2882c:	1440e536 	bltu	r2,r17,28bc4 <__umoddi3+0x594>
   28830:	1463c83a 	sub	r17,r2,r17
   28834:	8809883a 	mov	r4,r17
   28838:	a80b883a 	mov	r5,r21
   2883c:	0029e480 	call	29e48 <__udivsi3>
   28840:	8809883a 	mov	r4,r17
   28844:	b8a3383a 	mul	r17,r23,r2
   28848:	a80b883a 	mov	r5,r21
   2884c:	0029e500 	call	29e50 <__umodsi3>
   28850:	1004943a 	slli	r2,r2,16
   28854:	b0ffffcc 	andi	r3,r22,65535
   28858:	10c4b03a 	or	r2,r2,r3
   2885c:	1440042e 	bgeu	r2,r17,28870 <__umoddi3+0x240>
   28860:	1405883a 	add	r2,r2,r16
   28864:	14000236 	bltu	r2,r16,28870 <__umoddi3+0x240>
   28868:	1440012e 	bgeu	r2,r17,28870 <__umoddi3+0x240>
   2886c:	1405883a 	add	r2,r2,r16
   28870:	1445c83a 	sub	r2,r2,r17
   28874:	1724d83a 	srl	r18,r2,fp
   28878:	0013883a 	mov	r9,zero
   2887c:	9011883a 	mov	r8,r18
   28880:	003fa906 	br	28728 <__umoddi3+0xf8>
   28884:	00804034 	movhi	r2,256
   28888:	10bfffc4 	addi	r2,r2,-1
   2888c:	1400b036 	bltu	r2,r16,28b50 <__umoddi3+0x520>
   28890:	01400404 	movi	r5,16
   28894:	2805883a 	mov	r2,r5
   28898:	003f7c06 	br	2868c <__umoddi3+0x5c>
   2889c:	01000044 	movi	r4,1
   288a0:	000b883a 	mov	r5,zero
   288a4:	0029e480 	call	29e48 <__udivsi3>
   288a8:	1021883a 	mov	r16,r2
   288ac:	00bfffd4 	movui	r2,65535
   288b0:	143ff436 	bltu	r2,r16,28884 <__umoddi3+0x254>
   288b4:	003f7106 	br	2867c <__umoddi3+0x4c>
   288b8:	00804034 	movhi	r2,256
   288bc:	10bfffc4 	addi	r2,r2,-1
   288c0:	1180af36 	bltu	r2,r6,28b80 <__umoddi3+0x550>
   288c4:	01400404 	movi	r5,16
   288c8:	2805883a 	mov	r2,r5
   288cc:	003fbe06 	br	287c8 <__umoddi3+0x198>
   288d0:	00804034 	movhi	r2,256
   288d4:	10bfffc4 	addi	r2,r2,-1
   288d8:	11c0ac36 	bltu	r2,r7,28b8c <__umoddi3+0x55c>
   288dc:	01400404 	movi	r5,16
   288e0:	2805883a 	mov	r2,r5
   288e4:	003fa406 	br	28778 <__umoddi3+0x148>
   288e8:	b409c83a 	sub	r4,r22,r16
   288ec:	b105803a 	cmpltu	r2,r22,r4
   288f0:	a187c83a 	sub	r3,r20,r6
   288f4:	18a9c83a 	sub	r20,r3,r2
   288f8:	202d883a 	mov	r22,r4
   288fc:	003fa906 	br	287a4 <__umoddi3+0x174>
   28900:	85e0983a 	sll	r16,r16,r23
   28904:	35c5c83a 	sub	r2,r6,r23
   28908:	a0a2d83a 	srl	r17,r20,r2
   2890c:	802ad43a 	srli	r21,r16,16
   28910:	b084d83a 	srl	r2,r22,r2
   28914:	a5c6983a 	sll	r3,r20,r23
   28918:	8809883a 	mov	r4,r17
   2891c:	a80b883a 	mov	r5,r21
   28920:	1886b03a 	or	r3,r3,r2
   28924:	d8c00115 	stw	r3,4(sp)
   28928:	853fffcc 	andi	r20,r16,65535
   2892c:	0029e480 	call	29e48 <__udivsi3>
   28930:	8809883a 	mov	r4,r17
   28934:	a80b883a 	mov	r5,r21
   28938:	a0a3383a 	mul	r17,r20,r2
   2893c:	0029e500 	call	29e50 <__umodsi3>
   28940:	d9000117 	ldw	r4,4(sp)
   28944:	1004943a 	slli	r2,r2,16
   28948:	b839883a 	mov	fp,r23
   2894c:	2006d43a 	srli	r3,r4,16
   28950:	10c4b03a 	or	r2,r2,r3
   28954:	1440022e 	bgeu	r2,r17,28960 <__umoddi3+0x330>
   28958:	1405883a 	add	r2,r2,r16
   2895c:	1400962e 	bgeu	r2,r16,28bb8 <__umoddi3+0x588>
   28960:	1463c83a 	sub	r17,r2,r17
   28964:	8809883a 	mov	r4,r17
   28968:	a80b883a 	mov	r5,r21
   2896c:	0029e480 	call	29e48 <__udivsi3>
   28970:	8809883a 	mov	r4,r17
   28974:	a80b883a 	mov	r5,r21
   28978:	a0a3383a 	mul	r17,r20,r2
   2897c:	0029e500 	call	29e50 <__umodsi3>
   28980:	d9400117 	ldw	r5,4(sp)
   28984:	1004943a 	slli	r2,r2,16
   28988:	28ffffcc 	andi	r3,r5,65535
   2898c:	10c4b03a 	or	r2,r2,r3
   28990:	1440042e 	bgeu	r2,r17,289a4 <__umoddi3+0x374>
   28994:	1405883a 	add	r2,r2,r16
   28998:	14000236 	bltu	r2,r16,289a4 <__umoddi3+0x374>
   2899c:	1440012e 	bgeu	r2,r17,289a4 <__umoddi3+0x374>
   289a0:	1405883a 	add	r2,r2,r16
   289a4:	b5ec983a 	sll	r22,r22,r23
   289a8:	1463c83a 	sub	r17,r2,r17
   289ac:	003f4406 	br	286c0 <__umoddi3+0x90>
   289b0:	3d4fc83a 	sub	r7,r7,r21
   289b4:	3546983a 	sll	r3,r6,r21
   289b8:	81c4d83a 	srl	r2,r16,r7
   289bc:	a1e2d83a 	srl	r17,r20,r7
   289c0:	a54c983a 	sll	r6,r20,r21
   289c4:	18aeb03a 	or	r23,r3,r2
   289c8:	b828d43a 	srli	r20,r23,16
   289cc:	b1c4d83a 	srl	r2,r22,r7
   289d0:	8809883a 	mov	r4,r17
   289d4:	a00b883a 	mov	r5,r20
   289d8:	308cb03a 	or	r6,r6,r2
   289dc:	d9c00315 	stw	r7,12(sp)
   289e0:	d9800215 	stw	r6,8(sp)
   289e4:	0029e480 	call	29e48 <__udivsi3>
   289e8:	8809883a 	mov	r4,r17
   289ec:	a00b883a 	mov	r5,r20
   289f0:	1039883a 	mov	fp,r2
   289f4:	0029e500 	call	29e50 <__umodsi3>
   289f8:	b8ffffcc 	andi	r3,r23,65535
   289fc:	d8c00415 	stw	r3,16(sp)
   28a00:	d9000217 	ldw	r4,8(sp)
   28a04:	d9400417 	ldw	r5,16(sp)
   28a08:	1004943a 	slli	r2,r2,16
   28a0c:	2006d43a 	srli	r3,r4,16
   28a10:	8560983a 	sll	r16,r16,r21
   28a14:	2f23383a 	mul	r17,r5,fp
   28a18:	10c4b03a 	or	r2,r2,r3
   28a1c:	dc000015 	stw	r16,0(sp)
   28a20:	b56c983a 	sll	r22,r22,r21
   28a24:	1440032e 	bgeu	r2,r17,28a34 <__umoddi3+0x404>
   28a28:	15c5883a 	add	r2,r2,r23
   28a2c:	e73fffc4 	addi	fp,fp,-1
   28a30:	15c05d2e 	bgeu	r2,r23,28ba8 <__umoddi3+0x578>
   28a34:	1463c83a 	sub	r17,r2,r17
   28a38:	8809883a 	mov	r4,r17
   28a3c:	a00b883a 	mov	r5,r20
   28a40:	0029e480 	call	29e48 <__udivsi3>
   28a44:	8809883a 	mov	r4,r17
   28a48:	a00b883a 	mov	r5,r20
   28a4c:	1021883a 	mov	r16,r2
   28a50:	0029e500 	call	29e50 <__umodsi3>
   28a54:	d8c00417 	ldw	r3,16(sp)
   28a58:	d9000217 	ldw	r4,8(sp)
   28a5c:	1004943a 	slli	r2,r2,16
   28a60:	1c23383a 	mul	r17,r3,r16
   28a64:	20ffffcc 	andi	r3,r4,65535
   28a68:	10ceb03a 	or	r7,r2,r3
   28a6c:	3c40032e 	bgeu	r7,r17,28a7c <__umoddi3+0x44c>
   28a70:	3dcf883a 	add	r7,r7,r23
   28a74:	843fffc4 	addi	r16,r16,-1
   28a78:	3dc0472e 	bgeu	r7,r23,28b98 <__umoddi3+0x568>
   28a7c:	e004943a 	slli	r2,fp,16
   28a80:	d9400017 	ldw	r5,0(sp)
   28a84:	3c4fc83a 	sub	r7,r7,r17
   28a88:	8084b03a 	or	r2,r16,r2
   28a8c:	28ffffcc 	andi	r3,r5,65535
   28a90:	280cd43a 	srli	r6,r5,16
   28a94:	100ad43a 	srli	r5,r2,16
   28a98:	10bfffcc 	andi	r2,r2,65535
   28a9c:	10d1383a 	mul	r8,r2,r3
   28aa0:	28c7383a 	mul	r3,r5,r3
   28aa4:	1185383a 	mul	r2,r2,r6
   28aa8:	4008d43a 	srli	r4,r8,16
   28aac:	298b383a 	mul	r5,r5,r6
   28ab0:	10c5883a 	add	r2,r2,r3
   28ab4:	2089883a 	add	r4,r4,r2
   28ab8:	20c0022e 	bgeu	r4,r3,28ac4 <__umoddi3+0x494>
   28abc:	00800074 	movhi	r2,1
   28ac0:	288b883a 	add	r5,r5,r2
   28ac4:	2004d43a 	srli	r2,r4,16
   28ac8:	2008943a 	slli	r4,r4,16
   28acc:	40ffffcc 	andi	r3,r8,65535
   28ad0:	288b883a 	add	r5,r5,r2
   28ad4:	20c9883a 	add	r4,r4,r3
   28ad8:	39400b36 	bltu	r7,r5,28b08 <__umoddi3+0x4d8>
   28adc:	39403d26 	beq	r7,r5,28bd4 <__umoddi3+0x5a4>
   28ae0:	394bc83a 	sub	r5,r7,r5
   28ae4:	00000f06 	br	28b24 <__umoddi3+0x4f4>
   28ae8:	30c5c83a 	sub	r2,r6,r3
   28aec:	1839883a 	mov	fp,r3
   28af0:	b084d83a 	srl	r2,r22,r2
   28af4:	a0c6983a 	sll	r3,r20,r3
   28af8:	8720983a 	sll	r16,r16,fp
   28afc:	b72c983a 	sll	r22,r22,fp
   28b00:	18a8b03a 	or	r20,r3,r2
   28b04:	003f3a06 	br	287f0 <__umoddi3+0x1c0>
   28b08:	d8c00017 	ldw	r3,0(sp)
   28b0c:	20c5c83a 	sub	r2,r4,r3
   28b10:	2089803a 	cmpltu	r4,r4,r2
   28b14:	2dc7c83a 	sub	r3,r5,r23
   28b18:	1907c83a 	sub	r3,r3,r4
   28b1c:	38cbc83a 	sub	r5,r7,r3
   28b20:	1009883a 	mov	r4,r2
   28b24:	b105c83a 	sub	r2,r22,r4
   28b28:	b087803a 	cmpltu	r3,r22,r2
   28b2c:	28c7c83a 	sub	r3,r5,r3
   28b30:	d9400317 	ldw	r5,12(sp)
   28b34:	1544d83a 	srl	r2,r2,r21
   28b38:	1948983a 	sll	r4,r3,r5
   28b3c:	1d46d83a 	srl	r3,r3,r21
   28b40:	20a4b03a 	or	r18,r4,r2
   28b44:	9011883a 	mov	r8,r18
   28b48:	1813883a 	mov	r9,r3
   28b4c:	003ef606 	br	28728 <__umoddi3+0xf8>
   28b50:	01400604 	movi	r5,24
   28b54:	2805883a 	mov	r2,r5
   28b58:	003ecc06 	br	2868c <__umoddi3+0x5c>
   28b5c:	01400204 	movi	r5,8
   28b60:	2805883a 	mov	r2,r5
   28b64:	003ec906 	br	2868c <__umoddi3+0x5c>
   28b68:	01400204 	movi	r5,8
   28b6c:	2805883a 	mov	r2,r5
   28b70:	003f0106 	br	28778 <__umoddi3+0x148>
   28b74:	01400204 	movi	r5,8
   28b78:	2805883a 	mov	r2,r5
   28b7c:	003f1206 	br	287c8 <__umoddi3+0x198>
   28b80:	01400604 	movi	r5,24
   28b84:	2805883a 	mov	r2,r5
   28b88:	003f0f06 	br	287c8 <__umoddi3+0x198>
   28b8c:	01400604 	movi	r5,24
   28b90:	2805883a 	mov	r2,r5
   28b94:	003ef806 	br	28778 <__umoddi3+0x148>
   28b98:	3c7fb82e 	bgeu	r7,r17,28a7c <__umoddi3+0x44c>
   28b9c:	843fffc4 	addi	r16,r16,-1
   28ba0:	3dcf883a 	add	r7,r7,r23
   28ba4:	003fb506 	br	28a7c <__umoddi3+0x44c>
   28ba8:	147fa22e 	bgeu	r2,r17,28a34 <__umoddi3+0x404>
   28bac:	e73fffc4 	addi	fp,fp,-1
   28bb0:	15c5883a 	add	r2,r2,r23
   28bb4:	003f9f06 	br	28a34 <__umoddi3+0x404>
   28bb8:	147f692e 	bgeu	r2,r17,28960 <__umoddi3+0x330>
   28bbc:	1405883a 	add	r2,r2,r16
   28bc0:	003f6706 	br	28960 <__umoddi3+0x330>
   28bc4:	1405883a 	add	r2,r2,r16
   28bc8:	003f1906 	br	28830 <__umoddi3+0x200>
   28bcc:	1405883a 	add	r2,r2,r16
   28bd0:	003ec906 	br	286f8 <__umoddi3+0xc8>
   28bd4:	b13fcc36 	bltu	r22,r4,28b08 <__umoddi3+0x4d8>
   28bd8:	000b883a 	mov	r5,zero
   28bdc:	003fd106 	br	28b24 <__umoddi3+0x4f4>

00028be0 <_fpadd_parts>:
   28be0:	defff804 	addi	sp,sp,-32
   28be4:	dcc00315 	stw	r19,12(sp)
   28be8:	2027883a 	mov	r19,r4
   28bec:	21000017 	ldw	r4,0(r4)
   28bf0:	00c00044 	movi	r3,1
   28bf4:	dd400515 	stw	r21,20(sp)
   28bf8:	dd000415 	stw	r20,16(sp)
   28bfc:	ddc00715 	stw	r23,28(sp)
   28c00:	dd800615 	stw	r22,24(sp)
   28c04:	dc800215 	stw	r18,8(sp)
   28c08:	dc400115 	stw	r17,4(sp)
   28c0c:	dc000015 	stw	r16,0(sp)
   28c10:	282b883a 	mov	r21,r5
   28c14:	3029883a 	mov	r20,r6
   28c18:	1900632e 	bgeu	r3,r4,28da8 <_fpadd_parts+0x1c8>
   28c1c:	28800017 	ldw	r2,0(r5)
   28c20:	1880812e 	bgeu	r3,r2,28e28 <_fpadd_parts+0x248>
   28c24:	00c00104 	movi	r3,4
   28c28:	20c0dc26 	beq	r4,r3,28f9c <_fpadd_parts+0x3bc>
   28c2c:	10c07e26 	beq	r2,r3,28e28 <_fpadd_parts+0x248>
   28c30:	00c00084 	movi	r3,2
   28c34:	10c06726 	beq	r2,r3,28dd4 <_fpadd_parts+0x1f4>
   28c38:	20c07b26 	beq	r4,r3,28e28 <_fpadd_parts+0x248>
   28c3c:	9dc00217 	ldw	r23,8(r19)
   28c40:	28c00217 	ldw	r3,8(r5)
   28c44:	9c400317 	ldw	r17,12(r19)
   28c48:	2bc00317 	ldw	r15,12(r5)
   28c4c:	b8cdc83a 	sub	r6,r23,r3
   28c50:	9c800417 	ldw	r18,16(r19)
   28c54:	2c000417 	ldw	r16,16(r5)
   28c58:	3009883a 	mov	r4,r6
   28c5c:	30009716 	blt	r6,zero,28ebc <_fpadd_parts+0x2dc>
   28c60:	00800fc4 	movi	r2,63
   28c64:	11806b16 	blt	r2,r6,28e14 <_fpadd_parts+0x234>
   28c68:	0100a40e 	bge	zero,r4,28efc <_fpadd_parts+0x31c>
   28c6c:	35bff804 	addi	r22,r6,-32
   28c70:	b000bc16 	blt	r22,zero,28f64 <_fpadd_parts+0x384>
   28c74:	8596d83a 	srl	r11,r16,r22
   28c78:	0019883a 	mov	r12,zero
   28c7c:	0013883a 	mov	r9,zero
   28c80:	01000044 	movi	r4,1
   28c84:	0015883a 	mov	r10,zero
   28c88:	b000be16 	blt	r22,zero,28f84 <_fpadd_parts+0x3a4>
   28c8c:	2590983a 	sll	r8,r4,r22
   28c90:	000f883a 	mov	r7,zero
   28c94:	00bfffc4 	movi	r2,-1
   28c98:	3889883a 	add	r4,r7,r2
   28c9c:	408b883a 	add	r5,r8,r2
   28ca0:	21cd803a 	cmpltu	r6,r4,r7
   28ca4:	314b883a 	add	r5,r6,r5
   28ca8:	7904703a 	and	r2,r15,r4
   28cac:	8146703a 	and	r3,r16,r5
   28cb0:	10c4b03a 	or	r2,r2,r3
   28cb4:	10000226 	beq	r2,zero,28cc0 <_fpadd_parts+0xe0>
   28cb8:	02400044 	movi	r9,1
   28cbc:	0015883a 	mov	r10,zero
   28cc0:	5a5eb03a 	or	r15,r11,r9
   28cc4:	62a0b03a 	or	r16,r12,r10
   28cc8:	99400117 	ldw	r5,4(r19)
   28ccc:	a8800117 	ldw	r2,4(r21)
   28cd0:	28806e26 	beq	r5,r2,28e8c <_fpadd_parts+0x2ac>
   28cd4:	28006626 	beq	r5,zero,28e70 <_fpadd_parts+0x290>
   28cd8:	7c45c83a 	sub	r2,r15,r17
   28cdc:	7889803a 	cmpltu	r4,r15,r2
   28ce0:	8487c83a 	sub	r3,r16,r18
   28ce4:	1909c83a 	sub	r4,r3,r4
   28ce8:	100d883a 	mov	r6,r2
   28cec:	200f883a 	mov	r7,r4
   28cf0:	38007716 	blt	r7,zero,28ed0 <_fpadd_parts+0x2f0>
   28cf4:	a5c00215 	stw	r23,8(r20)
   28cf8:	a1c00415 	stw	r7,16(r20)
   28cfc:	a0000115 	stw	zero,4(r20)
   28d00:	a1800315 	stw	r6,12(r20)
   28d04:	a2000317 	ldw	r8,12(r20)
   28d08:	a2400417 	ldw	r9,16(r20)
   28d0c:	00bfffc4 	movi	r2,-1
   28d10:	408b883a 	add	r5,r8,r2
   28d14:	2a09803a 	cmpltu	r4,r5,r8
   28d18:	488d883a 	add	r6,r9,r2
   28d1c:	01c40034 	movhi	r7,4096
   28d20:	39ffffc4 	addi	r7,r7,-1
   28d24:	218d883a 	add	r6,r4,r6
   28d28:	39801736 	bltu	r7,r6,28d88 <_fpadd_parts+0x1a8>
   28d2c:	31c06526 	beq	r6,r7,28ec4 <_fpadd_parts+0x2e4>
   28d30:	a3000217 	ldw	r12,8(r20)
   28d34:	4209883a 	add	r4,r8,r8
   28d38:	00bfffc4 	movi	r2,-1
   28d3c:	220f803a 	cmpltu	r7,r4,r8
   28d40:	4a4b883a 	add	r5,r9,r9
   28d44:	394f883a 	add	r7,r7,r5
   28d48:	2095883a 	add	r10,r4,r2
   28d4c:	3897883a 	add	r11,r7,r2
   28d50:	510d803a 	cmpltu	r6,r10,r4
   28d54:	6099883a 	add	r12,r12,r2
   28d58:	32d7883a 	add	r11,r6,r11
   28d5c:	00840034 	movhi	r2,4096
   28d60:	10bfffc4 	addi	r2,r2,-1
   28d64:	2011883a 	mov	r8,r4
   28d68:	3813883a 	mov	r9,r7
   28d6c:	a1000315 	stw	r4,12(r20)
   28d70:	a1c00415 	stw	r7,16(r20)
   28d74:	a3000215 	stw	r12,8(r20)
   28d78:	12c00336 	bltu	r2,r11,28d88 <_fpadd_parts+0x1a8>
   28d7c:	58bfed1e 	bne	r11,r2,28d34 <_fpadd_parts+0x154>
   28d80:	00bfff84 	movi	r2,-2
   28d84:	12bfeb2e 	bgeu	r2,r10,28d34 <_fpadd_parts+0x154>
   28d88:	a2800417 	ldw	r10,16(r20)
   28d8c:	008000c4 	movi	r2,3
   28d90:	00c80034 	movhi	r3,8192
   28d94:	18ffffc4 	addi	r3,r3,-1
   28d98:	a2400317 	ldw	r9,12(r20)
   28d9c:	a0800015 	stw	r2,0(r20)
   28da0:	1a802336 	bltu	r3,r10,28e30 <_fpadd_parts+0x250>
   28da4:	a027883a 	mov	r19,r20
   28da8:	9805883a 	mov	r2,r19
   28dac:	ddc00717 	ldw	r23,28(sp)
   28db0:	dd800617 	ldw	r22,24(sp)
   28db4:	dd400517 	ldw	r21,20(sp)
   28db8:	dd000417 	ldw	r20,16(sp)
   28dbc:	dcc00317 	ldw	r19,12(sp)
   28dc0:	dc800217 	ldw	r18,8(sp)
   28dc4:	dc400117 	ldw	r17,4(sp)
   28dc8:	dc000017 	ldw	r16,0(sp)
   28dcc:	dec00804 	addi	sp,sp,32
   28dd0:	f800283a 	ret
   28dd4:	20fff41e 	bne	r4,r3,28da8 <_fpadd_parts+0x1c8>
   28dd8:	31000015 	stw	r4,0(r6)
   28ddc:	98800117 	ldw	r2,4(r19)
   28de0:	30800115 	stw	r2,4(r6)
   28de4:	98c00217 	ldw	r3,8(r19)
   28de8:	30c00215 	stw	r3,8(r6)
   28dec:	98800317 	ldw	r2,12(r19)
   28df0:	30800315 	stw	r2,12(r6)
   28df4:	98c00417 	ldw	r3,16(r19)
   28df8:	30c00415 	stw	r3,16(r6)
   28dfc:	98800117 	ldw	r2,4(r19)
   28e00:	28c00117 	ldw	r3,4(r5)
   28e04:	3027883a 	mov	r19,r6
   28e08:	10c4703a 	and	r2,r2,r3
   28e0c:	30800115 	stw	r2,4(r6)
   28e10:	003fe506 	br	28da8 <_fpadd_parts+0x1c8>
   28e14:	1dc02616 	blt	r3,r23,28eb0 <_fpadd_parts+0x2d0>
   28e18:	0023883a 	mov	r17,zero
   28e1c:	182f883a 	mov	r23,r3
   28e20:	0025883a 	mov	r18,zero
   28e24:	003fa806 	br	28cc8 <_fpadd_parts+0xe8>
   28e28:	a827883a 	mov	r19,r21
   28e2c:	003fde06 	br	28da8 <_fpadd_parts+0x1c8>
   28e30:	01800044 	movi	r6,1
   28e34:	500497fa 	slli	r2,r10,31
   28e38:	4808d07a 	srli	r4,r9,1
   28e3c:	518ad83a 	srl	r5,r10,r6
   28e40:	a2000217 	ldw	r8,8(r20)
   28e44:	1108b03a 	or	r4,r2,r4
   28e48:	0007883a 	mov	r3,zero
   28e4c:	4984703a 	and	r2,r9,r6
   28e50:	208cb03a 	or	r6,r4,r2
   28e54:	28ceb03a 	or	r7,r5,r3
   28e58:	42000044 	addi	r8,r8,1
   28e5c:	a027883a 	mov	r19,r20
   28e60:	a1c00415 	stw	r7,16(r20)
   28e64:	a2000215 	stw	r8,8(r20)
   28e68:	a1800315 	stw	r6,12(r20)
   28e6c:	003fce06 	br	28da8 <_fpadd_parts+0x1c8>
   28e70:	8bc5c83a 	sub	r2,r17,r15
   28e74:	8889803a 	cmpltu	r4,r17,r2
   28e78:	9407c83a 	sub	r3,r18,r16
   28e7c:	1909c83a 	sub	r4,r3,r4
   28e80:	100d883a 	mov	r6,r2
   28e84:	200f883a 	mov	r7,r4
   28e88:	003f9906 	br	28cf0 <_fpadd_parts+0x110>
   28e8c:	7c45883a 	add	r2,r15,r17
   28e90:	13c9803a 	cmpltu	r4,r2,r15
   28e94:	8487883a 	add	r3,r16,r18
   28e98:	20c9883a 	add	r4,r4,r3
   28e9c:	a1400115 	stw	r5,4(r20)
   28ea0:	a5c00215 	stw	r23,8(r20)
   28ea4:	a0800315 	stw	r2,12(r20)
   28ea8:	a1000415 	stw	r4,16(r20)
   28eac:	003fb606 	br	28d88 <_fpadd_parts+0x1a8>
   28eb0:	001f883a 	mov	r15,zero
   28eb4:	0021883a 	mov	r16,zero
   28eb8:	003f8306 	br	28cc8 <_fpadd_parts+0xe8>
   28ebc:	018dc83a 	sub	r6,zero,r6
   28ec0:	003f6706 	br	28c60 <_fpadd_parts+0x80>
   28ec4:	00bfff84 	movi	r2,-2
   28ec8:	117faf36 	bltu	r2,r5,28d88 <_fpadd_parts+0x1a8>
   28ecc:	003f9806 	br	28d30 <_fpadd_parts+0x150>
   28ed0:	0005883a 	mov	r2,zero
   28ed4:	1189c83a 	sub	r4,r2,r6
   28ed8:	1105803a 	cmpltu	r2,r2,r4
   28edc:	01cbc83a 	sub	r5,zero,r7
   28ee0:	2885c83a 	sub	r2,r5,r2
   28ee4:	01800044 	movi	r6,1
   28ee8:	a1800115 	stw	r6,4(r20)
   28eec:	a5c00215 	stw	r23,8(r20)
   28ef0:	a1000315 	stw	r4,12(r20)
   28ef4:	a0800415 	stw	r2,16(r20)
   28ef8:	003f8206 	br	28d04 <_fpadd_parts+0x124>
   28efc:	203f7226 	beq	r4,zero,28cc8 <_fpadd_parts+0xe8>
   28f00:	35bff804 	addi	r22,r6,-32
   28f04:	b9af883a 	add	r23,r23,r6
   28f08:	b0003116 	blt	r22,zero,28fd0 <_fpadd_parts+0x3f0>
   28f0c:	959ad83a 	srl	r13,r18,r22
   28f10:	001d883a 	mov	r14,zero
   28f14:	000f883a 	mov	r7,zero
   28f18:	01000044 	movi	r4,1
   28f1c:	0011883a 	mov	r8,zero
   28f20:	b0002516 	blt	r22,zero,28fb8 <_fpadd_parts+0x3d8>
   28f24:	2594983a 	sll	r10,r4,r22
   28f28:	0013883a 	mov	r9,zero
   28f2c:	00bfffc4 	movi	r2,-1
   28f30:	4889883a 	add	r4,r9,r2
   28f34:	508b883a 	add	r5,r10,r2
   28f38:	224d803a 	cmpltu	r6,r4,r9
   28f3c:	314b883a 	add	r5,r6,r5
   28f40:	8904703a 	and	r2,r17,r4
   28f44:	9146703a 	and	r3,r18,r5
   28f48:	10c4b03a 	or	r2,r2,r3
   28f4c:	10000226 	beq	r2,zero,28f58 <_fpadd_parts+0x378>
   28f50:	01c00044 	movi	r7,1
   28f54:	0011883a 	mov	r8,zero
   28f58:	69e2b03a 	or	r17,r13,r7
   28f5c:	7224b03a 	or	r18,r14,r8
   28f60:	003f5906 	br	28cc8 <_fpadd_parts+0xe8>
   28f64:	8407883a 	add	r3,r16,r16
   28f68:	008007c4 	movi	r2,31
   28f6c:	1185c83a 	sub	r2,r2,r6
   28f70:	1886983a 	sll	r3,r3,r2
   28f74:	7996d83a 	srl	r11,r15,r6
   28f78:	8198d83a 	srl	r12,r16,r6
   28f7c:	1ad6b03a 	or	r11,r3,r11
   28f80:	003f3e06 	br	28c7c <_fpadd_parts+0x9c>
   28f84:	2006d07a 	srli	r3,r4,1
   28f88:	008007c4 	movi	r2,31
   28f8c:	1185c83a 	sub	r2,r2,r6
   28f90:	1890d83a 	srl	r8,r3,r2
   28f94:	218e983a 	sll	r7,r4,r6
   28f98:	003f3e06 	br	28c94 <_fpadd_parts+0xb4>
   28f9c:	113f821e 	bne	r2,r4,28da8 <_fpadd_parts+0x1c8>
   28fa0:	28c00117 	ldw	r3,4(r5)
   28fa4:	98800117 	ldw	r2,4(r19)
   28fa8:	10ff7f26 	beq	r2,r3,28da8 <_fpadd_parts+0x1c8>
   28fac:	04c000f4 	movhi	r19,3
   28fb0:	9cfb3604 	addi	r19,r19,-4904
   28fb4:	003f7c06 	br	28da8 <_fpadd_parts+0x1c8>
   28fb8:	2006d07a 	srli	r3,r4,1
   28fbc:	008007c4 	movi	r2,31
   28fc0:	1185c83a 	sub	r2,r2,r6
   28fc4:	1894d83a 	srl	r10,r3,r2
   28fc8:	2192983a 	sll	r9,r4,r6
   28fcc:	003fd706 	br	28f2c <_fpadd_parts+0x34c>
   28fd0:	9487883a 	add	r3,r18,r18
   28fd4:	008007c4 	movi	r2,31
   28fd8:	1185c83a 	sub	r2,r2,r6
   28fdc:	1886983a 	sll	r3,r3,r2
   28fe0:	899ad83a 	srl	r13,r17,r6
   28fe4:	919cd83a 	srl	r14,r18,r6
   28fe8:	1b5ab03a 	or	r13,r3,r13
   28fec:	003fc906 	br	28f14 <_fpadd_parts+0x334>

00028ff0 <__subdf3>:
   28ff0:	deffea04 	addi	sp,sp,-88
   28ff4:	dcc01415 	stw	r19,80(sp)
   28ff8:	dcc00404 	addi	r19,sp,16
   28ffc:	2011883a 	mov	r8,r4
   29000:	2813883a 	mov	r9,r5
   29004:	dc401315 	stw	r17,76(sp)
   29008:	d809883a 	mov	r4,sp
   2900c:	980b883a 	mov	r5,r19
   29010:	dc400904 	addi	r17,sp,36
   29014:	dfc01515 	stw	ra,84(sp)
   29018:	da400115 	stw	r9,4(sp)
   2901c:	d9c00315 	stw	r7,12(sp)
   29020:	da000015 	stw	r8,0(sp)
   29024:	d9800215 	stw	r6,8(sp)
   29028:	002a2840 	call	2a284 <__unpack_d>
   2902c:	d9000204 	addi	r4,sp,8
   29030:	880b883a 	mov	r5,r17
   29034:	002a2840 	call	2a284 <__unpack_d>
   29038:	d8800a17 	ldw	r2,40(sp)
   2903c:	880b883a 	mov	r5,r17
   29040:	9809883a 	mov	r4,r19
   29044:	d9800e04 	addi	r6,sp,56
   29048:	1080005c 	xori	r2,r2,1
   2904c:	d8800a15 	stw	r2,40(sp)
   29050:	0028be00 	call	28be0 <_fpadd_parts>
   29054:	1009883a 	mov	r4,r2
   29058:	0029f700 	call	29f70 <__pack_d>
   2905c:	dfc01517 	ldw	ra,84(sp)
   29060:	dcc01417 	ldw	r19,80(sp)
   29064:	dc401317 	ldw	r17,76(sp)
   29068:	dec01604 	addi	sp,sp,88
   2906c:	f800283a 	ret

00029070 <__adddf3>:
   29070:	deffea04 	addi	sp,sp,-88
   29074:	dcc01415 	stw	r19,80(sp)
   29078:	dcc00404 	addi	r19,sp,16
   2907c:	2011883a 	mov	r8,r4
   29080:	2813883a 	mov	r9,r5
   29084:	dc401315 	stw	r17,76(sp)
   29088:	d809883a 	mov	r4,sp
   2908c:	980b883a 	mov	r5,r19
   29090:	dc400904 	addi	r17,sp,36
   29094:	dfc01515 	stw	ra,84(sp)
   29098:	da400115 	stw	r9,4(sp)
   2909c:	d9c00315 	stw	r7,12(sp)
   290a0:	da000015 	stw	r8,0(sp)
   290a4:	d9800215 	stw	r6,8(sp)
   290a8:	002a2840 	call	2a284 <__unpack_d>
   290ac:	d9000204 	addi	r4,sp,8
   290b0:	880b883a 	mov	r5,r17
   290b4:	002a2840 	call	2a284 <__unpack_d>
   290b8:	d9800e04 	addi	r6,sp,56
   290bc:	9809883a 	mov	r4,r19
   290c0:	880b883a 	mov	r5,r17
   290c4:	0028be00 	call	28be0 <_fpadd_parts>
   290c8:	1009883a 	mov	r4,r2
   290cc:	0029f700 	call	29f70 <__pack_d>
   290d0:	dfc01517 	ldw	ra,84(sp)
   290d4:	dcc01417 	ldw	r19,80(sp)
   290d8:	dc401317 	ldw	r17,76(sp)
   290dc:	dec01604 	addi	sp,sp,88
   290e0:	f800283a 	ret

000290e4 <__muldf3>:
   290e4:	deffe004 	addi	sp,sp,-128
   290e8:	dc401815 	stw	r17,96(sp)
   290ec:	dc400404 	addi	r17,sp,16
   290f0:	2011883a 	mov	r8,r4
   290f4:	2813883a 	mov	r9,r5
   290f8:	dc001715 	stw	r16,92(sp)
   290fc:	d809883a 	mov	r4,sp
   29100:	880b883a 	mov	r5,r17
   29104:	dc000904 	addi	r16,sp,36
   29108:	dfc01f15 	stw	ra,124(sp)
   2910c:	da400115 	stw	r9,4(sp)
   29110:	d9c00315 	stw	r7,12(sp)
   29114:	da000015 	stw	r8,0(sp)
   29118:	d9800215 	stw	r6,8(sp)
   2911c:	ddc01e15 	stw	r23,120(sp)
   29120:	dd801d15 	stw	r22,116(sp)
   29124:	dd401c15 	stw	r21,112(sp)
   29128:	dd001b15 	stw	r20,108(sp)
   2912c:	dcc01a15 	stw	r19,104(sp)
   29130:	dc801915 	stw	r18,100(sp)
   29134:	002a2840 	call	2a284 <__unpack_d>
   29138:	d9000204 	addi	r4,sp,8
   2913c:	800b883a 	mov	r5,r16
   29140:	002a2840 	call	2a284 <__unpack_d>
   29144:	d9000417 	ldw	r4,16(sp)
   29148:	00800044 	movi	r2,1
   2914c:	1100102e 	bgeu	r2,r4,29190 <__muldf3+0xac>
   29150:	d8c00917 	ldw	r3,36(sp)
   29154:	10c0062e 	bgeu	r2,r3,29170 <__muldf3+0x8c>
   29158:	00800104 	movi	r2,4
   2915c:	20800a26 	beq	r4,r2,29188 <__muldf3+0xa4>
   29160:	1880cc26 	beq	r3,r2,29494 <__muldf3+0x3b0>
   29164:	00800084 	movi	r2,2
   29168:	20800926 	beq	r4,r2,29190 <__muldf3+0xac>
   2916c:	1880191e 	bne	r3,r2,291d4 <__muldf3+0xf0>
   29170:	d8c00a17 	ldw	r3,40(sp)
   29174:	d8800517 	ldw	r2,20(sp)
   29178:	8009883a 	mov	r4,r16
   2917c:	10c4c03a 	cmpne	r2,r2,r3
   29180:	d8800a15 	stw	r2,40(sp)
   29184:	00000706 	br	291a4 <__muldf3+0xc0>
   29188:	00800084 	movi	r2,2
   2918c:	1880c326 	beq	r3,r2,2949c <__muldf3+0x3b8>
   29190:	d8800517 	ldw	r2,20(sp)
   29194:	d8c00a17 	ldw	r3,40(sp)
   29198:	8809883a 	mov	r4,r17
   2919c:	10c4c03a 	cmpne	r2,r2,r3
   291a0:	d8800515 	stw	r2,20(sp)
   291a4:	0029f700 	call	29f70 <__pack_d>
   291a8:	dfc01f17 	ldw	ra,124(sp)
   291ac:	ddc01e17 	ldw	r23,120(sp)
   291b0:	dd801d17 	ldw	r22,116(sp)
   291b4:	dd401c17 	ldw	r21,112(sp)
   291b8:	dd001b17 	ldw	r20,108(sp)
   291bc:	dcc01a17 	ldw	r19,104(sp)
   291c0:	dc801917 	ldw	r18,100(sp)
   291c4:	dc401817 	ldw	r17,96(sp)
   291c8:	dc001717 	ldw	r16,92(sp)
   291cc:	dec02004 	addi	sp,sp,128
   291d0:	f800283a 	ret
   291d4:	dd800717 	ldw	r22,28(sp)
   291d8:	dc800c17 	ldw	r18,48(sp)
   291dc:	002b883a 	mov	r21,zero
   291e0:	0023883a 	mov	r17,zero
   291e4:	a80b883a 	mov	r5,r21
   291e8:	b00d883a 	mov	r6,r22
   291ec:	880f883a 	mov	r7,r17
   291f0:	ddc00817 	ldw	r23,32(sp)
   291f4:	dcc00d17 	ldw	r19,52(sp)
   291f8:	9009883a 	mov	r4,r18
   291fc:	0029e580 	call	29e58 <__muldi3>
   29200:	001b883a 	mov	r13,zero
   29204:	680f883a 	mov	r7,r13
   29208:	b009883a 	mov	r4,r22
   2920c:	000b883a 	mov	r5,zero
   29210:	980d883a 	mov	r6,r19
   29214:	b82d883a 	mov	r22,r23
   29218:	002f883a 	mov	r23,zero
   2921c:	db401615 	stw	r13,88(sp)
   29220:	d8801315 	stw	r2,76(sp)
   29224:	d8c01415 	stw	r3,80(sp)
   29228:	dcc01515 	stw	r19,84(sp)
   2922c:	0029e580 	call	29e58 <__muldi3>
   29230:	b00d883a 	mov	r6,r22
   29234:	000b883a 	mov	r5,zero
   29238:	9009883a 	mov	r4,r18
   2923c:	b80f883a 	mov	r7,r23
   29240:	1021883a 	mov	r16,r2
   29244:	1823883a 	mov	r17,r3
   29248:	0029e580 	call	29e58 <__muldi3>
   2924c:	8085883a 	add	r2,r16,r2
   29250:	140d803a 	cmpltu	r6,r2,r16
   29254:	88c7883a 	add	r3,r17,r3
   29258:	30cd883a 	add	r6,r6,r3
   2925c:	1029883a 	mov	r20,r2
   29260:	302b883a 	mov	r21,r6
   29264:	da801317 	ldw	r10,76(sp)
   29268:	dac01417 	ldw	r11,80(sp)
   2926c:	db001517 	ldw	r12,84(sp)
   29270:	db401617 	ldw	r13,88(sp)
   29274:	3440612e 	bgeu	r6,r17,293fc <__muldf3+0x318>
   29278:	0009883a 	mov	r4,zero
   2927c:	5105883a 	add	r2,r10,r4
   29280:	128d803a 	cmpltu	r6,r2,r10
   29284:	5d07883a 	add	r3,r11,r20
   29288:	30cd883a 	add	r6,r6,r3
   2928c:	0021883a 	mov	r16,zero
   29290:	04400044 	movi	r17,1
   29294:	1025883a 	mov	r18,r2
   29298:	3027883a 	mov	r19,r6
   2929c:	32c06236 	bltu	r6,r11,29428 <__muldf3+0x344>
   292a0:	59807a26 	beq	r11,r6,2948c <__muldf3+0x3a8>
   292a4:	680b883a 	mov	r5,r13
   292a8:	b80f883a 	mov	r7,r23
   292ac:	6009883a 	mov	r4,r12
   292b0:	b00d883a 	mov	r6,r22
   292b4:	0029e580 	call	29e58 <__muldi3>
   292b8:	1009883a 	mov	r4,r2
   292bc:	000f883a 	mov	r7,zero
   292c0:	1545883a 	add	r2,r2,r21
   292c4:	1111803a 	cmpltu	r8,r2,r4
   292c8:	19c7883a 	add	r3,r3,r7
   292cc:	40c7883a 	add	r3,r8,r3
   292d0:	88cb883a 	add	r5,r17,r3
   292d4:	d8c00617 	ldw	r3,24(sp)
   292d8:	8089883a 	add	r4,r16,r2
   292dc:	d8800b17 	ldw	r2,44(sp)
   292e0:	18c00104 	addi	r3,r3,4
   292e4:	240d803a 	cmpltu	r6,r4,r16
   292e8:	10c7883a 	add	r3,r2,r3
   292ec:	2013883a 	mov	r9,r4
   292f0:	d8800a17 	ldw	r2,40(sp)
   292f4:	d9000517 	ldw	r4,20(sp)
   292f8:	314d883a 	add	r6,r6,r5
   292fc:	3015883a 	mov	r10,r6
   29300:	2088c03a 	cmpne	r4,r4,r2
   29304:	00880034 	movhi	r2,8192
   29308:	10bfffc4 	addi	r2,r2,-1
   2930c:	d9000f15 	stw	r4,60(sp)
   29310:	d8c01015 	stw	r3,64(sp)
   29314:	1180162e 	bgeu	r2,r6,29370 <__muldf3+0x28c>
   29318:	1811883a 	mov	r8,r3
   2931c:	101f883a 	mov	r15,r2
   29320:	980497fa 	slli	r2,r19,31
   29324:	9016d07a 	srli	r11,r18,1
   29328:	500697fa 	slli	r3,r10,31
   2932c:	480cd07a 	srli	r6,r9,1
   29330:	500ed07a 	srli	r7,r10,1
   29334:	12d6b03a 	or	r11,r2,r11
   29338:	00800044 	movi	r2,1
   2933c:	198cb03a 	or	r6,r3,r6
   29340:	4888703a 	and	r4,r9,r2
   29344:	9818d07a 	srli	r12,r19,1
   29348:	001b883a 	mov	r13,zero
   2934c:	03a00034 	movhi	r14,32768
   29350:	3013883a 	mov	r9,r6
   29354:	3815883a 	mov	r10,r7
   29358:	4091883a 	add	r8,r8,r2
   2935c:	20000226 	beq	r4,zero,29368 <__muldf3+0x284>
   29360:	5b64b03a 	or	r18,r11,r13
   29364:	63a6b03a 	or	r19,r12,r14
   29368:	7abfed36 	bltu	r15,r10,29320 <__muldf3+0x23c>
   2936c:	da001015 	stw	r8,64(sp)
   29370:	00840034 	movhi	r2,4096
   29374:	10bfffc4 	addi	r2,r2,-1
   29378:	12801436 	bltu	r2,r10,293cc <__muldf3+0x2e8>
   2937c:	da001017 	ldw	r8,64(sp)
   29380:	101f883a 	mov	r15,r2
   29384:	4a45883a 	add	r2,r9,r9
   29388:	124d803a 	cmpltu	r6,r2,r9
   2938c:	5287883a 	add	r3,r10,r10
   29390:	9497883a 	add	r11,r18,r18
   29394:	5c8f803a 	cmpltu	r7,r11,r18
   29398:	9cd9883a 	add	r12,r19,r19
   2939c:	01000044 	movi	r4,1
   293a0:	30cd883a 	add	r6,r6,r3
   293a4:	3b0f883a 	add	r7,r7,r12
   293a8:	423fffc4 	addi	r8,r8,-1
   293ac:	1013883a 	mov	r9,r2
   293b0:	3015883a 	mov	r10,r6
   293b4:	111ab03a 	or	r13,r2,r4
   293b8:	98003016 	blt	r19,zero,2947c <__muldf3+0x398>
   293bc:	5825883a 	mov	r18,r11
   293c0:	3827883a 	mov	r19,r7
   293c4:	7abfef2e 	bgeu	r15,r10,29384 <__muldf3+0x2a0>
   293c8:	da001015 	stw	r8,64(sp)
   293cc:	00803fc4 	movi	r2,255
   293d0:	488e703a 	and	r7,r9,r2
   293d4:	00802004 	movi	r2,128
   293d8:	0007883a 	mov	r3,zero
   293dc:	0011883a 	mov	r8,zero
   293e0:	38801826 	beq	r7,r2,29444 <__muldf3+0x360>
   293e4:	008000c4 	movi	r2,3
   293e8:	d9000e04 	addi	r4,sp,56
   293ec:	da801215 	stw	r10,72(sp)
   293f0:	d8800e15 	stw	r2,56(sp)
   293f4:	da401115 	stw	r9,68(sp)
   293f8:	003f6a06 	br	291a4 <__muldf3+0xc0>
   293fc:	89802126 	beq	r17,r6,29484 <__muldf3+0x3a0>
   29400:	0009883a 	mov	r4,zero
   29404:	5105883a 	add	r2,r10,r4
   29408:	128d803a 	cmpltu	r6,r2,r10
   2940c:	5d07883a 	add	r3,r11,r20
   29410:	30cd883a 	add	r6,r6,r3
   29414:	0021883a 	mov	r16,zero
   29418:	0023883a 	mov	r17,zero
   2941c:	1025883a 	mov	r18,r2
   29420:	3027883a 	mov	r19,r6
   29424:	32ff9e2e 	bgeu	r6,r11,292a0 <__muldf3+0x1bc>
   29428:	00800044 	movi	r2,1
   2942c:	8089883a 	add	r4,r16,r2
   29430:	240d803a 	cmpltu	r6,r4,r16
   29434:	344d883a 	add	r6,r6,r17
   29438:	2021883a 	mov	r16,r4
   2943c:	3023883a 	mov	r17,r6
   29440:	003f9806 	br	292a4 <__muldf3+0x1c0>
   29444:	403fe71e 	bne	r8,zero,293e4 <__muldf3+0x300>
   29448:	01004004 	movi	r4,256
   2944c:	4904703a 	and	r2,r9,r4
   29450:	10c4b03a 	or	r2,r2,r3
   29454:	103fe31e 	bne	r2,zero,293e4 <__muldf3+0x300>
   29458:	94c4b03a 	or	r2,r18,r19
   2945c:	103fe126 	beq	r2,zero,293e4 <__muldf3+0x300>
   29460:	49c5883a 	add	r2,r9,r7
   29464:	1251803a 	cmpltu	r8,r2,r9
   29468:	4291883a 	add	r8,r8,r10
   2946c:	013fc004 	movi	r4,-256
   29470:	1112703a 	and	r9,r2,r4
   29474:	4015883a 	mov	r10,r8
   29478:	003fda06 	br	293e4 <__muldf3+0x300>
   2947c:	6813883a 	mov	r9,r13
   29480:	003fce06 	br	293bc <__muldf3+0x2d8>
   29484:	143f7c36 	bltu	r2,r16,29278 <__muldf3+0x194>
   29488:	003fdd06 	br	29400 <__muldf3+0x31c>
   2948c:	12bf852e 	bgeu	r2,r10,292a4 <__muldf3+0x1c0>
   29490:	003fe506 	br	29428 <__muldf3+0x344>
   29494:	00800084 	movi	r2,2
   29498:	20bf351e 	bne	r4,r2,29170 <__muldf3+0x8c>
   2949c:	010000f4 	movhi	r4,3
   294a0:	213b3604 	addi	r4,r4,-4904
   294a4:	003f3f06 	br	291a4 <__muldf3+0xc0>

000294a8 <__divdf3>:
   294a8:	deffed04 	addi	sp,sp,-76
   294ac:	dcc01115 	stw	r19,68(sp)
   294b0:	dcc00404 	addi	r19,sp,16
   294b4:	2011883a 	mov	r8,r4
   294b8:	2813883a 	mov	r9,r5
   294bc:	dc000e15 	stw	r16,56(sp)
   294c0:	d809883a 	mov	r4,sp
   294c4:	980b883a 	mov	r5,r19
   294c8:	dc000904 	addi	r16,sp,36
   294cc:	dfc01215 	stw	ra,72(sp)
   294d0:	da400115 	stw	r9,4(sp)
   294d4:	d9c00315 	stw	r7,12(sp)
   294d8:	da000015 	stw	r8,0(sp)
   294dc:	d9800215 	stw	r6,8(sp)
   294e0:	dc801015 	stw	r18,64(sp)
   294e4:	dc400f15 	stw	r17,60(sp)
   294e8:	002a2840 	call	2a284 <__unpack_d>
   294ec:	d9000204 	addi	r4,sp,8
   294f0:	800b883a 	mov	r5,r16
   294f4:	002a2840 	call	2a284 <__unpack_d>
   294f8:	d9000417 	ldw	r4,16(sp)
   294fc:	00800044 	movi	r2,1
   29500:	11000b2e 	bgeu	r2,r4,29530 <__divdf3+0x88>
   29504:	d9400917 	ldw	r5,36(sp)
   29508:	1140762e 	bgeu	r2,r5,296e4 <__divdf3+0x23c>
   2950c:	d8800517 	ldw	r2,20(sp)
   29510:	d8c00a17 	ldw	r3,40(sp)
   29514:	01800104 	movi	r6,4
   29518:	10c4f03a 	xor	r2,r2,r3
   2951c:	d8800515 	stw	r2,20(sp)
   29520:	21800226 	beq	r4,r6,2952c <__divdf3+0x84>
   29524:	00800084 	movi	r2,2
   29528:	2080141e 	bne	r4,r2,2957c <__divdf3+0xd4>
   2952c:	29000926 	beq	r5,r4,29554 <__divdf3+0xac>
   29530:	9809883a 	mov	r4,r19
   29534:	0029f700 	call	29f70 <__pack_d>
   29538:	dfc01217 	ldw	ra,72(sp)
   2953c:	dcc01117 	ldw	r19,68(sp)
   29540:	dc801017 	ldw	r18,64(sp)
   29544:	dc400f17 	ldw	r17,60(sp)
   29548:	dc000e17 	ldw	r16,56(sp)
   2954c:	dec01304 	addi	sp,sp,76
   29550:	f800283a 	ret
   29554:	010000f4 	movhi	r4,3
   29558:	213b3604 	addi	r4,r4,-4904
   2955c:	0029f700 	call	29f70 <__pack_d>
   29560:	dfc01217 	ldw	ra,72(sp)
   29564:	dcc01117 	ldw	r19,68(sp)
   29568:	dc801017 	ldw	r18,64(sp)
   2956c:	dc400f17 	ldw	r17,60(sp)
   29570:	dc000e17 	ldw	r16,56(sp)
   29574:	dec01304 	addi	sp,sp,76
   29578:	f800283a 	ret
   2957c:	29805b26 	beq	r5,r6,296ec <__divdf3+0x244>
   29580:	28802d26 	beq	r5,r2,29638 <__divdf3+0x190>
   29584:	d8c00617 	ldw	r3,24(sp)
   29588:	d8800b17 	ldw	r2,44(sp)
   2958c:	d9c00817 	ldw	r7,32(sp)
   29590:	dc400d17 	ldw	r17,52(sp)
   29594:	188bc83a 	sub	r5,r3,r2
   29598:	d9800717 	ldw	r6,28(sp)
   2959c:	dc000c17 	ldw	r16,48(sp)
   295a0:	d9400615 	stw	r5,24(sp)
   295a4:	3c403836 	bltu	r7,r17,29688 <__divdf3+0x1e0>
   295a8:	89c03626 	beq	r17,r7,29684 <__divdf3+0x1dc>
   295ac:	0015883a 	mov	r10,zero
   295b0:	001d883a 	mov	r14,zero
   295b4:	02c40034 	movhi	r11,4096
   295b8:	001f883a 	mov	r15,zero
   295bc:	003f883a 	mov	ra,zero
   295c0:	04800f44 	movi	r18,61
   295c4:	00000f06 	br	29604 <__divdf3+0x15c>
   295c8:	601d883a 	mov	r14,r12
   295cc:	681f883a 	mov	r15,r13
   295d0:	400d883a 	mov	r6,r8
   295d4:	100f883a 	mov	r7,r2
   295d8:	3191883a 	add	r8,r6,r6
   295dc:	5808d07a 	srli	r4,r11,1
   295e0:	4185803a 	cmpltu	r2,r8,r6
   295e4:	39d3883a 	add	r9,r7,r7
   295e8:	28c6b03a 	or	r3,r5,r3
   295ec:	1245883a 	add	r2,r2,r9
   295f0:	1815883a 	mov	r10,r3
   295f4:	2017883a 	mov	r11,r4
   295f8:	400d883a 	mov	r6,r8
   295fc:	100f883a 	mov	r7,r2
   29600:	fc801726 	beq	ra,r18,29660 <__divdf3+0x1b8>
   29604:	580a97fa 	slli	r5,r11,31
   29608:	5006d07a 	srli	r3,r10,1
   2960c:	ffc00044 	addi	ra,ra,1
   29610:	3c7ff136 	bltu	r7,r17,295d8 <__divdf3+0x130>
   29614:	3411c83a 	sub	r8,r6,r16
   29618:	3205803a 	cmpltu	r2,r6,r8
   2961c:	3c53c83a 	sub	r9,r7,r17
   29620:	7298b03a 	or	r12,r14,r10
   29624:	7adab03a 	or	r13,r15,r11
   29628:	4885c83a 	sub	r2,r9,r2
   2962c:	89ffe61e 	bne	r17,r7,295c8 <__divdf3+0x120>
   29630:	343fe936 	bltu	r6,r16,295d8 <__divdf3+0x130>
   29634:	003fe406 	br	295c8 <__divdf3+0x120>
   29638:	9809883a 	mov	r4,r19
   2963c:	d9800415 	stw	r6,16(sp)
   29640:	0029f700 	call	29f70 <__pack_d>
   29644:	dfc01217 	ldw	ra,72(sp)
   29648:	dcc01117 	ldw	r19,68(sp)
   2964c:	dc801017 	ldw	r18,64(sp)
   29650:	dc400f17 	ldw	r17,60(sp)
   29654:	dc000e17 	ldw	r16,56(sp)
   29658:	dec01304 	addi	sp,sp,76
   2965c:	f800283a 	ret
   29660:	00803fc4 	movi	r2,255
   29664:	7090703a 	and	r8,r14,r2
   29668:	00802004 	movi	r2,128
   2966c:	0007883a 	mov	r3,zero
   29670:	0013883a 	mov	r9,zero
   29674:	40800d26 	beq	r8,r2,296ac <__divdf3+0x204>
   29678:	dbc00815 	stw	r15,32(sp)
   2967c:	db800715 	stw	r14,28(sp)
   29680:	003fab06 	br	29530 <__divdf3+0x88>
   29684:	343fc92e 	bgeu	r6,r16,295ac <__divdf3+0x104>
   29688:	3185883a 	add	r2,r6,r6
   2968c:	1189803a 	cmpltu	r4,r2,r6
   29690:	39c7883a 	add	r3,r7,r7
   29694:	20c9883a 	add	r4,r4,r3
   29698:	297fffc4 	addi	r5,r5,-1
   2969c:	100d883a 	mov	r6,r2
   296a0:	200f883a 	mov	r7,r4
   296a4:	d9400615 	stw	r5,24(sp)
   296a8:	003fc006 	br	295ac <__divdf3+0x104>
   296ac:	483ff21e 	bne	r9,zero,29678 <__divdf3+0x1d0>
   296b0:	01004004 	movi	r4,256
   296b4:	7104703a 	and	r2,r14,r4
   296b8:	10c4b03a 	or	r2,r2,r3
   296bc:	103fee1e 	bne	r2,zero,29678 <__divdf3+0x1d0>
   296c0:	31c4b03a 	or	r2,r6,r7
   296c4:	103fec26 	beq	r2,zero,29678 <__divdf3+0x1d0>
   296c8:	7205883a 	add	r2,r14,r8
   296cc:	1391803a 	cmpltu	r8,r2,r14
   296d0:	43d1883a 	add	r8,r8,r15
   296d4:	013fc004 	movi	r4,-256
   296d8:	111c703a 	and	r14,r2,r4
   296dc:	401f883a 	mov	r15,r8
   296e0:	003fe506 	br	29678 <__divdf3+0x1d0>
   296e4:	8009883a 	mov	r4,r16
   296e8:	003f9206 	br	29534 <__divdf3+0x8c>
   296ec:	9809883a 	mov	r4,r19
   296f0:	d8000715 	stw	zero,28(sp)
   296f4:	d8000815 	stw	zero,32(sp)
   296f8:	d8000615 	stw	zero,24(sp)
   296fc:	003f8d06 	br	29534 <__divdf3+0x8c>

00029700 <__eqdf2>:
   29700:	deffef04 	addi	sp,sp,-68
   29704:	dc400f15 	stw	r17,60(sp)
   29708:	dc400404 	addi	r17,sp,16
   2970c:	2005883a 	mov	r2,r4
   29710:	2807883a 	mov	r3,r5
   29714:	dc000e15 	stw	r16,56(sp)
   29718:	d809883a 	mov	r4,sp
   2971c:	880b883a 	mov	r5,r17
   29720:	dc000904 	addi	r16,sp,36
   29724:	d8c00115 	stw	r3,4(sp)
   29728:	d8800015 	stw	r2,0(sp)
   2972c:	d9800215 	stw	r6,8(sp)
   29730:	dfc01015 	stw	ra,64(sp)
   29734:	d9c00315 	stw	r7,12(sp)
   29738:	002a2840 	call	2a284 <__unpack_d>
   2973c:	d9000204 	addi	r4,sp,8
   29740:	800b883a 	mov	r5,r16
   29744:	002a2840 	call	2a284 <__unpack_d>
   29748:	d8800417 	ldw	r2,16(sp)
   2974c:	00c00044 	movi	r3,1
   29750:	180d883a 	mov	r6,r3
   29754:	1880062e 	bgeu	r3,r2,29770 <__eqdf2+0x70>
   29758:	d8800917 	ldw	r2,36(sp)
   2975c:	8809883a 	mov	r4,r17
   29760:	800b883a 	mov	r5,r16
   29764:	1880022e 	bgeu	r3,r2,29770 <__eqdf2+0x70>
   29768:	002a3bc0 	call	2a3bc <__fpcmp_parts_d>
   2976c:	100d883a 	mov	r6,r2
   29770:	3005883a 	mov	r2,r6
   29774:	dfc01017 	ldw	ra,64(sp)
   29778:	dc400f17 	ldw	r17,60(sp)
   2977c:	dc000e17 	ldw	r16,56(sp)
   29780:	dec01104 	addi	sp,sp,68
   29784:	f800283a 	ret

00029788 <__nedf2>:
   29788:	deffef04 	addi	sp,sp,-68
   2978c:	dc400f15 	stw	r17,60(sp)
   29790:	dc400404 	addi	r17,sp,16
   29794:	2005883a 	mov	r2,r4
   29798:	2807883a 	mov	r3,r5
   2979c:	dc000e15 	stw	r16,56(sp)
   297a0:	d809883a 	mov	r4,sp
   297a4:	880b883a 	mov	r5,r17
   297a8:	dc000904 	addi	r16,sp,36
   297ac:	d8c00115 	stw	r3,4(sp)
   297b0:	d8800015 	stw	r2,0(sp)
   297b4:	d9800215 	stw	r6,8(sp)
   297b8:	dfc01015 	stw	ra,64(sp)
   297bc:	d9c00315 	stw	r7,12(sp)
   297c0:	002a2840 	call	2a284 <__unpack_d>
   297c4:	d9000204 	addi	r4,sp,8
   297c8:	800b883a 	mov	r5,r16
   297cc:	002a2840 	call	2a284 <__unpack_d>
   297d0:	d8800417 	ldw	r2,16(sp)
   297d4:	00c00044 	movi	r3,1
   297d8:	180d883a 	mov	r6,r3
   297dc:	1880062e 	bgeu	r3,r2,297f8 <__nedf2+0x70>
   297e0:	d8800917 	ldw	r2,36(sp)
   297e4:	8809883a 	mov	r4,r17
   297e8:	800b883a 	mov	r5,r16
   297ec:	1880022e 	bgeu	r3,r2,297f8 <__nedf2+0x70>
   297f0:	002a3bc0 	call	2a3bc <__fpcmp_parts_d>
   297f4:	100d883a 	mov	r6,r2
   297f8:	3005883a 	mov	r2,r6
   297fc:	dfc01017 	ldw	ra,64(sp)
   29800:	dc400f17 	ldw	r17,60(sp)
   29804:	dc000e17 	ldw	r16,56(sp)
   29808:	dec01104 	addi	sp,sp,68
   2980c:	f800283a 	ret

00029810 <__gtdf2>:
   29810:	deffef04 	addi	sp,sp,-68
   29814:	dc400f15 	stw	r17,60(sp)
   29818:	dc400404 	addi	r17,sp,16
   2981c:	2005883a 	mov	r2,r4
   29820:	2807883a 	mov	r3,r5
   29824:	dc000e15 	stw	r16,56(sp)
   29828:	d809883a 	mov	r4,sp
   2982c:	880b883a 	mov	r5,r17
   29830:	dc000904 	addi	r16,sp,36
   29834:	d8c00115 	stw	r3,4(sp)
   29838:	d8800015 	stw	r2,0(sp)
   2983c:	d9800215 	stw	r6,8(sp)
   29840:	dfc01015 	stw	ra,64(sp)
   29844:	d9c00315 	stw	r7,12(sp)
   29848:	002a2840 	call	2a284 <__unpack_d>
   2984c:	d9000204 	addi	r4,sp,8
   29850:	800b883a 	mov	r5,r16
   29854:	002a2840 	call	2a284 <__unpack_d>
   29858:	d8800417 	ldw	r2,16(sp)
   2985c:	00c00044 	movi	r3,1
   29860:	01bfffc4 	movi	r6,-1
   29864:	1880062e 	bgeu	r3,r2,29880 <__gtdf2+0x70>
   29868:	d8800917 	ldw	r2,36(sp)
   2986c:	8809883a 	mov	r4,r17
   29870:	800b883a 	mov	r5,r16
   29874:	1880022e 	bgeu	r3,r2,29880 <__gtdf2+0x70>
   29878:	002a3bc0 	call	2a3bc <__fpcmp_parts_d>
   2987c:	100d883a 	mov	r6,r2
   29880:	3005883a 	mov	r2,r6
   29884:	dfc01017 	ldw	ra,64(sp)
   29888:	dc400f17 	ldw	r17,60(sp)
   2988c:	dc000e17 	ldw	r16,56(sp)
   29890:	dec01104 	addi	sp,sp,68
   29894:	f800283a 	ret

00029898 <__gedf2>:
   29898:	deffef04 	addi	sp,sp,-68
   2989c:	dc400f15 	stw	r17,60(sp)
   298a0:	dc400404 	addi	r17,sp,16
   298a4:	2005883a 	mov	r2,r4
   298a8:	2807883a 	mov	r3,r5
   298ac:	dc000e15 	stw	r16,56(sp)
   298b0:	d809883a 	mov	r4,sp
   298b4:	880b883a 	mov	r5,r17
   298b8:	dc000904 	addi	r16,sp,36
   298bc:	d8c00115 	stw	r3,4(sp)
   298c0:	d8800015 	stw	r2,0(sp)
   298c4:	d9800215 	stw	r6,8(sp)
   298c8:	dfc01015 	stw	ra,64(sp)
   298cc:	d9c00315 	stw	r7,12(sp)
   298d0:	002a2840 	call	2a284 <__unpack_d>
   298d4:	d9000204 	addi	r4,sp,8
   298d8:	800b883a 	mov	r5,r16
   298dc:	002a2840 	call	2a284 <__unpack_d>
   298e0:	d8800417 	ldw	r2,16(sp)
   298e4:	00c00044 	movi	r3,1
   298e8:	01bfffc4 	movi	r6,-1
   298ec:	1880062e 	bgeu	r3,r2,29908 <__gedf2+0x70>
   298f0:	d8800917 	ldw	r2,36(sp)
   298f4:	8809883a 	mov	r4,r17
   298f8:	800b883a 	mov	r5,r16
   298fc:	1880022e 	bgeu	r3,r2,29908 <__gedf2+0x70>
   29900:	002a3bc0 	call	2a3bc <__fpcmp_parts_d>
   29904:	100d883a 	mov	r6,r2
   29908:	3005883a 	mov	r2,r6
   2990c:	dfc01017 	ldw	ra,64(sp)
   29910:	dc400f17 	ldw	r17,60(sp)
   29914:	dc000e17 	ldw	r16,56(sp)
   29918:	dec01104 	addi	sp,sp,68
   2991c:	f800283a 	ret

00029920 <__ltdf2>:
   29920:	deffef04 	addi	sp,sp,-68
   29924:	dc400f15 	stw	r17,60(sp)
   29928:	dc400404 	addi	r17,sp,16
   2992c:	2005883a 	mov	r2,r4
   29930:	2807883a 	mov	r3,r5
   29934:	dc000e15 	stw	r16,56(sp)
   29938:	d809883a 	mov	r4,sp
   2993c:	880b883a 	mov	r5,r17
   29940:	dc000904 	addi	r16,sp,36
   29944:	d8c00115 	stw	r3,4(sp)
   29948:	d8800015 	stw	r2,0(sp)
   2994c:	d9800215 	stw	r6,8(sp)
   29950:	dfc01015 	stw	ra,64(sp)
   29954:	d9c00315 	stw	r7,12(sp)
   29958:	002a2840 	call	2a284 <__unpack_d>
   2995c:	d9000204 	addi	r4,sp,8
   29960:	800b883a 	mov	r5,r16
   29964:	002a2840 	call	2a284 <__unpack_d>
   29968:	d8800417 	ldw	r2,16(sp)
   2996c:	00c00044 	movi	r3,1
   29970:	180d883a 	mov	r6,r3
   29974:	1880062e 	bgeu	r3,r2,29990 <__ltdf2+0x70>
   29978:	d8800917 	ldw	r2,36(sp)
   2997c:	8809883a 	mov	r4,r17
   29980:	800b883a 	mov	r5,r16
   29984:	1880022e 	bgeu	r3,r2,29990 <__ltdf2+0x70>
   29988:	002a3bc0 	call	2a3bc <__fpcmp_parts_d>
   2998c:	100d883a 	mov	r6,r2
   29990:	3005883a 	mov	r2,r6
   29994:	dfc01017 	ldw	ra,64(sp)
   29998:	dc400f17 	ldw	r17,60(sp)
   2999c:	dc000e17 	ldw	r16,56(sp)
   299a0:	dec01104 	addi	sp,sp,68
   299a4:	f800283a 	ret

000299a8 <__floatsidf>:
   299a8:	2006d7fa 	srli	r3,r4,31
   299ac:	defff604 	addi	sp,sp,-40
   299b0:	008000c4 	movi	r2,3
   299b4:	dfc00915 	stw	ra,36(sp)
   299b8:	dcc00815 	stw	r19,32(sp)
   299bc:	dc800715 	stw	r18,28(sp)
   299c0:	dc400615 	stw	r17,24(sp)
   299c4:	dc000515 	stw	r16,20(sp)
   299c8:	d8800015 	stw	r2,0(sp)
   299cc:	d8c00115 	stw	r3,4(sp)
   299d0:	20000f1e 	bne	r4,zero,29a10 <__floatsidf+0x68>
   299d4:	00800084 	movi	r2,2
   299d8:	d8800015 	stw	r2,0(sp)
   299dc:	d809883a 	mov	r4,sp
   299e0:	0029f700 	call	29f70 <__pack_d>
   299e4:	1009883a 	mov	r4,r2
   299e8:	180b883a 	mov	r5,r3
   299ec:	2005883a 	mov	r2,r4
   299f0:	2807883a 	mov	r3,r5
   299f4:	dfc00917 	ldw	ra,36(sp)
   299f8:	dcc00817 	ldw	r19,32(sp)
   299fc:	dc800717 	ldw	r18,28(sp)
   29a00:	dc400617 	ldw	r17,24(sp)
   29a04:	dc000517 	ldw	r16,20(sp)
   29a08:	dec00a04 	addi	sp,sp,40
   29a0c:	f800283a 	ret
   29a10:	00800f04 	movi	r2,60
   29a14:	1807003a 	cmpeq	r3,r3,zero
   29a18:	d8800215 	stw	r2,8(sp)
   29a1c:	18001126 	beq	r3,zero,29a64 <__floatsidf+0xbc>
   29a20:	0027883a 	mov	r19,zero
   29a24:	2025883a 	mov	r18,r4
   29a28:	d9000315 	stw	r4,12(sp)
   29a2c:	dcc00415 	stw	r19,16(sp)
   29a30:	0029ef00 	call	29ef0 <__clzsi2>
   29a34:	11000744 	addi	r4,r2,29
   29a38:	013fe80e 	bge	zero,r4,299dc <__floatsidf+0x34>
   29a3c:	10bfff44 	addi	r2,r2,-3
   29a40:	10000c16 	blt	r2,zero,29a74 <__floatsidf+0xcc>
   29a44:	90a2983a 	sll	r17,r18,r2
   29a48:	0021883a 	mov	r16,zero
   29a4c:	d8800217 	ldw	r2,8(sp)
   29a50:	dc400415 	stw	r17,16(sp)
   29a54:	dc000315 	stw	r16,12(sp)
   29a58:	1105c83a 	sub	r2,r2,r4
   29a5c:	d8800215 	stw	r2,8(sp)
   29a60:	003fde06 	br	299dc <__floatsidf+0x34>
   29a64:	00a00034 	movhi	r2,32768
   29a68:	20800a26 	beq	r4,r2,29a94 <__floatsidf+0xec>
   29a6c:	0109c83a 	sub	r4,zero,r4
   29a70:	003feb06 	br	29a20 <__floatsidf+0x78>
   29a74:	9006d07a 	srli	r3,r18,1
   29a78:	008007c4 	movi	r2,31
   29a7c:	1105c83a 	sub	r2,r2,r4
   29a80:	1886d83a 	srl	r3,r3,r2
   29a84:	9922983a 	sll	r17,r19,r4
   29a88:	9120983a 	sll	r16,r18,r4
   29a8c:	1c62b03a 	or	r17,r3,r17
   29a90:	003fee06 	br	29a4c <__floatsidf+0xa4>
   29a94:	0009883a 	mov	r4,zero
   29a98:	01707834 	movhi	r5,49632
   29a9c:	003fd306 	br	299ec <__floatsidf+0x44>

00029aa0 <__fixdfsi>:
   29aa0:	defff804 	addi	sp,sp,-32
   29aa4:	2005883a 	mov	r2,r4
   29aa8:	2807883a 	mov	r3,r5
   29aac:	d809883a 	mov	r4,sp
   29ab0:	d9400204 	addi	r5,sp,8
   29ab4:	d8c00115 	stw	r3,4(sp)
   29ab8:	d8800015 	stw	r2,0(sp)
   29abc:	dfc00715 	stw	ra,28(sp)
   29ac0:	002a2840 	call	2a284 <__unpack_d>
   29ac4:	d8c00217 	ldw	r3,8(sp)
   29ac8:	00800084 	movi	r2,2
   29acc:	1880051e 	bne	r3,r2,29ae4 <__fixdfsi+0x44>
   29ad0:	0007883a 	mov	r3,zero
   29ad4:	1805883a 	mov	r2,r3
   29ad8:	dfc00717 	ldw	ra,28(sp)
   29adc:	dec00804 	addi	sp,sp,32
   29ae0:	f800283a 	ret
   29ae4:	00800044 	movi	r2,1
   29ae8:	10fff92e 	bgeu	r2,r3,29ad0 <__fixdfsi+0x30>
   29aec:	00800104 	movi	r2,4
   29af0:	18800426 	beq	r3,r2,29b04 <__fixdfsi+0x64>
   29af4:	d8c00417 	ldw	r3,16(sp)
   29af8:	183ff516 	blt	r3,zero,29ad0 <__fixdfsi+0x30>
   29afc:	00800784 	movi	r2,30
   29b00:	10c0080e 	bge	r2,r3,29b24 <__fixdfsi+0x84>
   29b04:	d8800317 	ldw	r2,12(sp)
   29b08:	1000121e 	bne	r2,zero,29b54 <__fixdfsi+0xb4>
   29b0c:	00e00034 	movhi	r3,32768
   29b10:	18ffffc4 	addi	r3,r3,-1
   29b14:	1805883a 	mov	r2,r3
   29b18:	dfc00717 	ldw	ra,28(sp)
   29b1c:	dec00804 	addi	sp,sp,32
   29b20:	f800283a 	ret
   29b24:	00800f04 	movi	r2,60
   29b28:	10d1c83a 	sub	r8,r2,r3
   29b2c:	40bff804 	addi	r2,r8,-32
   29b30:	d9800517 	ldw	r6,20(sp)
   29b34:	d9c00617 	ldw	r7,24(sp)
   29b38:	10000816 	blt	r2,zero,29b5c <__fixdfsi+0xbc>
   29b3c:	3888d83a 	srl	r4,r7,r2
   29b40:	d8800317 	ldw	r2,12(sp)
   29b44:	2007883a 	mov	r3,r4
   29b48:	103fe226 	beq	r2,zero,29ad4 <__fixdfsi+0x34>
   29b4c:	0107c83a 	sub	r3,zero,r4
   29b50:	003fe006 	br	29ad4 <__fixdfsi+0x34>
   29b54:	00e00034 	movhi	r3,32768
   29b58:	003fde06 	br	29ad4 <__fixdfsi+0x34>
   29b5c:	39c7883a 	add	r3,r7,r7
   29b60:	008007c4 	movi	r2,31
   29b64:	1205c83a 	sub	r2,r2,r8
   29b68:	1886983a 	sll	r3,r3,r2
   29b6c:	3208d83a 	srl	r4,r6,r8
   29b70:	1908b03a 	or	r4,r3,r4
   29b74:	003ff206 	br	29b40 <__fixdfsi+0xa0>

00029b78 <__floatunsidf>:
   29b78:	defff204 	addi	sp,sp,-56
   29b7c:	dfc00d15 	stw	ra,52(sp)
   29b80:	ddc00c15 	stw	r23,48(sp)
   29b84:	dd800b15 	stw	r22,44(sp)
   29b88:	dd400a15 	stw	r21,40(sp)
   29b8c:	dd000915 	stw	r20,36(sp)
   29b90:	dcc00815 	stw	r19,32(sp)
   29b94:	dc800715 	stw	r18,28(sp)
   29b98:	dc400615 	stw	r17,24(sp)
   29b9c:	dc000515 	stw	r16,20(sp)
   29ba0:	d8000115 	stw	zero,4(sp)
   29ba4:	20000f1e 	bne	r4,zero,29be4 <__floatunsidf+0x6c>
   29ba8:	00800084 	movi	r2,2
   29bac:	d8800015 	stw	r2,0(sp)
   29bb0:	d809883a 	mov	r4,sp
   29bb4:	0029f700 	call	29f70 <__pack_d>
   29bb8:	dfc00d17 	ldw	ra,52(sp)
   29bbc:	ddc00c17 	ldw	r23,48(sp)
   29bc0:	dd800b17 	ldw	r22,44(sp)
   29bc4:	dd400a17 	ldw	r21,40(sp)
   29bc8:	dd000917 	ldw	r20,36(sp)
   29bcc:	dcc00817 	ldw	r19,32(sp)
   29bd0:	dc800717 	ldw	r18,28(sp)
   29bd4:	dc400617 	ldw	r17,24(sp)
   29bd8:	dc000517 	ldw	r16,20(sp)
   29bdc:	dec00e04 	addi	sp,sp,56
   29be0:	f800283a 	ret
   29be4:	008000c4 	movi	r2,3
   29be8:	00c00f04 	movi	r3,60
   29bec:	002f883a 	mov	r23,zero
   29bf0:	202d883a 	mov	r22,r4
   29bf4:	d8800015 	stw	r2,0(sp)
   29bf8:	d8c00215 	stw	r3,8(sp)
   29bfc:	d9000315 	stw	r4,12(sp)
   29c00:	ddc00415 	stw	r23,16(sp)
   29c04:	0029ef00 	call	29ef0 <__clzsi2>
   29c08:	12400744 	addi	r9,r2,29
   29c0c:	48000b16 	blt	r9,zero,29c3c <__floatunsidf+0xc4>
   29c10:	483fe726 	beq	r9,zero,29bb0 <__floatunsidf+0x38>
   29c14:	10bfff44 	addi	r2,r2,-3
   29c18:	10002e16 	blt	r2,zero,29cd4 <__floatunsidf+0x15c>
   29c1c:	b0a2983a 	sll	r17,r22,r2
   29c20:	0021883a 	mov	r16,zero
   29c24:	d8800217 	ldw	r2,8(sp)
   29c28:	dc400415 	stw	r17,16(sp)
   29c2c:	dc000315 	stw	r16,12(sp)
   29c30:	1245c83a 	sub	r2,r2,r9
   29c34:	d8800215 	stw	r2,8(sp)
   29c38:	003fdd06 	br	29bb0 <__floatunsidf+0x38>
   29c3c:	0255c83a 	sub	r10,zero,r9
   29c40:	51bff804 	addi	r6,r10,-32
   29c44:	30001b16 	blt	r6,zero,29cb4 <__floatunsidf+0x13c>
   29c48:	b9a8d83a 	srl	r20,r23,r6
   29c4c:	002b883a 	mov	r21,zero
   29c50:	000f883a 	mov	r7,zero
   29c54:	01000044 	movi	r4,1
   29c58:	0011883a 	mov	r8,zero
   29c5c:	30002516 	blt	r6,zero,29cf4 <__floatunsidf+0x17c>
   29c60:	21a6983a 	sll	r19,r4,r6
   29c64:	0025883a 	mov	r18,zero
   29c68:	00bfffc4 	movi	r2,-1
   29c6c:	9089883a 	add	r4,r18,r2
   29c70:	988b883a 	add	r5,r19,r2
   29c74:	248d803a 	cmpltu	r6,r4,r18
   29c78:	314b883a 	add	r5,r6,r5
   29c7c:	b104703a 	and	r2,r22,r4
   29c80:	b946703a 	and	r3,r23,r5
   29c84:	10c4b03a 	or	r2,r2,r3
   29c88:	10000226 	beq	r2,zero,29c94 <__floatunsidf+0x11c>
   29c8c:	01c00044 	movi	r7,1
   29c90:	0011883a 	mov	r8,zero
   29c94:	d9000217 	ldw	r4,8(sp)
   29c98:	a1c4b03a 	or	r2,r20,r7
   29c9c:	aa06b03a 	or	r3,r21,r8
   29ca0:	2249c83a 	sub	r4,r4,r9
   29ca4:	d8c00415 	stw	r3,16(sp)
   29ca8:	d9000215 	stw	r4,8(sp)
   29cac:	d8800315 	stw	r2,12(sp)
   29cb0:	003fbf06 	br	29bb0 <__floatunsidf+0x38>
   29cb4:	bdc7883a 	add	r3,r23,r23
   29cb8:	008007c4 	movi	r2,31
   29cbc:	1285c83a 	sub	r2,r2,r10
   29cc0:	1886983a 	sll	r3,r3,r2
   29cc4:	b2a8d83a 	srl	r20,r22,r10
   29cc8:	baaad83a 	srl	r21,r23,r10
   29ccc:	1d28b03a 	or	r20,r3,r20
   29cd0:	003fdf06 	br	29c50 <__floatunsidf+0xd8>
   29cd4:	b006d07a 	srli	r3,r22,1
   29cd8:	008007c4 	movi	r2,31
   29cdc:	1245c83a 	sub	r2,r2,r9
   29ce0:	1886d83a 	srl	r3,r3,r2
   29ce4:	ba62983a 	sll	r17,r23,r9
   29ce8:	b260983a 	sll	r16,r22,r9
   29cec:	1c62b03a 	or	r17,r3,r17
   29cf0:	003fcc06 	br	29c24 <__floatunsidf+0xac>
   29cf4:	2006d07a 	srli	r3,r4,1
   29cf8:	008007c4 	movi	r2,31
   29cfc:	1285c83a 	sub	r2,r2,r10
   29d00:	18a6d83a 	srl	r19,r3,r2
   29d04:	22a4983a 	sll	r18,r4,r10
   29d08:	003fd706 	br	29c68 <__floatunsidf+0xf0>

00029d0c <udivmodsi4>:
   29d0c:	29001b2e 	bgeu	r5,r4,29d7c <udivmodsi4+0x70>
   29d10:	28001a16 	blt	r5,zero,29d7c <udivmodsi4+0x70>
   29d14:	00800044 	movi	r2,1
   29d18:	0007883a 	mov	r3,zero
   29d1c:	01c007c4 	movi	r7,31
   29d20:	00000306 	br	29d30 <udivmodsi4+0x24>
   29d24:	19c01326 	beq	r3,r7,29d74 <udivmodsi4+0x68>
   29d28:	18c00044 	addi	r3,r3,1
   29d2c:	28000416 	blt	r5,zero,29d40 <udivmodsi4+0x34>
   29d30:	294b883a 	add	r5,r5,r5
   29d34:	1085883a 	add	r2,r2,r2
   29d38:	293ffa36 	bltu	r5,r4,29d24 <udivmodsi4+0x18>
   29d3c:	10000d26 	beq	r2,zero,29d74 <udivmodsi4+0x68>
   29d40:	0007883a 	mov	r3,zero
   29d44:	21400236 	bltu	r4,r5,29d50 <udivmodsi4+0x44>
   29d48:	2149c83a 	sub	r4,r4,r5
   29d4c:	1886b03a 	or	r3,r3,r2
   29d50:	1004d07a 	srli	r2,r2,1
   29d54:	280ad07a 	srli	r5,r5,1
   29d58:	103ffa1e 	bne	r2,zero,29d44 <udivmodsi4+0x38>
   29d5c:	30000226 	beq	r6,zero,29d68 <udivmodsi4+0x5c>
   29d60:	2005883a 	mov	r2,r4
   29d64:	f800283a 	ret
   29d68:	1809883a 	mov	r4,r3
   29d6c:	2005883a 	mov	r2,r4
   29d70:	f800283a 	ret
   29d74:	0007883a 	mov	r3,zero
   29d78:	003ff806 	br	29d5c <udivmodsi4+0x50>
   29d7c:	00800044 	movi	r2,1
   29d80:	0007883a 	mov	r3,zero
   29d84:	003fef06 	br	29d44 <udivmodsi4+0x38>

00029d88 <__divsi3>:
   29d88:	defffe04 	addi	sp,sp,-8
   29d8c:	dc000015 	stw	r16,0(sp)
   29d90:	dfc00115 	stw	ra,4(sp)
   29d94:	0021883a 	mov	r16,zero
   29d98:	20000c16 	blt	r4,zero,29dcc <__divsi3+0x44>
   29d9c:	000d883a 	mov	r6,zero
   29da0:	28000e16 	blt	r5,zero,29ddc <__divsi3+0x54>
   29da4:	0029d0c0 	call	29d0c <udivmodsi4>
   29da8:	1007883a 	mov	r3,r2
   29dac:	8005003a 	cmpeq	r2,r16,zero
   29db0:	1000011e 	bne	r2,zero,29db8 <__divsi3+0x30>
   29db4:	00c7c83a 	sub	r3,zero,r3
   29db8:	1805883a 	mov	r2,r3
   29dbc:	dfc00117 	ldw	ra,4(sp)
   29dc0:	dc000017 	ldw	r16,0(sp)
   29dc4:	dec00204 	addi	sp,sp,8
   29dc8:	f800283a 	ret
   29dcc:	0109c83a 	sub	r4,zero,r4
   29dd0:	04000044 	movi	r16,1
   29dd4:	000d883a 	mov	r6,zero
   29dd8:	283ff20e 	bge	r5,zero,29da4 <__divsi3+0x1c>
   29ddc:	014bc83a 	sub	r5,zero,r5
   29de0:	8021003a 	cmpeq	r16,r16,zero
   29de4:	003fef06 	br	29da4 <__divsi3+0x1c>

00029de8 <__modsi3>:
   29de8:	deffff04 	addi	sp,sp,-4
   29dec:	dfc00015 	stw	ra,0(sp)
   29df0:	01800044 	movi	r6,1
   29df4:	2807883a 	mov	r3,r5
   29df8:	20000416 	blt	r4,zero,29e0c <__modsi3+0x24>
   29dfc:	28000c16 	blt	r5,zero,29e30 <__modsi3+0x48>
   29e00:	dfc00017 	ldw	ra,0(sp)
   29e04:	dec00104 	addi	sp,sp,4
   29e08:	0029d0c1 	jmpi	29d0c <udivmodsi4>
   29e0c:	0109c83a 	sub	r4,zero,r4
   29e10:	28000b16 	blt	r5,zero,29e40 <__modsi3+0x58>
   29e14:	180b883a 	mov	r5,r3
   29e18:	01800044 	movi	r6,1
   29e1c:	0029d0c0 	call	29d0c <udivmodsi4>
   29e20:	0085c83a 	sub	r2,zero,r2
   29e24:	dfc00017 	ldw	ra,0(sp)
   29e28:	dec00104 	addi	sp,sp,4
   29e2c:	f800283a 	ret
   29e30:	014bc83a 	sub	r5,zero,r5
   29e34:	dfc00017 	ldw	ra,0(sp)
   29e38:	dec00104 	addi	sp,sp,4
   29e3c:	0029d0c1 	jmpi	29d0c <udivmodsi4>
   29e40:	0147c83a 	sub	r3,zero,r5
   29e44:	003ff306 	br	29e14 <__modsi3+0x2c>

00029e48 <__udivsi3>:
   29e48:	000d883a 	mov	r6,zero
   29e4c:	0029d0c1 	jmpi	29d0c <udivmodsi4>

00029e50 <__umodsi3>:
   29e50:	01800044 	movi	r6,1
   29e54:	0029d0c1 	jmpi	29d0c <udivmodsi4>

00029e58 <__muldi3>:
   29e58:	2011883a 	mov	r8,r4
   29e5c:	427fffcc 	andi	r9,r8,65535
   29e60:	4018d43a 	srli	r12,r8,16
   29e64:	32bfffcc 	andi	r10,r6,65535
   29e68:	3016d43a 	srli	r11,r6,16
   29e6c:	4a85383a 	mul	r2,r9,r10
   29e70:	6295383a 	mul	r10,r12,r10
   29e74:	4ad3383a 	mul	r9,r9,r11
   29e78:	113fffcc 	andi	r4,r2,65535
   29e7c:	1004d43a 	srli	r2,r2,16
   29e80:	4a93883a 	add	r9,r9,r10
   29e84:	3807883a 	mov	r3,r7
   29e88:	1245883a 	add	r2,r2,r9
   29e8c:	280f883a 	mov	r7,r5
   29e90:	180b883a 	mov	r5,r3
   29e94:	1006943a 	slli	r3,r2,16
   29e98:	defffd04 	addi	sp,sp,-12
   29e9c:	dc800215 	stw	r18,8(sp)
   29ea0:	1907883a 	add	r3,r3,r4
   29ea4:	dc400115 	stw	r17,4(sp)
   29ea8:	dc000015 	stw	r16,0(sp)
   29eac:	4165383a 	mul	r18,r8,r5
   29eb0:	31e3383a 	mul	r17,r6,r7
   29eb4:	1012d43a 	srli	r9,r2,16
   29eb8:	62d9383a 	mul	r12,r12,r11
   29ebc:	181f883a 	mov	r15,r3
   29ec0:	1280022e 	bgeu	r2,r10,29ecc <__muldi3+0x74>
   29ec4:	00800074 	movhi	r2,1
   29ec8:	6099883a 	add	r12,r12,r2
   29ecc:	624d883a 	add	r6,r12,r9
   29ed0:	9187883a 	add	r3,r18,r6
   29ed4:	88c7883a 	add	r3,r17,r3
   29ed8:	7805883a 	mov	r2,r15
   29edc:	dc800217 	ldw	r18,8(sp)
   29ee0:	dc400117 	ldw	r17,4(sp)
   29ee4:	dc000017 	ldw	r16,0(sp)
   29ee8:	dec00304 	addi	sp,sp,12
   29eec:	f800283a 	ret

00029ef0 <__clzsi2>:
   29ef0:	00bfffd4 	movui	r2,65535
   29ef4:	11000e36 	bltu	r2,r4,29f30 <__clzsi2+0x40>
   29ef8:	00803fc4 	movi	r2,255
   29efc:	01400204 	movi	r5,8
   29f00:	0007883a 	mov	r3,zero
   29f04:	11001036 	bltu	r2,r4,29f48 <__clzsi2+0x58>
   29f08:	000b883a 	mov	r5,zero
   29f0c:	20c6d83a 	srl	r3,r4,r3
   29f10:	008000f4 	movhi	r2,3
   29f14:	10bb3b04 	addi	r2,r2,-4884
   29f18:	1887883a 	add	r3,r3,r2
   29f1c:	18800003 	ldbu	r2,0(r3)
   29f20:	00c00804 	movi	r3,32
   29f24:	2885883a 	add	r2,r5,r2
   29f28:	1885c83a 	sub	r2,r3,r2
   29f2c:	f800283a 	ret
   29f30:	01400404 	movi	r5,16
   29f34:	00804034 	movhi	r2,256
   29f38:	10bfffc4 	addi	r2,r2,-1
   29f3c:	2807883a 	mov	r3,r5
   29f40:	113ff22e 	bgeu	r2,r4,29f0c <__clzsi2+0x1c>
   29f44:	01400604 	movi	r5,24
   29f48:	2807883a 	mov	r3,r5
   29f4c:	20c6d83a 	srl	r3,r4,r3
   29f50:	008000f4 	movhi	r2,3
   29f54:	10bb3b04 	addi	r2,r2,-4884
   29f58:	1887883a 	add	r3,r3,r2
   29f5c:	18800003 	ldbu	r2,0(r3)
   29f60:	00c00804 	movi	r3,32
   29f64:	2885883a 	add	r2,r5,r2
   29f68:	1885c83a 	sub	r2,r3,r2
   29f6c:	f800283a 	ret

00029f70 <__pack_d>:
   29f70:	20c00017 	ldw	r3,0(r4)
   29f74:	defffd04 	addi	sp,sp,-12
   29f78:	dc000015 	stw	r16,0(sp)
   29f7c:	dc800215 	stw	r18,8(sp)
   29f80:	dc400115 	stw	r17,4(sp)
   29f84:	00800044 	movi	r2,1
   29f88:	22000317 	ldw	r8,12(r4)
   29f8c:	001f883a 	mov	r15,zero
   29f90:	22400417 	ldw	r9,16(r4)
   29f94:	24000117 	ldw	r16,4(r4)
   29f98:	10c0552e 	bgeu	r2,r3,2a0f0 <__pack_d+0x180>
   29f9c:	00800104 	movi	r2,4
   29fa0:	18804f26 	beq	r3,r2,2a0e0 <__pack_d+0x170>
   29fa4:	00800084 	movi	r2,2
   29fa8:	18800226 	beq	r3,r2,29fb4 <__pack_d+0x44>
   29fac:	4244b03a 	or	r2,r8,r9
   29fb0:	10001a1e 	bne	r2,zero,2a01c <__pack_d+0xac>
   29fb4:	000d883a 	mov	r6,zero
   29fb8:	000f883a 	mov	r7,zero
   29fbc:	0011883a 	mov	r8,zero
   29fc0:	00800434 	movhi	r2,16
   29fc4:	10bfffc4 	addi	r2,r2,-1
   29fc8:	301d883a 	mov	r14,r6
   29fcc:	3884703a 	and	r2,r7,r2
   29fd0:	400a953a 	slli	r5,r8,20
   29fd4:	79bffc2c 	andhi	r6,r15,65520
   29fd8:	308cb03a 	or	r6,r6,r2
   29fdc:	00e00434 	movhi	r3,32784
   29fe0:	18ffffc4 	addi	r3,r3,-1
   29fe4:	800497fa 	slli	r2,r16,31
   29fe8:	30c6703a 	and	r3,r6,r3
   29fec:	1946b03a 	or	r3,r3,r5
   29ff0:	01600034 	movhi	r5,32768
   29ff4:	297fffc4 	addi	r5,r5,-1
   29ff8:	194a703a 	and	r5,r3,r5
   29ffc:	288ab03a 	or	r5,r5,r2
   2a000:	2807883a 	mov	r3,r5
   2a004:	7005883a 	mov	r2,r14
   2a008:	dc800217 	ldw	r18,8(sp)
   2a00c:	dc400117 	ldw	r17,4(sp)
   2a010:	dc000017 	ldw	r16,0(sp)
   2a014:	dec00304 	addi	sp,sp,12
   2a018:	f800283a 	ret
   2a01c:	21000217 	ldw	r4,8(r4)
   2a020:	00bf0084 	movi	r2,-1022
   2a024:	20803f16 	blt	r4,r2,2a124 <__pack_d+0x1b4>
   2a028:	0080ffc4 	movi	r2,1023
   2a02c:	11002c16 	blt	r2,r4,2a0e0 <__pack_d+0x170>
   2a030:	00803fc4 	movi	r2,255
   2a034:	408c703a 	and	r6,r8,r2
   2a038:	00802004 	movi	r2,128
   2a03c:	0007883a 	mov	r3,zero
   2a040:	000f883a 	mov	r7,zero
   2a044:	2280ffc4 	addi	r10,r4,1023
   2a048:	30801e26 	beq	r6,r2,2a0c4 <__pack_d+0x154>
   2a04c:	00801fc4 	movi	r2,127
   2a050:	4089883a 	add	r4,r8,r2
   2a054:	220d803a 	cmpltu	r6,r4,r8
   2a058:	324d883a 	add	r6,r6,r9
   2a05c:	2011883a 	mov	r8,r4
   2a060:	3013883a 	mov	r9,r6
   2a064:	00880034 	movhi	r2,8192
   2a068:	10bfffc4 	addi	r2,r2,-1
   2a06c:	12400d36 	bltu	r2,r9,2a0a4 <__pack_d+0x134>
   2a070:	4804963a 	slli	r2,r9,24
   2a074:	400cd23a 	srli	r6,r8,8
   2a078:	480ed23a 	srli	r7,r9,8
   2a07c:	013fffc4 	movi	r4,-1
   2a080:	118cb03a 	or	r6,r2,r6
   2a084:	01400434 	movhi	r5,16
   2a088:	297fffc4 	addi	r5,r5,-1
   2a08c:	3104703a 	and	r2,r6,r4
   2a090:	3946703a 	and	r3,r7,r5
   2a094:	5201ffcc 	andi	r8,r10,2047
   2a098:	100d883a 	mov	r6,r2
   2a09c:	180f883a 	mov	r7,r3
   2a0a0:	003fc706 	br	29fc0 <__pack_d+0x50>
   2a0a4:	480897fa 	slli	r4,r9,31
   2a0a8:	4004d07a 	srli	r2,r8,1
   2a0ac:	4806d07a 	srli	r3,r9,1
   2a0b0:	52800044 	addi	r10,r10,1
   2a0b4:	2084b03a 	or	r2,r4,r2
   2a0b8:	1011883a 	mov	r8,r2
   2a0bc:	1813883a 	mov	r9,r3
   2a0c0:	003feb06 	br	2a070 <__pack_d+0x100>
   2a0c4:	383fe11e 	bne	r7,zero,2a04c <__pack_d+0xdc>
   2a0c8:	01004004 	movi	r4,256
   2a0cc:	4104703a 	and	r2,r8,r4
   2a0d0:	10c4b03a 	or	r2,r2,r3
   2a0d4:	103fe326 	beq	r2,zero,2a064 <__pack_d+0xf4>
   2a0d8:	3005883a 	mov	r2,r6
   2a0dc:	003fdc06 	br	2a050 <__pack_d+0xe0>
   2a0e0:	000d883a 	mov	r6,zero
   2a0e4:	000f883a 	mov	r7,zero
   2a0e8:	0201ffc4 	movi	r8,2047
   2a0ec:	003fb406 	br	29fc0 <__pack_d+0x50>
   2a0f0:	0005883a 	mov	r2,zero
   2a0f4:	00c00234 	movhi	r3,8
   2a0f8:	408cb03a 	or	r6,r8,r2
   2a0fc:	48ceb03a 	or	r7,r9,r3
   2a100:	013fffc4 	movi	r4,-1
   2a104:	01400434 	movhi	r5,16
   2a108:	297fffc4 	addi	r5,r5,-1
   2a10c:	3104703a 	and	r2,r6,r4
   2a110:	3946703a 	and	r3,r7,r5
   2a114:	100d883a 	mov	r6,r2
   2a118:	180f883a 	mov	r7,r3
   2a11c:	0201ffc4 	movi	r8,2047
   2a120:	003fa706 	br	29fc0 <__pack_d+0x50>
   2a124:	1109c83a 	sub	r4,r2,r4
   2a128:	00800e04 	movi	r2,56
   2a12c:	11004316 	blt	r2,r4,2a23c <__pack_d+0x2cc>
   2a130:	21fff804 	addi	r7,r4,-32
   2a134:	38004516 	blt	r7,zero,2a24c <__pack_d+0x2dc>
   2a138:	49d8d83a 	srl	r12,r9,r7
   2a13c:	001b883a 	mov	r13,zero
   2a140:	0023883a 	mov	r17,zero
   2a144:	01400044 	movi	r5,1
   2a148:	0025883a 	mov	r18,zero
   2a14c:	38004716 	blt	r7,zero,2a26c <__pack_d+0x2fc>
   2a150:	29d6983a 	sll	r11,r5,r7
   2a154:	0015883a 	mov	r10,zero
   2a158:	00bfffc4 	movi	r2,-1
   2a15c:	5089883a 	add	r4,r10,r2
   2a160:	588b883a 	add	r5,r11,r2
   2a164:	228d803a 	cmpltu	r6,r4,r10
   2a168:	314b883a 	add	r5,r6,r5
   2a16c:	4104703a 	and	r2,r8,r4
   2a170:	4946703a 	and	r3,r9,r5
   2a174:	10c4b03a 	or	r2,r2,r3
   2a178:	10000226 	beq	r2,zero,2a184 <__pack_d+0x214>
   2a17c:	04400044 	movi	r17,1
   2a180:	0025883a 	mov	r18,zero
   2a184:	00803fc4 	movi	r2,255
   2a188:	644eb03a 	or	r7,r12,r17
   2a18c:	3892703a 	and	r9,r7,r2
   2a190:	00802004 	movi	r2,128
   2a194:	6c90b03a 	or	r8,r13,r18
   2a198:	0015883a 	mov	r10,zero
   2a19c:	48801626 	beq	r9,r2,2a1f8 <__pack_d+0x288>
   2a1a0:	01001fc4 	movi	r4,127
   2a1a4:	3905883a 	add	r2,r7,r4
   2a1a8:	11cd803a 	cmpltu	r6,r2,r7
   2a1ac:	320d883a 	add	r6,r6,r8
   2a1b0:	100f883a 	mov	r7,r2
   2a1b4:	00840034 	movhi	r2,4096
   2a1b8:	10bfffc4 	addi	r2,r2,-1
   2a1bc:	3011883a 	mov	r8,r6
   2a1c0:	0007883a 	mov	r3,zero
   2a1c4:	11801b36 	bltu	r2,r6,2a234 <__pack_d+0x2c4>
   2a1c8:	4004963a 	slli	r2,r8,24
   2a1cc:	3808d23a 	srli	r4,r7,8
   2a1d0:	400ad23a 	srli	r5,r8,8
   2a1d4:	1813883a 	mov	r9,r3
   2a1d8:	1108b03a 	or	r4,r2,r4
   2a1dc:	00bfffc4 	movi	r2,-1
   2a1e0:	00c00434 	movhi	r3,16
   2a1e4:	18ffffc4 	addi	r3,r3,-1
   2a1e8:	208c703a 	and	r6,r4,r2
   2a1ec:	28ce703a 	and	r7,r5,r3
   2a1f0:	4a01ffcc 	andi	r8,r9,2047
   2a1f4:	003f7206 	br	29fc0 <__pack_d+0x50>
   2a1f8:	503fe91e 	bne	r10,zero,2a1a0 <__pack_d+0x230>
   2a1fc:	01004004 	movi	r4,256
   2a200:	3904703a 	and	r2,r7,r4
   2a204:	0007883a 	mov	r3,zero
   2a208:	10c4b03a 	or	r2,r2,r3
   2a20c:	10000626 	beq	r2,zero,2a228 <__pack_d+0x2b8>
   2a210:	3a45883a 	add	r2,r7,r9
   2a214:	11cd803a 	cmpltu	r6,r2,r7
   2a218:	320d883a 	add	r6,r6,r8
   2a21c:	100f883a 	mov	r7,r2
   2a220:	3011883a 	mov	r8,r6
   2a224:	0007883a 	mov	r3,zero
   2a228:	00840034 	movhi	r2,4096
   2a22c:	10bfffc4 	addi	r2,r2,-1
   2a230:	123fe52e 	bgeu	r2,r8,2a1c8 <__pack_d+0x258>
   2a234:	00c00044 	movi	r3,1
   2a238:	003fe306 	br	2a1c8 <__pack_d+0x258>
   2a23c:	0009883a 	mov	r4,zero
   2a240:	0013883a 	mov	r9,zero
   2a244:	000b883a 	mov	r5,zero
   2a248:	003fe406 	br	2a1dc <__pack_d+0x26c>
   2a24c:	4a47883a 	add	r3,r9,r9
   2a250:	008007c4 	movi	r2,31
   2a254:	1105c83a 	sub	r2,r2,r4
   2a258:	1886983a 	sll	r3,r3,r2
   2a25c:	4118d83a 	srl	r12,r8,r4
   2a260:	491ad83a 	srl	r13,r9,r4
   2a264:	1b18b03a 	or	r12,r3,r12
   2a268:	003fb506 	br	2a140 <__pack_d+0x1d0>
   2a26c:	2806d07a 	srli	r3,r5,1
   2a270:	008007c4 	movi	r2,31
   2a274:	1105c83a 	sub	r2,r2,r4
   2a278:	1896d83a 	srl	r11,r3,r2
   2a27c:	2914983a 	sll	r10,r5,r4
   2a280:	003fb506 	br	2a158 <__pack_d+0x1e8>

0002a284 <__unpack_d>:
   2a284:	20c00117 	ldw	r3,4(r4)
   2a288:	22400017 	ldw	r9,0(r4)
   2a28c:	00800434 	movhi	r2,16
   2a290:	10bfffc4 	addi	r2,r2,-1
   2a294:	1808d53a 	srli	r4,r3,20
   2a298:	180cd7fa 	srli	r6,r3,31
   2a29c:	1894703a 	and	r10,r3,r2
   2a2a0:	2201ffcc 	andi	r8,r4,2047
   2a2a4:	281b883a 	mov	r13,r5
   2a2a8:	4817883a 	mov	r11,r9
   2a2ac:	29800115 	stw	r6,4(r5)
   2a2b0:	5019883a 	mov	r12,r10
   2a2b4:	40001e1e 	bne	r8,zero,2a330 <__unpack_d+0xac>
   2a2b8:	4a84b03a 	or	r2,r9,r10
   2a2bc:	10001926 	beq	r2,zero,2a324 <__unpack_d+0xa0>
   2a2c0:	4804d63a 	srli	r2,r9,24
   2a2c4:	500c923a 	slli	r6,r10,8
   2a2c8:	013f0084 	movi	r4,-1022
   2a2cc:	00c40034 	movhi	r3,4096
   2a2d0:	18ffffc4 	addi	r3,r3,-1
   2a2d4:	118cb03a 	or	r6,r2,r6
   2a2d8:	008000c4 	movi	r2,3
   2a2dc:	480a923a 	slli	r5,r9,8
   2a2e0:	68800015 	stw	r2,0(r13)
   2a2e4:	69000215 	stw	r4,8(r13)
   2a2e8:	19800b36 	bltu	r3,r6,2a318 <__unpack_d+0x94>
   2a2ec:	200f883a 	mov	r7,r4
   2a2f0:	1811883a 	mov	r8,r3
   2a2f4:	2945883a 	add	r2,r5,r5
   2a2f8:	1149803a 	cmpltu	r4,r2,r5
   2a2fc:	3187883a 	add	r3,r6,r6
   2a300:	20c9883a 	add	r4,r4,r3
   2a304:	100b883a 	mov	r5,r2
   2a308:	200d883a 	mov	r6,r4
   2a30c:	39ffffc4 	addi	r7,r7,-1
   2a310:	413ff82e 	bgeu	r8,r4,2a2f4 <__unpack_d+0x70>
   2a314:	69c00215 	stw	r7,8(r13)
   2a318:	69800415 	stw	r6,16(r13)
   2a31c:	69400315 	stw	r5,12(r13)
   2a320:	f800283a 	ret
   2a324:	00800084 	movi	r2,2
   2a328:	28800015 	stw	r2,0(r5)
   2a32c:	f800283a 	ret
   2a330:	0081ffc4 	movi	r2,2047
   2a334:	40800f26 	beq	r8,r2,2a374 <__unpack_d+0xf0>
   2a338:	480cd63a 	srli	r6,r9,24
   2a33c:	5006923a 	slli	r3,r10,8
   2a340:	4804923a 	slli	r2,r9,8
   2a344:	0009883a 	mov	r4,zero
   2a348:	30c6b03a 	or	r3,r6,r3
   2a34c:	01440034 	movhi	r5,4096
   2a350:	110cb03a 	or	r6,r2,r4
   2a354:	423f0044 	addi	r8,r8,-1023
   2a358:	194eb03a 	or	r7,r3,r5
   2a35c:	008000c4 	movi	r2,3
   2a360:	69c00415 	stw	r7,16(r13)
   2a364:	6a000215 	stw	r8,8(r13)
   2a368:	68800015 	stw	r2,0(r13)
   2a36c:	69800315 	stw	r6,12(r13)
   2a370:	f800283a 	ret
   2a374:	4a84b03a 	or	r2,r9,r10
   2a378:	1000031e 	bne	r2,zero,2a388 <__unpack_d+0x104>
   2a37c:	00800104 	movi	r2,4
   2a380:	28800015 	stw	r2,0(r5)
   2a384:	f800283a 	ret
   2a388:	0009883a 	mov	r4,zero
   2a38c:	01400234 	movhi	r5,8
   2a390:	4904703a 	and	r2,r9,r4
   2a394:	5146703a 	and	r3,r10,r5
   2a398:	10c4b03a 	or	r2,r2,r3
   2a39c:	10000526 	beq	r2,zero,2a3b4 <__unpack_d+0x130>
   2a3a0:	00800044 	movi	r2,1
   2a3a4:	68800015 	stw	r2,0(r13)
   2a3a8:	6b000415 	stw	r12,16(r13)
   2a3ac:	6ac00315 	stw	r11,12(r13)
   2a3b0:	f800283a 	ret
   2a3b4:	68000015 	stw	zero,0(r13)
   2a3b8:	003ffb06 	br	2a3a8 <__unpack_d+0x124>

0002a3bc <__fpcmp_parts_d>:
   2a3bc:	21800017 	ldw	r6,0(r4)
   2a3c0:	00c00044 	movi	r3,1
   2a3c4:	19800a2e 	bgeu	r3,r6,2a3f0 <__fpcmp_parts_d+0x34>
   2a3c8:	28800017 	ldw	r2,0(r5)
   2a3cc:	1880082e 	bgeu	r3,r2,2a3f0 <__fpcmp_parts_d+0x34>
   2a3d0:	00c00104 	movi	r3,4
   2a3d4:	30c02626 	beq	r6,r3,2a470 <__fpcmp_parts_d+0xb4>
   2a3d8:	10c02226 	beq	r2,r3,2a464 <__fpcmp_parts_d+0xa8>
   2a3dc:	00c00084 	movi	r3,2
   2a3e0:	30c00526 	beq	r6,r3,2a3f8 <__fpcmp_parts_d+0x3c>
   2a3e4:	10c0071e 	bne	r2,r3,2a404 <__fpcmp_parts_d+0x48>
   2a3e8:	20800117 	ldw	r2,4(r4)
   2a3ec:	1000091e 	bne	r2,zero,2a414 <__fpcmp_parts_d+0x58>
   2a3f0:	00800044 	movi	r2,1
   2a3f4:	f800283a 	ret
   2a3f8:	10c01a1e 	bne	r2,r3,2a464 <__fpcmp_parts_d+0xa8>
   2a3fc:	0005883a 	mov	r2,zero
   2a400:	f800283a 	ret
   2a404:	22000117 	ldw	r8,4(r4)
   2a408:	28800117 	ldw	r2,4(r5)
   2a40c:	40800326 	beq	r8,r2,2a41c <__fpcmp_parts_d+0x60>
   2a410:	403ff726 	beq	r8,zero,2a3f0 <__fpcmp_parts_d+0x34>
   2a414:	00bfffc4 	movi	r2,-1
   2a418:	f800283a 	ret
   2a41c:	20c00217 	ldw	r3,8(r4)
   2a420:	28800217 	ldw	r2,8(r5)
   2a424:	10fffa16 	blt	r2,r3,2a410 <__fpcmp_parts_d+0x54>
   2a428:	18800916 	blt	r3,r2,2a450 <__fpcmp_parts_d+0x94>
   2a42c:	21c00417 	ldw	r7,16(r4)
   2a430:	28c00417 	ldw	r3,16(r5)
   2a434:	21800317 	ldw	r6,12(r4)
   2a438:	28800317 	ldw	r2,12(r5)
   2a43c:	19fff436 	bltu	r3,r7,2a410 <__fpcmp_parts_d+0x54>
   2a440:	38c00526 	beq	r7,r3,2a458 <__fpcmp_parts_d+0x9c>
   2a444:	38c00236 	bltu	r7,r3,2a450 <__fpcmp_parts_d+0x94>
   2a448:	19ffec1e 	bne	r3,r7,2a3fc <__fpcmp_parts_d+0x40>
   2a44c:	30bfeb2e 	bgeu	r6,r2,2a3fc <__fpcmp_parts_d+0x40>
   2a450:	403fe71e 	bne	r8,zero,2a3f0 <__fpcmp_parts_d+0x34>
   2a454:	003fef06 	br	2a414 <__fpcmp_parts_d+0x58>
   2a458:	11bffa2e 	bgeu	r2,r6,2a444 <__fpcmp_parts_d+0x88>
   2a45c:	403fe426 	beq	r8,zero,2a3f0 <__fpcmp_parts_d+0x34>
   2a460:	003fec06 	br	2a414 <__fpcmp_parts_d+0x58>
   2a464:	28800117 	ldw	r2,4(r5)
   2a468:	103fe11e 	bne	r2,zero,2a3f0 <__fpcmp_parts_d+0x34>
   2a46c:	003fe906 	br	2a414 <__fpcmp_parts_d+0x58>
   2a470:	11bfdd1e 	bne	r2,r6,2a3e8 <__fpcmp_parts_d+0x2c>
   2a474:	28c00117 	ldw	r3,4(r5)
   2a478:	20800117 	ldw	r2,4(r4)
   2a47c:	1885c83a 	sub	r2,r3,r2
   2a480:	f800283a 	ret

0002a484 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2a484:	defff804 	addi	sp,sp,-32
   2a488:	dfc00715 	stw	ra,28(sp)
   2a48c:	df000615 	stw	fp,24(sp)
   2a490:	df000604 	addi	fp,sp,24
   2a494:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2a498:	e0bffc17 	ldw	r2,-16(fp)
   2a49c:	1004803a 	cmplt	r2,r2,zero
   2a4a0:	1000081e 	bne	r2,zero,2a4c4 <close+0x40>
   2a4a4:	e0bffc17 	ldw	r2,-16(fp)
   2a4a8:	10800324 	muli	r2,r2,12
   2a4ac:	1007883a 	mov	r3,r2
   2a4b0:	008000f4 	movhi	r2,3
   2a4b4:	10be3c04 	addi	r2,r2,-1808
   2a4b8:	1887883a 	add	r3,r3,r2
   2a4bc:	e0ffff15 	stw	r3,-4(fp)
   2a4c0:	00000106 	br	2a4c8 <close+0x44>
   2a4c4:	e03fff15 	stw	zero,-4(fp)
   2a4c8:	e0bfff17 	ldw	r2,-4(fp)
   2a4cc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   2a4d0:	e0bffb17 	ldw	r2,-20(fp)
   2a4d4:	1005003a 	cmpeq	r2,r2,zero
   2a4d8:	10001d1e 	bne	r2,zero,2a550 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2a4dc:	e0bffb17 	ldw	r2,-20(fp)
   2a4e0:	10800017 	ldw	r2,0(r2)
   2a4e4:	10800417 	ldw	r2,16(r2)
   2a4e8:	1005003a 	cmpeq	r2,r2,zero
   2a4ec:	1000071e 	bne	r2,zero,2a50c <close+0x88>
   2a4f0:	e0bffb17 	ldw	r2,-20(fp)
   2a4f4:	10800017 	ldw	r2,0(r2)
   2a4f8:	10800417 	ldw	r2,16(r2)
   2a4fc:	e13ffb17 	ldw	r4,-20(fp)
   2a500:	103ee83a 	callr	r2
   2a504:	e0bffe15 	stw	r2,-8(fp)
   2a508:	00000106 	br	2a510 <close+0x8c>
   2a50c:	e03ffe15 	stw	zero,-8(fp)
   2a510:	e0bffe17 	ldw	r2,-8(fp)
   2a514:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2a518:	e13ffc17 	ldw	r4,-16(fp)
   2a51c:	002af8c0 	call	2af8c <alt_release_fd>
    if (rval < 0)
   2a520:	e0bffa17 	ldw	r2,-24(fp)
   2a524:	1004403a 	cmpge	r2,r2,zero
   2a528:	1000071e 	bne	r2,zero,2a548 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   2a52c:	002a5800 	call	2a580 <alt_get_errno>
   2a530:	e0fffa17 	ldw	r3,-24(fp)
   2a534:	00c7c83a 	sub	r3,zero,r3
   2a538:	10c00015 	stw	r3,0(r2)
      return -1;
   2a53c:	00bfffc4 	movi	r2,-1
   2a540:	e0bffd15 	stw	r2,-12(fp)
   2a544:	00000806 	br	2a568 <close+0xe4>
    }
    return 0;
   2a548:	e03ffd15 	stw	zero,-12(fp)
   2a54c:	00000606 	br	2a568 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a550:	002a5800 	call	2a580 <alt_get_errno>
   2a554:	1007883a 	mov	r3,r2
   2a558:	00801444 	movi	r2,81
   2a55c:	18800015 	stw	r2,0(r3)
    return -1;
   2a560:	00bfffc4 	movi	r2,-1
   2a564:	e0bffd15 	stw	r2,-12(fp)
   2a568:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   2a56c:	e037883a 	mov	sp,fp
   2a570:	dfc00117 	ldw	ra,4(sp)
   2a574:	df000017 	ldw	fp,0(sp)
   2a578:	dec00204 	addi	sp,sp,8
   2a57c:	f800283a 	ret

0002a580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a580:	defffd04 	addi	sp,sp,-12
   2a584:	dfc00215 	stw	ra,8(sp)
   2a588:	df000115 	stw	fp,4(sp)
   2a58c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2a590:	008000f4 	movhi	r2,3
   2a594:	10833804 	addi	r2,r2,3296
   2a598:	10800017 	ldw	r2,0(r2)
   2a59c:	1005003a 	cmpeq	r2,r2,zero
   2a5a0:	1000061e 	bne	r2,zero,2a5bc <alt_get_errno+0x3c>
   2a5a4:	008000f4 	movhi	r2,3
   2a5a8:	10833804 	addi	r2,r2,3296
   2a5ac:	10800017 	ldw	r2,0(r2)
   2a5b0:	103ee83a 	callr	r2
   2a5b4:	e0bfff15 	stw	r2,-4(fp)
   2a5b8:	00000306 	br	2a5c8 <alt_get_errno+0x48>
   2a5bc:	008000f4 	movhi	r2,3
   2a5c0:	108a5104 	addi	r2,r2,10564
   2a5c4:	e0bfff15 	stw	r2,-4(fp)
   2a5c8:	e0bfff17 	ldw	r2,-4(fp)
}
   2a5cc:	e037883a 	mov	sp,fp
   2a5d0:	dfc00117 	ldw	ra,4(sp)
   2a5d4:	df000017 	ldw	fp,0(sp)
   2a5d8:	dec00204 	addi	sp,sp,8
   2a5dc:	f800283a 	ret

0002a5e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2a5e0:	defffc04 	addi	sp,sp,-16
   2a5e4:	df000315 	stw	fp,12(sp)
   2a5e8:	df000304 	addi	fp,sp,12
   2a5ec:	e13ffd15 	stw	r4,-12(fp)
   2a5f0:	e17ffe15 	stw	r5,-8(fp)
   2a5f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2a5f8:	e0bfff17 	ldw	r2,-4(fp)
}
   2a5fc:	e037883a 	mov	sp,fp
   2a600:	df000017 	ldw	fp,0(sp)
   2a604:	dec00104 	addi	sp,sp,4
   2a608:	f800283a 	ret

0002a60c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2a60c:	defff904 	addi	sp,sp,-28
   2a610:	dfc00615 	stw	ra,24(sp)
   2a614:	df000515 	stw	fp,20(sp)
   2a618:	df000504 	addi	fp,sp,20
   2a61c:	e13ffc15 	stw	r4,-16(fp)
   2a620:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a624:	e0bffc17 	ldw	r2,-16(fp)
   2a628:	1004803a 	cmplt	r2,r2,zero
   2a62c:	1000081e 	bne	r2,zero,2a650 <fstat+0x44>
   2a630:	e0bffc17 	ldw	r2,-16(fp)
   2a634:	10800324 	muli	r2,r2,12
   2a638:	1007883a 	mov	r3,r2
   2a63c:	008000f4 	movhi	r2,3
   2a640:	10be3c04 	addi	r2,r2,-1808
   2a644:	1887883a 	add	r3,r3,r2
   2a648:	e0ffff15 	stw	r3,-4(fp)
   2a64c:	00000106 	br	2a654 <fstat+0x48>
   2a650:	e03fff15 	stw	zero,-4(fp)
   2a654:	e0bfff17 	ldw	r2,-4(fp)
   2a658:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2a65c:	e0bffb17 	ldw	r2,-20(fp)
   2a660:	1005003a 	cmpeq	r2,r2,zero
   2a664:	1000121e 	bne	r2,zero,2a6b0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2a668:	e0bffb17 	ldw	r2,-20(fp)
   2a66c:	10800017 	ldw	r2,0(r2)
   2a670:	10800817 	ldw	r2,32(r2)
   2a674:	1005003a 	cmpeq	r2,r2,zero
   2a678:	1000081e 	bne	r2,zero,2a69c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   2a67c:	e0bffb17 	ldw	r2,-20(fp)
   2a680:	10800017 	ldw	r2,0(r2)
   2a684:	10800817 	ldw	r2,32(r2)
   2a688:	e13ffb17 	ldw	r4,-20(fp)
   2a68c:	e17ffd17 	ldw	r5,-12(fp)
   2a690:	103ee83a 	callr	r2
   2a694:	e0bffe15 	stw	r2,-8(fp)
   2a698:	00000b06 	br	2a6c8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2a69c:	e0fffd17 	ldw	r3,-12(fp)
   2a6a0:	00880004 	movi	r2,8192
   2a6a4:	18800115 	stw	r2,4(r3)
      return 0;
   2a6a8:	e03ffe15 	stw	zero,-8(fp)
   2a6ac:	00000606 	br	2a6c8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a6b0:	002a6e00 	call	2a6e0 <alt_get_errno>
   2a6b4:	1007883a 	mov	r3,r2
   2a6b8:	00801444 	movi	r2,81
   2a6bc:	18800015 	stw	r2,0(r3)
    return -1;
   2a6c0:	00bfffc4 	movi	r2,-1
   2a6c4:	e0bffe15 	stw	r2,-8(fp)
   2a6c8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   2a6cc:	e037883a 	mov	sp,fp
   2a6d0:	dfc00117 	ldw	ra,4(sp)
   2a6d4:	df000017 	ldw	fp,0(sp)
   2a6d8:	dec00204 	addi	sp,sp,8
   2a6dc:	f800283a 	ret

0002a6e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a6e0:	defffd04 	addi	sp,sp,-12
   2a6e4:	dfc00215 	stw	ra,8(sp)
   2a6e8:	df000115 	stw	fp,4(sp)
   2a6ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2a6f0:	008000f4 	movhi	r2,3
   2a6f4:	10833804 	addi	r2,r2,3296
   2a6f8:	10800017 	ldw	r2,0(r2)
   2a6fc:	1005003a 	cmpeq	r2,r2,zero
   2a700:	1000061e 	bne	r2,zero,2a71c <alt_get_errno+0x3c>
   2a704:	008000f4 	movhi	r2,3
   2a708:	10833804 	addi	r2,r2,3296
   2a70c:	10800017 	ldw	r2,0(r2)
   2a710:	103ee83a 	callr	r2
   2a714:	e0bfff15 	stw	r2,-4(fp)
   2a718:	00000306 	br	2a728 <alt_get_errno+0x48>
   2a71c:	008000f4 	movhi	r2,3
   2a720:	108a5104 	addi	r2,r2,10564
   2a724:	e0bfff15 	stw	r2,-4(fp)
   2a728:	e0bfff17 	ldw	r2,-4(fp)
}
   2a72c:	e037883a 	mov	sp,fp
   2a730:	dfc00117 	ldw	ra,4(sp)
   2a734:	df000017 	ldw	fp,0(sp)
   2a738:	dec00204 	addi	sp,sp,8
   2a73c:	f800283a 	ret

0002a740 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2a740:	deffeb04 	addi	sp,sp,-84
   2a744:	dfc01415 	stw	ra,80(sp)
   2a748:	df001315 	stw	fp,76(sp)
   2a74c:	df001304 	addi	fp,sp,76
   2a750:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a754:	e0bffd17 	ldw	r2,-12(fp)
   2a758:	1004803a 	cmplt	r2,r2,zero
   2a75c:	1000081e 	bne	r2,zero,2a780 <isatty+0x40>
   2a760:	e0bffd17 	ldw	r2,-12(fp)
   2a764:	10800324 	muli	r2,r2,12
   2a768:	1007883a 	mov	r3,r2
   2a76c:	008000f4 	movhi	r2,3
   2a770:	10be3c04 	addi	r2,r2,-1808
   2a774:	1887883a 	add	r3,r3,r2
   2a778:	e0ffff15 	stw	r3,-4(fp)
   2a77c:	00000106 	br	2a784 <isatty+0x44>
   2a780:	e03fff15 	stw	zero,-4(fp)
   2a784:	e0bfff17 	ldw	r2,-4(fp)
   2a788:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   2a78c:	e0bfed17 	ldw	r2,-76(fp)
   2a790:	1005003a 	cmpeq	r2,r2,zero
   2a794:	10000f1e 	bne	r2,zero,2a7d4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2a798:	e0bfed17 	ldw	r2,-76(fp)
   2a79c:	10800017 	ldw	r2,0(r2)
   2a7a0:	10800817 	ldw	r2,32(r2)
   2a7a4:	1004c03a 	cmpne	r2,r2,zero
   2a7a8:	1000031e 	bne	r2,zero,2a7b8 <isatty+0x78>
    {
      return 1;
   2a7ac:	00800044 	movi	r2,1
   2a7b0:	e0bffe15 	stw	r2,-8(fp)
   2a7b4:	00000c06 	br	2a7e8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2a7b8:	e17fee04 	addi	r5,fp,-72
   2a7bc:	e13ffd17 	ldw	r4,-12(fp)
   2a7c0:	002a60c0 	call	2a60c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2a7c4:	e0bfef17 	ldw	r2,-68(fp)
   2a7c8:	10880020 	cmpeqi	r2,r2,8192
   2a7cc:	e0bffe15 	stw	r2,-8(fp)
   2a7d0:	00000506 	br	2a7e8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a7d4:	002a8000 	call	2a800 <alt_get_errno>
   2a7d8:	1007883a 	mov	r3,r2
   2a7dc:	00801444 	movi	r2,81
   2a7e0:	18800015 	stw	r2,0(r3)
    return 0;
   2a7e4:	e03ffe15 	stw	zero,-8(fp)
   2a7e8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   2a7ec:	e037883a 	mov	sp,fp
   2a7f0:	dfc00117 	ldw	ra,4(sp)
   2a7f4:	df000017 	ldw	fp,0(sp)
   2a7f8:	dec00204 	addi	sp,sp,8
   2a7fc:	f800283a 	ret

0002a800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a800:	defffd04 	addi	sp,sp,-12
   2a804:	dfc00215 	stw	ra,8(sp)
   2a808:	df000115 	stw	fp,4(sp)
   2a80c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2a810:	008000f4 	movhi	r2,3
   2a814:	10833804 	addi	r2,r2,3296
   2a818:	10800017 	ldw	r2,0(r2)
   2a81c:	1005003a 	cmpeq	r2,r2,zero
   2a820:	1000061e 	bne	r2,zero,2a83c <alt_get_errno+0x3c>
   2a824:	008000f4 	movhi	r2,3
   2a828:	10833804 	addi	r2,r2,3296
   2a82c:	10800017 	ldw	r2,0(r2)
   2a830:	103ee83a 	callr	r2
   2a834:	e0bfff15 	stw	r2,-4(fp)
   2a838:	00000306 	br	2a848 <alt_get_errno+0x48>
   2a83c:	008000f4 	movhi	r2,3
   2a840:	108a5104 	addi	r2,r2,10564
   2a844:	e0bfff15 	stw	r2,-4(fp)
   2a848:	e0bfff17 	ldw	r2,-4(fp)
}
   2a84c:	e037883a 	mov	sp,fp
   2a850:	dfc00117 	ldw	ra,4(sp)
   2a854:	df000017 	ldw	fp,0(sp)
   2a858:	dec00204 	addi	sp,sp,8
   2a85c:	f800283a 	ret

0002a860 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2a860:	defffe04 	addi	sp,sp,-8
   2a864:	dfc00115 	stw	ra,4(sp)
   2a868:	df000015 	stw	fp,0(sp)
   2a86c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2a870:	010000f4 	movhi	r4,3
   2a874:	21033f04 	addi	r4,r4,3324
   2a878:	014000f4 	movhi	r5,3
   2a87c:	297c2d04 	addi	r5,r5,-3916
   2a880:	018000f4 	movhi	r6,3
   2a884:	31833f04 	addi	r6,r6,3324
   2a888:	002a8e00 	call	2a8e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2a88c:	010000b4 	movhi	r4,2
   2a890:	21000804 	addi	r4,r4,32
   2a894:	014000b4 	movhi	r5,2
   2a898:	29400804 	addi	r5,r5,32
   2a89c:	018000b4 	movhi	r6,2
   2a8a0:	31806d04 	addi	r6,r6,436
   2a8a4:	002a8e00 	call	2a8e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2a8a8:	010000f4 	movhi	r4,3
   2a8ac:	213a8904 	addi	r4,r4,-5596
   2a8b0:	014000f4 	movhi	r5,3
   2a8b4:	297a8904 	addi	r5,r5,-5596
   2a8b8:	018000f4 	movhi	r6,3
   2a8bc:	31bc2d04 	addi	r6,r6,-3916
   2a8c0:	002a8e00 	call	2a8e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2a8c4:	002d9180 	call	2d918 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2a8c8:	002dda40 	call	2dda4 <alt_icache_flush_all>
}
   2a8cc:	e037883a 	mov	sp,fp
   2a8d0:	dfc00117 	ldw	ra,4(sp)
   2a8d4:	df000017 	ldw	fp,0(sp)
   2a8d8:	dec00204 	addi	sp,sp,8
   2a8dc:	f800283a 	ret

0002a8e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2a8e0:	defffc04 	addi	sp,sp,-16
   2a8e4:	df000315 	stw	fp,12(sp)
   2a8e8:	df000304 	addi	fp,sp,12
   2a8ec:	e13ffd15 	stw	r4,-12(fp)
   2a8f0:	e17ffe15 	stw	r5,-8(fp)
   2a8f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2a8f8:	e0fffe17 	ldw	r3,-8(fp)
   2a8fc:	e0bffd17 	ldw	r2,-12(fp)
   2a900:	18800e26 	beq	r3,r2,2a93c <alt_load_section+0x5c>
  {
    while( to != end )
   2a904:	00000a06 	br	2a930 <alt_load_section+0x50>
    {
      *to++ = *from++;
   2a908:	e0bffd17 	ldw	r2,-12(fp)
   2a90c:	10c00017 	ldw	r3,0(r2)
   2a910:	e0bffe17 	ldw	r2,-8(fp)
   2a914:	10c00015 	stw	r3,0(r2)
   2a918:	e0bffe17 	ldw	r2,-8(fp)
   2a91c:	10800104 	addi	r2,r2,4
   2a920:	e0bffe15 	stw	r2,-8(fp)
   2a924:	e0bffd17 	ldw	r2,-12(fp)
   2a928:	10800104 	addi	r2,r2,4
   2a92c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2a930:	e0fffe17 	ldw	r3,-8(fp)
   2a934:	e0bfff17 	ldw	r2,-4(fp)
   2a938:	18bff31e 	bne	r3,r2,2a908 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2a93c:	e037883a 	mov	sp,fp
   2a940:	df000017 	ldw	fp,0(sp)
   2a944:	dec00104 	addi	sp,sp,4
   2a948:	f800283a 	ret

0002a94c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2a94c:	defff804 	addi	sp,sp,-32
   2a950:	dfc00715 	stw	ra,28(sp)
   2a954:	df000615 	stw	fp,24(sp)
   2a958:	df000604 	addi	fp,sp,24
   2a95c:	e13ffc15 	stw	r4,-16(fp)
   2a960:	e17ffd15 	stw	r5,-12(fp)
   2a964:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2a968:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a96c:	e0bffc17 	ldw	r2,-16(fp)
   2a970:	1004803a 	cmplt	r2,r2,zero
   2a974:	1000081e 	bne	r2,zero,2a998 <lseek+0x4c>
   2a978:	e0bffc17 	ldw	r2,-16(fp)
   2a97c:	10800324 	muli	r2,r2,12
   2a980:	1007883a 	mov	r3,r2
   2a984:	008000f4 	movhi	r2,3
   2a988:	10be3c04 	addi	r2,r2,-1808
   2a98c:	1887883a 	add	r3,r3,r2
   2a990:	e0ffff15 	stw	r3,-4(fp)
   2a994:	00000106 	br	2a99c <lseek+0x50>
   2a998:	e03fff15 	stw	zero,-4(fp)
   2a99c:	e0bfff17 	ldw	r2,-4(fp)
   2a9a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   2a9a4:	e0bffb17 	ldw	r2,-20(fp)
   2a9a8:	1005003a 	cmpeq	r2,r2,zero
   2a9ac:	1000111e 	bne	r2,zero,2a9f4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2a9b0:	e0bffb17 	ldw	r2,-20(fp)
   2a9b4:	10800017 	ldw	r2,0(r2)
   2a9b8:	10800717 	ldw	r2,28(r2)
   2a9bc:	1005003a 	cmpeq	r2,r2,zero
   2a9c0:	1000091e 	bne	r2,zero,2a9e8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2a9c4:	e0bffb17 	ldw	r2,-20(fp)
   2a9c8:	10800017 	ldw	r2,0(r2)
   2a9cc:	10800717 	ldw	r2,28(r2)
   2a9d0:	e13ffb17 	ldw	r4,-20(fp)
   2a9d4:	e17ffd17 	ldw	r5,-12(fp)
   2a9d8:	e1bffe17 	ldw	r6,-8(fp)
   2a9dc:	103ee83a 	callr	r2
   2a9e0:	e0bffa15 	stw	r2,-24(fp)
   2a9e4:	00000506 	br	2a9fc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2a9e8:	00bfde84 	movi	r2,-134
   2a9ec:	e0bffa15 	stw	r2,-24(fp)
   2a9f0:	00000206 	br	2a9fc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2a9f4:	00bfebc4 	movi	r2,-81
   2a9f8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   2a9fc:	e0bffa17 	ldw	r2,-24(fp)
   2aa00:	1004403a 	cmpge	r2,r2,zero
   2aa04:	1000071e 	bne	r2,zero,2aa24 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   2aa08:	002aa3c0 	call	2aa3c <alt_get_errno>
   2aa0c:	1007883a 	mov	r3,r2
   2aa10:	e0bffa17 	ldw	r2,-24(fp)
   2aa14:	0085c83a 	sub	r2,zero,r2
   2aa18:	18800015 	stw	r2,0(r3)
    rc = -1;
   2aa1c:	00bfffc4 	movi	r2,-1
   2aa20:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   2aa24:	e0bffa17 	ldw	r2,-24(fp)
}
   2aa28:	e037883a 	mov	sp,fp
   2aa2c:	dfc00117 	ldw	ra,4(sp)
   2aa30:	df000017 	ldw	fp,0(sp)
   2aa34:	dec00204 	addi	sp,sp,8
   2aa38:	f800283a 	ret

0002aa3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2aa3c:	defffd04 	addi	sp,sp,-12
   2aa40:	dfc00215 	stw	ra,8(sp)
   2aa44:	df000115 	stw	fp,4(sp)
   2aa48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2aa4c:	008000f4 	movhi	r2,3
   2aa50:	10833804 	addi	r2,r2,3296
   2aa54:	10800017 	ldw	r2,0(r2)
   2aa58:	1005003a 	cmpeq	r2,r2,zero
   2aa5c:	1000061e 	bne	r2,zero,2aa78 <alt_get_errno+0x3c>
   2aa60:	008000f4 	movhi	r2,3
   2aa64:	10833804 	addi	r2,r2,3296
   2aa68:	10800017 	ldw	r2,0(r2)
   2aa6c:	103ee83a 	callr	r2
   2aa70:	e0bfff15 	stw	r2,-4(fp)
   2aa74:	00000306 	br	2aa84 <alt_get_errno+0x48>
   2aa78:	008000f4 	movhi	r2,3
   2aa7c:	108a5104 	addi	r2,r2,10564
   2aa80:	e0bfff15 	stw	r2,-4(fp)
   2aa84:	e0bfff17 	ldw	r2,-4(fp)
}
   2aa88:	e037883a 	mov	sp,fp
   2aa8c:	dfc00117 	ldw	ra,4(sp)
   2aa90:	df000017 	ldw	fp,0(sp)
   2aa94:	dec00204 	addi	sp,sp,8
   2aa98:	f800283a 	ret

0002aa9c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2aa9c:	defffd04 	addi	sp,sp,-12
   2aaa0:	dfc00215 	stw	ra,8(sp)
   2aaa4:	df000115 	stw	fp,4(sp)
   2aaa8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2aaac:	0009883a 	mov	r4,zero
   2aab0:	002b2280 	call	2b228 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2aab4:	002b25c0 	call	2b25c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2aab8:	010000f4 	movhi	r4,3
   2aabc:	213b7e04 	addi	r4,r4,-4616
   2aac0:	014000f4 	movhi	r5,3
   2aac4:	297b7e04 	addi	r5,r5,-4616
   2aac8:	018000f4 	movhi	r6,3
   2aacc:	31bb7e04 	addi	r6,r6,-4616
   2aad0:	002e1640 	call	2e164 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2aad4:	002da700 	call	2da70 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2aad8:	010000f4 	movhi	r4,3
   2aadc:	2136b504 	addi	r4,r4,-9516
   2aae0:	002e5ac0 	call	2e5ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2aae4:	d1272b17 	ldw	r4,-25428(gp)
   2aae8:	d1672c17 	ldw	r5,-25424(gp)
   2aaec:	d1a72d17 	ldw	r6,-25420(gp)
   2aaf0:	00202000 	call	20200 <main>
   2aaf4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2aaf8:	01000044 	movi	r4,1
   2aafc:	002a4840 	call	2a484 <close>
  exit (result);
   2ab00:	e13fff17 	ldw	r4,-4(fp)
   2ab04:	002e5c00 	call	2e5c0 <exit>

0002ab08 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2ab08:	defffe04 	addi	sp,sp,-8
   2ab0c:	df000115 	stw	fp,4(sp)
   2ab10:	df000104 	addi	fp,sp,4
   2ab14:	e13fff15 	stw	r4,-4(fp)
}
   2ab18:	e037883a 	mov	sp,fp
   2ab1c:	df000017 	ldw	fp,0(sp)
   2ab20:	dec00104 	addi	sp,sp,4
   2ab24:	f800283a 	ret

0002ab28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2ab28:	defffe04 	addi	sp,sp,-8
   2ab2c:	df000115 	stw	fp,4(sp)
   2ab30:	df000104 	addi	fp,sp,4
   2ab34:	e13fff15 	stw	r4,-4(fp)
}
   2ab38:	e037883a 	mov	sp,fp
   2ab3c:	df000017 	ldw	fp,0(sp)
   2ab40:	dec00104 	addi	sp,sp,4
   2ab44:	f800283a 	ret

0002ab48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2ab48:	defffc04 	addi	sp,sp,-16
   2ab4c:	df000315 	stw	fp,12(sp)
   2ab50:	df000304 	addi	fp,sp,12
   2ab54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2ab58:	e0bffe17 	ldw	r2,-8(fp)
   2ab5c:	10800217 	ldw	r2,8(r2)
   2ab60:	10d00034 	orhi	r3,r2,16384
   2ab64:	e0bffe17 	ldw	r2,-8(fp)
   2ab68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2ab6c:	e03ffd15 	stw	zero,-12(fp)
   2ab70:	00002006 	br	2abf4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2ab74:	e0bffd17 	ldw	r2,-12(fp)
   2ab78:	00c000f4 	movhi	r3,3
   2ab7c:	18fe3c04 	addi	r3,r3,-1808
   2ab80:	10800324 	muli	r2,r2,12
   2ab84:	10c5883a 	add	r2,r2,r3
   2ab88:	10c00017 	ldw	r3,0(r2)
   2ab8c:	e0bffe17 	ldw	r2,-8(fp)
   2ab90:	10800017 	ldw	r2,0(r2)
   2ab94:	1880141e 	bne	r3,r2,2abe8 <alt_file_locked+0xa0>
   2ab98:	e0bffd17 	ldw	r2,-12(fp)
   2ab9c:	00c000f4 	movhi	r3,3
   2aba0:	18fe3c04 	addi	r3,r3,-1808
   2aba4:	10800324 	muli	r2,r2,12
   2aba8:	10c5883a 	add	r2,r2,r3
   2abac:	10800204 	addi	r2,r2,8
   2abb0:	10800017 	ldw	r2,0(r2)
   2abb4:	1004403a 	cmpge	r2,r2,zero
   2abb8:	10000b1e 	bne	r2,zero,2abe8 <alt_file_locked+0xa0>
   2abbc:	e0bffd17 	ldw	r2,-12(fp)
   2abc0:	10800324 	muli	r2,r2,12
   2abc4:	1007883a 	mov	r3,r2
   2abc8:	008000f4 	movhi	r2,3
   2abcc:	10be3c04 	addi	r2,r2,-1808
   2abd0:	1887883a 	add	r3,r3,r2
   2abd4:	e0bffe17 	ldw	r2,-8(fp)
   2abd8:	18800326 	beq	r3,r2,2abe8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2abdc:	00bffcc4 	movi	r2,-13
   2abe0:	e0bfff15 	stw	r2,-4(fp)
   2abe4:	00000a06 	br	2ac10 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2abe8:	e0bffd17 	ldw	r2,-12(fp)
   2abec:	10800044 	addi	r2,r2,1
   2abf0:	e0bffd15 	stw	r2,-12(fp)
   2abf4:	008000f4 	movhi	r2,3
   2abf8:	10833704 	addi	r2,r2,3292
   2abfc:	10800017 	ldw	r2,0(r2)
   2ac00:	1007883a 	mov	r3,r2
   2ac04:	e0bffd17 	ldw	r2,-12(fp)
   2ac08:	18bfda2e 	bgeu	r3,r2,2ab74 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2ac0c:	e03fff15 	stw	zero,-4(fp)
   2ac10:	e0bfff17 	ldw	r2,-4(fp)
}
   2ac14:	e037883a 	mov	sp,fp
   2ac18:	df000017 	ldw	fp,0(sp)
   2ac1c:	dec00104 	addi	sp,sp,4
   2ac20:	f800283a 	ret

0002ac24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2ac24:	defff404 	addi	sp,sp,-48
   2ac28:	dfc00b15 	stw	ra,44(sp)
   2ac2c:	df000a15 	stw	fp,40(sp)
   2ac30:	df000a04 	addi	fp,sp,40
   2ac34:	e13ffb15 	stw	r4,-20(fp)
   2ac38:	e17ffc15 	stw	r5,-16(fp)
   2ac3c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2ac40:	00bfffc4 	movi	r2,-1
   2ac44:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   2ac48:	00bffb44 	movi	r2,-19
   2ac4c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   2ac50:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2ac54:	e13ffb17 	ldw	r4,-20(fp)
   2ac58:	014000f4 	movhi	r5,3
   2ac5c:	29433504 	addi	r5,r5,3284
   2ac60:	002db380 	call	2db38 <alt_find_dev>
   2ac64:	e0bffa15 	stw	r2,-24(fp)
   2ac68:	e0bffa17 	ldw	r2,-24(fp)
   2ac6c:	1004c03a 	cmpne	r2,r2,zero
   2ac70:	1000051e 	bne	r2,zero,2ac88 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2ac74:	e13ffb17 	ldw	r4,-20(fp)
   2ac78:	002dbcc0 	call	2dbcc <alt_find_file>
   2ac7c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   2ac80:	00800044 	movi	r2,1
   2ac84:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2ac88:	e0bffa17 	ldw	r2,-24(fp)
   2ac8c:	1005003a 	cmpeq	r2,r2,zero
   2ac90:	1000301e 	bne	r2,zero,2ad54 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2ac94:	e13ffa17 	ldw	r4,-24(fp)
   2ac98:	002dcec0 	call	2dcec <alt_get_fd>
   2ac9c:	e0bff815 	stw	r2,-32(fp)
   2aca0:	e0bff817 	ldw	r2,-32(fp)
   2aca4:	1004403a 	cmpge	r2,r2,zero
   2aca8:	1000031e 	bne	r2,zero,2acb8 <open+0x94>
    {
      status = index;
   2acac:	e0bff817 	ldw	r2,-32(fp)
   2acb0:	e0bff715 	stw	r2,-36(fp)
   2acb4:	00002906 	br	2ad5c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   2acb8:	e0bff817 	ldw	r2,-32(fp)
   2acbc:	10800324 	muli	r2,r2,12
   2acc0:	1007883a 	mov	r3,r2
   2acc4:	008000f4 	movhi	r2,3
   2acc8:	10be3c04 	addi	r2,r2,-1808
   2accc:	1885883a 	add	r2,r3,r2
   2acd0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2acd4:	e0fffc17 	ldw	r3,-16(fp)
   2acd8:	00900034 	movhi	r2,16384
   2acdc:	10bfffc4 	addi	r2,r2,-1
   2ace0:	1886703a 	and	r3,r3,r2
   2ace4:	e0bff917 	ldw	r2,-28(fp)
   2ace8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2acec:	e0bff617 	ldw	r2,-40(fp)
   2acf0:	1004c03a 	cmpne	r2,r2,zero
   2acf4:	1000061e 	bne	r2,zero,2ad10 <open+0xec>
   2acf8:	e13ff917 	ldw	r4,-28(fp)
   2acfc:	002ab480 	call	2ab48 <alt_file_locked>
   2ad00:	e0bff715 	stw	r2,-36(fp)
   2ad04:	e0bff717 	ldw	r2,-36(fp)
   2ad08:	1004803a 	cmplt	r2,r2,zero
   2ad0c:	1000131e 	bne	r2,zero,2ad5c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2ad10:	e0bffa17 	ldw	r2,-24(fp)
   2ad14:	10800317 	ldw	r2,12(r2)
   2ad18:	1005003a 	cmpeq	r2,r2,zero
   2ad1c:	1000091e 	bne	r2,zero,2ad44 <open+0x120>
   2ad20:	e0bffa17 	ldw	r2,-24(fp)
   2ad24:	10800317 	ldw	r2,12(r2)
   2ad28:	e13ff917 	ldw	r4,-28(fp)
   2ad2c:	e17ffb17 	ldw	r5,-20(fp)
   2ad30:	e1bffc17 	ldw	r6,-16(fp)
   2ad34:	e1fffd17 	ldw	r7,-12(fp)
   2ad38:	103ee83a 	callr	r2
   2ad3c:	e0bfff15 	stw	r2,-4(fp)
   2ad40:	00000106 	br	2ad48 <open+0x124>
   2ad44:	e03fff15 	stw	zero,-4(fp)
   2ad48:	e0bfff17 	ldw	r2,-4(fp)
   2ad4c:	e0bff715 	stw	r2,-36(fp)
   2ad50:	00000206 	br	2ad5c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2ad54:	00bffb44 	movi	r2,-19
   2ad58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2ad5c:	e0bff717 	ldw	r2,-36(fp)
   2ad60:	1004403a 	cmpge	r2,r2,zero
   2ad64:	1000091e 	bne	r2,zero,2ad8c <open+0x168>
  {
    alt_release_fd (index);  
   2ad68:	e13ff817 	ldw	r4,-32(fp)
   2ad6c:	002af8c0 	call	2af8c <alt_release_fd>
    ALT_ERRNO = -status;
   2ad70:	002adac0 	call	2adac <alt_get_errno>
   2ad74:	e0fff717 	ldw	r3,-36(fp)
   2ad78:	00c7c83a 	sub	r3,zero,r3
   2ad7c:	10c00015 	stw	r3,0(r2)
    return -1;
   2ad80:	00bfffc4 	movi	r2,-1
   2ad84:	e0bffe15 	stw	r2,-8(fp)
   2ad88:	00000206 	br	2ad94 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   2ad8c:	e0bff817 	ldw	r2,-32(fp)
   2ad90:	e0bffe15 	stw	r2,-8(fp)
   2ad94:	e0bffe17 	ldw	r2,-8(fp)
}
   2ad98:	e037883a 	mov	sp,fp
   2ad9c:	dfc00117 	ldw	ra,4(sp)
   2ada0:	df000017 	ldw	fp,0(sp)
   2ada4:	dec00204 	addi	sp,sp,8
   2ada8:	f800283a 	ret

0002adac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2adac:	defffd04 	addi	sp,sp,-12
   2adb0:	dfc00215 	stw	ra,8(sp)
   2adb4:	df000115 	stw	fp,4(sp)
   2adb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2adbc:	008000f4 	movhi	r2,3
   2adc0:	10833804 	addi	r2,r2,3296
   2adc4:	10800017 	ldw	r2,0(r2)
   2adc8:	1005003a 	cmpeq	r2,r2,zero
   2adcc:	1000061e 	bne	r2,zero,2ade8 <alt_get_errno+0x3c>
   2add0:	008000f4 	movhi	r2,3
   2add4:	10833804 	addi	r2,r2,3296
   2add8:	10800017 	ldw	r2,0(r2)
   2addc:	103ee83a 	callr	r2
   2ade0:	e0bfff15 	stw	r2,-4(fp)
   2ade4:	00000306 	br	2adf4 <alt_get_errno+0x48>
   2ade8:	008000f4 	movhi	r2,3
   2adec:	108a5104 	addi	r2,r2,10564
   2adf0:	e0bfff15 	stw	r2,-4(fp)
   2adf4:	e0bfff17 	ldw	r2,-4(fp)
}
   2adf8:	e037883a 	mov	sp,fp
   2adfc:	dfc00117 	ldw	ra,4(sp)
   2ae00:	df000017 	ldw	fp,0(sp)
   2ae04:	dec00204 	addi	sp,sp,8
   2ae08:	f800283a 	ret

0002ae0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2ae0c:	defff704 	addi	sp,sp,-36
   2ae10:	dfc00815 	stw	ra,32(sp)
   2ae14:	df000715 	stw	fp,28(sp)
   2ae18:	df000704 	addi	fp,sp,28
   2ae1c:	e13ffb15 	stw	r4,-20(fp)
   2ae20:	e17ffc15 	stw	r5,-16(fp)
   2ae24:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ae28:	e0bffb17 	ldw	r2,-20(fp)
   2ae2c:	1004803a 	cmplt	r2,r2,zero
   2ae30:	1000081e 	bne	r2,zero,2ae54 <read+0x48>
   2ae34:	e0bffb17 	ldw	r2,-20(fp)
   2ae38:	10800324 	muli	r2,r2,12
   2ae3c:	1007883a 	mov	r3,r2
   2ae40:	008000f4 	movhi	r2,3
   2ae44:	10be3c04 	addi	r2,r2,-1808
   2ae48:	1887883a 	add	r3,r3,r2
   2ae4c:	e0ffff15 	stw	r3,-4(fp)
   2ae50:	00000106 	br	2ae58 <read+0x4c>
   2ae54:	e03fff15 	stw	zero,-4(fp)
   2ae58:	e0bfff17 	ldw	r2,-4(fp)
   2ae5c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   2ae60:	e0bffa17 	ldw	r2,-24(fp)
   2ae64:	1005003a 	cmpeq	r2,r2,zero
   2ae68:	1000241e 	bne	r2,zero,2aefc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2ae6c:	e0bffa17 	ldw	r2,-24(fp)
   2ae70:	10800217 	ldw	r2,8(r2)
   2ae74:	108000cc 	andi	r2,r2,3
   2ae78:	10800060 	cmpeqi	r2,r2,1
   2ae7c:	10001a1e 	bne	r2,zero,2aee8 <read+0xdc>
   2ae80:	e0bffa17 	ldw	r2,-24(fp)
   2ae84:	10800017 	ldw	r2,0(r2)
   2ae88:	10800517 	ldw	r2,20(r2)
   2ae8c:	1005003a 	cmpeq	r2,r2,zero
   2ae90:	1000151e 	bne	r2,zero,2aee8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2ae94:	e0bffa17 	ldw	r2,-24(fp)
   2ae98:	10800017 	ldw	r2,0(r2)
   2ae9c:	10800517 	ldw	r2,20(r2)
   2aea0:	e17ffc17 	ldw	r5,-16(fp)
   2aea4:	e1bffd17 	ldw	r6,-12(fp)
   2aea8:	e13ffa17 	ldw	r4,-24(fp)
   2aeac:	103ee83a 	callr	r2
   2aeb0:	e0bff915 	stw	r2,-28(fp)
   2aeb4:	e0bff917 	ldw	r2,-28(fp)
   2aeb8:	1004403a 	cmpge	r2,r2,zero
   2aebc:	1000071e 	bne	r2,zero,2aedc <read+0xd0>
        {
          ALT_ERRNO = -rval;
   2aec0:	002af2c0 	call	2af2c <alt_get_errno>
   2aec4:	e0fff917 	ldw	r3,-28(fp)
   2aec8:	00c7c83a 	sub	r3,zero,r3
   2aecc:	10c00015 	stw	r3,0(r2)
          return -1;
   2aed0:	00bfffc4 	movi	r2,-1
   2aed4:	e0bffe15 	stw	r2,-8(fp)
   2aed8:	00000e06 	br	2af14 <read+0x108>
        }
        return rval;
   2aedc:	e0bff917 	ldw	r2,-28(fp)
   2aee0:	e0bffe15 	stw	r2,-8(fp)
   2aee4:	00000b06 	br	2af14 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2aee8:	002af2c0 	call	2af2c <alt_get_errno>
   2aeec:	1007883a 	mov	r3,r2
   2aef0:	00800344 	movi	r2,13
   2aef4:	18800015 	stw	r2,0(r3)
   2aef8:	00000406 	br	2af0c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2aefc:	002af2c0 	call	2af2c <alt_get_errno>
   2af00:	1007883a 	mov	r3,r2
   2af04:	00801444 	movi	r2,81
   2af08:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2af0c:	00bfffc4 	movi	r2,-1
   2af10:	e0bffe15 	stw	r2,-8(fp)
   2af14:	e0bffe17 	ldw	r2,-8(fp)
}
   2af18:	e037883a 	mov	sp,fp
   2af1c:	dfc00117 	ldw	ra,4(sp)
   2af20:	df000017 	ldw	fp,0(sp)
   2af24:	dec00204 	addi	sp,sp,8
   2af28:	f800283a 	ret

0002af2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2af2c:	defffd04 	addi	sp,sp,-12
   2af30:	dfc00215 	stw	ra,8(sp)
   2af34:	df000115 	stw	fp,4(sp)
   2af38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2af3c:	008000f4 	movhi	r2,3
   2af40:	10833804 	addi	r2,r2,3296
   2af44:	10800017 	ldw	r2,0(r2)
   2af48:	1005003a 	cmpeq	r2,r2,zero
   2af4c:	1000061e 	bne	r2,zero,2af68 <alt_get_errno+0x3c>
   2af50:	008000f4 	movhi	r2,3
   2af54:	10833804 	addi	r2,r2,3296
   2af58:	10800017 	ldw	r2,0(r2)
   2af5c:	103ee83a 	callr	r2
   2af60:	e0bfff15 	stw	r2,-4(fp)
   2af64:	00000306 	br	2af74 <alt_get_errno+0x48>
   2af68:	008000f4 	movhi	r2,3
   2af6c:	108a5104 	addi	r2,r2,10564
   2af70:	e0bfff15 	stw	r2,-4(fp)
   2af74:	e0bfff17 	ldw	r2,-4(fp)
}
   2af78:	e037883a 	mov	sp,fp
   2af7c:	dfc00117 	ldw	ra,4(sp)
   2af80:	df000017 	ldw	fp,0(sp)
   2af84:	dec00204 	addi	sp,sp,8
   2af88:	f800283a 	ret

0002af8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2af8c:	defffe04 	addi	sp,sp,-8
   2af90:	df000115 	stw	fp,4(sp)
   2af94:	df000104 	addi	fp,sp,4
   2af98:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2af9c:	e0bfff17 	ldw	r2,-4(fp)
   2afa0:	108000d0 	cmplti	r2,r2,3
   2afa4:	10000d1e 	bne	r2,zero,2afdc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2afa8:	e0bfff17 	ldw	r2,-4(fp)
   2afac:	00c000f4 	movhi	r3,3
   2afb0:	18fe3c04 	addi	r3,r3,-1808
   2afb4:	10800324 	muli	r2,r2,12
   2afb8:	10c5883a 	add	r2,r2,r3
   2afbc:	10800204 	addi	r2,r2,8
   2afc0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2afc4:	e0bfff17 	ldw	r2,-4(fp)
   2afc8:	00c000f4 	movhi	r3,3
   2afcc:	18fe3c04 	addi	r3,r3,-1808
   2afd0:	10800324 	muli	r2,r2,12
   2afd4:	10c5883a 	add	r2,r2,r3
   2afd8:	10000015 	stw	zero,0(r2)
  }
}
   2afdc:	e037883a 	mov	sp,fp
   2afe0:	df000017 	ldw	fp,0(sp)
   2afe4:	dec00104 	addi	sp,sp,4
   2afe8:	f800283a 	ret

0002afec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2afec:	defff804 	addi	sp,sp,-32
   2aff0:	df000715 	stw	fp,28(sp)
   2aff4:	df000704 	addi	fp,sp,28
   2aff8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2affc:	0005303a 	rdctl	r2,status
   2b000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b004:	e0fffb17 	ldw	r3,-20(fp)
   2b008:	00bfff84 	movi	r2,-2
   2b00c:	1884703a 	and	r2,r3,r2
   2b010:	1001703a 	wrctl	status,r2
  
  return context;
   2b014:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2b018:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2b01c:	d0a00c17 	ldw	r2,-32720(gp)
   2b020:	10c000c4 	addi	r3,r2,3
   2b024:	00bfff04 	movi	r2,-4
   2b028:	1884703a 	and	r2,r3,r2
   2b02c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2b030:	d0e00c17 	ldw	r3,-32720(gp)
   2b034:	e0bffe17 	ldw	r2,-8(fp)
   2b038:	1887883a 	add	r3,r3,r2
   2b03c:	00800134 	movhi	r2,4
   2b040:	10bd0004 	addi	r2,r2,-3072
   2b044:	10c0072e 	bgeu	r2,r3,2b064 <sbrk+0x78>
   2b048:	e0bffd17 	ldw	r2,-12(fp)
   2b04c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b050:	e0bffa17 	ldw	r2,-24(fp)
   2b054:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2b058:	00bfffc4 	movi	r2,-1
   2b05c:	e0bfff15 	stw	r2,-4(fp)
   2b060:	00000c06 	br	2b094 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   2b064:	d0a00c17 	ldw	r2,-32720(gp)
   2b068:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   2b06c:	d0e00c17 	ldw	r3,-32720(gp)
   2b070:	e0bffe17 	ldw	r2,-8(fp)
   2b074:	1885883a 	add	r2,r3,r2
   2b078:	d0a00c15 	stw	r2,-32720(gp)
   2b07c:	e0bffd17 	ldw	r2,-12(fp)
   2b080:	e0bff915 	stw	r2,-28(fp)
   2b084:	e0bff917 	ldw	r2,-28(fp)
   2b088:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2b08c:	e0bffc17 	ldw	r2,-16(fp)
   2b090:	e0bfff15 	stw	r2,-4(fp)
   2b094:	e0bfff17 	ldw	r2,-4(fp)
} 
   2b098:	e037883a 	mov	sp,fp
   2b09c:	df000017 	ldw	fp,0(sp)
   2b0a0:	dec00104 	addi	sp,sp,4
   2b0a4:	f800283a 	ret

0002b0a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2b0a8:	defff704 	addi	sp,sp,-36
   2b0ac:	dfc00815 	stw	ra,32(sp)
   2b0b0:	df000715 	stw	fp,28(sp)
   2b0b4:	df000704 	addi	fp,sp,28
   2b0b8:	e13ffb15 	stw	r4,-20(fp)
   2b0bc:	e17ffc15 	stw	r5,-16(fp)
   2b0c0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b0c4:	e0bffb17 	ldw	r2,-20(fp)
   2b0c8:	1004803a 	cmplt	r2,r2,zero
   2b0cc:	1000081e 	bne	r2,zero,2b0f0 <write+0x48>
   2b0d0:	e0bffb17 	ldw	r2,-20(fp)
   2b0d4:	10800324 	muli	r2,r2,12
   2b0d8:	1007883a 	mov	r3,r2
   2b0dc:	008000f4 	movhi	r2,3
   2b0e0:	10be3c04 	addi	r2,r2,-1808
   2b0e4:	1887883a 	add	r3,r3,r2
   2b0e8:	e0ffff15 	stw	r3,-4(fp)
   2b0ec:	00000106 	br	2b0f4 <write+0x4c>
   2b0f0:	e03fff15 	stw	zero,-4(fp)
   2b0f4:	e0bfff17 	ldw	r2,-4(fp)
   2b0f8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   2b0fc:	e0bffa17 	ldw	r2,-24(fp)
   2b100:	1005003a 	cmpeq	r2,r2,zero
   2b104:	1000241e 	bne	r2,zero,2b198 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2b108:	e0bffa17 	ldw	r2,-24(fp)
   2b10c:	10800217 	ldw	r2,8(r2)
   2b110:	108000cc 	andi	r2,r2,3
   2b114:	1005003a 	cmpeq	r2,r2,zero
   2b118:	10001a1e 	bne	r2,zero,2b184 <write+0xdc>
   2b11c:	e0bffa17 	ldw	r2,-24(fp)
   2b120:	10800017 	ldw	r2,0(r2)
   2b124:	10800617 	ldw	r2,24(r2)
   2b128:	1005003a 	cmpeq	r2,r2,zero
   2b12c:	1000151e 	bne	r2,zero,2b184 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2b130:	e0bffa17 	ldw	r2,-24(fp)
   2b134:	10800017 	ldw	r2,0(r2)
   2b138:	10800617 	ldw	r2,24(r2)
   2b13c:	e17ffc17 	ldw	r5,-16(fp)
   2b140:	e1bffd17 	ldw	r6,-12(fp)
   2b144:	e13ffa17 	ldw	r4,-24(fp)
   2b148:	103ee83a 	callr	r2
   2b14c:	e0bff915 	stw	r2,-28(fp)
   2b150:	e0bff917 	ldw	r2,-28(fp)
   2b154:	1004403a 	cmpge	r2,r2,zero
   2b158:	1000071e 	bne	r2,zero,2b178 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   2b15c:	002b1c80 	call	2b1c8 <alt_get_errno>
   2b160:	e0fff917 	ldw	r3,-28(fp)
   2b164:	00c7c83a 	sub	r3,zero,r3
   2b168:	10c00015 	stw	r3,0(r2)
        return -1;
   2b16c:	00bfffc4 	movi	r2,-1
   2b170:	e0bffe15 	stw	r2,-8(fp)
   2b174:	00000e06 	br	2b1b0 <write+0x108>
      }
      return rval;
   2b178:	e0bff917 	ldw	r2,-28(fp)
   2b17c:	e0bffe15 	stw	r2,-8(fp)
   2b180:	00000b06 	br	2b1b0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2b184:	002b1c80 	call	2b1c8 <alt_get_errno>
   2b188:	1007883a 	mov	r3,r2
   2b18c:	00800344 	movi	r2,13
   2b190:	18800015 	stw	r2,0(r3)
   2b194:	00000406 	br	2b1a8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2b198:	002b1c80 	call	2b1c8 <alt_get_errno>
   2b19c:	1007883a 	mov	r3,r2
   2b1a0:	00801444 	movi	r2,81
   2b1a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2b1a8:	00bfffc4 	movi	r2,-1
   2b1ac:	e0bffe15 	stw	r2,-8(fp)
   2b1b0:	e0bffe17 	ldw	r2,-8(fp)
}
   2b1b4:	e037883a 	mov	sp,fp
   2b1b8:	dfc00117 	ldw	ra,4(sp)
   2b1bc:	df000017 	ldw	fp,0(sp)
   2b1c0:	dec00204 	addi	sp,sp,8
   2b1c4:	f800283a 	ret

0002b1c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b1c8:	defffd04 	addi	sp,sp,-12
   2b1cc:	dfc00215 	stw	ra,8(sp)
   2b1d0:	df000115 	stw	fp,4(sp)
   2b1d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2b1d8:	008000f4 	movhi	r2,3
   2b1dc:	10833804 	addi	r2,r2,3296
   2b1e0:	10800017 	ldw	r2,0(r2)
   2b1e4:	1005003a 	cmpeq	r2,r2,zero
   2b1e8:	1000061e 	bne	r2,zero,2b204 <alt_get_errno+0x3c>
   2b1ec:	008000f4 	movhi	r2,3
   2b1f0:	10833804 	addi	r2,r2,3296
   2b1f4:	10800017 	ldw	r2,0(r2)
   2b1f8:	103ee83a 	callr	r2
   2b1fc:	e0bfff15 	stw	r2,-4(fp)
   2b200:	00000306 	br	2b210 <alt_get_errno+0x48>
   2b204:	008000f4 	movhi	r2,3
   2b208:	108a5104 	addi	r2,r2,10564
   2b20c:	e0bfff15 	stw	r2,-4(fp)
   2b210:	e0bfff17 	ldw	r2,-4(fp)
}
   2b214:	e037883a 	mov	sp,fp
   2b218:	dfc00117 	ldw	ra,4(sp)
   2b21c:	df000017 	ldw	fp,0(sp)
   2b220:	dec00204 	addi	sp,sp,8
   2b224:	f800283a 	ret

0002b228 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2b228:	defffd04 	addi	sp,sp,-12
   2b22c:	dfc00215 	stw	ra,8(sp)
   2b230:	df000115 	stw	fp,4(sp)
   2b234:	df000104 	addi	fp,sp,4
   2b238:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   2b23c:	002e3b00 	call	2e3b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2b240:	00800044 	movi	r2,1
   2b244:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2b248:	e037883a 	mov	sp,fp
   2b24c:	dfc00117 	ldw	ra,4(sp)
   2b250:	df000017 	ldw	fp,0(sp)
   2b254:	dec00204 	addi	sp,sp,8
   2b258:	f800283a 	ret

0002b25c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2b25c:	defffe04 	addi	sp,sp,-8
   2b260:	dfc00115 	stw	ra,4(sp)
   2b264:	df000015 	stw	fp,0(sp)
   2b268:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   2b26c:	01000134 	movhi	r4,4
   2b270:	21041804 	addi	r4,r4,4192
   2b274:	000b883a 	mov	r5,zero
   2b278:	01800044 	movi	r6,1
   2b27c:	01c0fa04 	movi	r7,1000
   2b280:	002cd840 	call	2cd84 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2b284:	010000f4 	movhi	r4,3
   2b288:	213ea604 	addi	r4,r4,-1384
   2b28c:	000b883a 	mov	r5,zero
   2b290:	01800204 	movi	r6,8
   2b294:	002b4700 	call	2b470 <altera_avalon_jtag_uart_init>
   2b298:	010000f4 	movhi	r4,3
   2b29c:	213e9c04 	addi	r4,r4,-1424
   2b2a0:	002b2f00 	call	2b2f0 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
   2b2a4:	010000f4 	movhi	r4,3
   2b2a8:	2102be04 	addi	r4,r4,2808
   2b2ac:	002cb800 	call	2cb80 <altera_avalon_lcd_16207_init>
   2b2b0:	010000f4 	movhi	r4,3
   2b2b4:	2102b404 	addi	r4,r4,2768
   2b2b8:	002b2f00 	call	2b2f0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
    ALTERA_AVALON_UART_INIT ( UART, uart);
   2b2bc:	010000f4 	movhi	r4,3
   2b2c0:	21030604 	addi	r4,r4,3096
   2b2c4:	000b883a 	mov	r5,zero
   2b2c8:	01800144 	movi	r6,5
   2b2cc:	002cf0c0 	call	2cf0c <altera_avalon_uart_init>
   2b2d0:	010000f4 	movhi	r4,3
   2b2d4:	2102fc04 	addi	r4,r4,3056
   2b2d8:	002b2f00 	call	2b2f0 <alt_dev_reg>
}
   2b2dc:	e037883a 	mov	sp,fp
   2b2e0:	dfc00117 	ldw	ra,4(sp)
   2b2e4:	df000017 	ldw	fp,0(sp)
   2b2e8:	dec00204 	addi	sp,sp,8
   2b2ec:	f800283a 	ret

0002b2f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2b2f0:	defffd04 	addi	sp,sp,-12
   2b2f4:	dfc00215 	stw	ra,8(sp)
   2b2f8:	df000115 	stw	fp,4(sp)
   2b2fc:	df000104 	addi	fp,sp,4
   2b300:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2b304:	e13fff17 	ldw	r4,-4(fp)
   2b308:	014000f4 	movhi	r5,3
   2b30c:	29433504 	addi	r5,r5,3284
   2b310:	002d95c0 	call	2d95c <alt_dev_llist_insert>
}
   2b314:	e037883a 	mov	sp,fp
   2b318:	dfc00117 	ldw	ra,4(sp)
   2b31c:	df000017 	ldw	fp,0(sp)
   2b320:	dec00204 	addi	sp,sp,8
   2b324:	f800283a 	ret

0002b328 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2b328:	defffa04 	addi	sp,sp,-24
   2b32c:	dfc00515 	stw	ra,20(sp)
   2b330:	df000415 	stw	fp,16(sp)
   2b334:	df000404 	addi	fp,sp,16
   2b338:	e13ffd15 	stw	r4,-12(fp)
   2b33c:	e17ffe15 	stw	r5,-8(fp)
   2b340:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b344:	e0bffd17 	ldw	r2,-12(fp)
   2b348:	10800017 	ldw	r2,0(r2)
   2b34c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2b350:	e0bffc17 	ldw	r2,-16(fp)
   2b354:	11000a04 	addi	r4,r2,40
   2b358:	e0bffd17 	ldw	r2,-12(fp)
   2b35c:	11c00217 	ldw	r7,8(r2)
   2b360:	e17ffe17 	ldw	r5,-8(fp)
   2b364:	e1bfff17 	ldw	r6,-4(fp)
   2b368:	002b9700 	call	2b970 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2b36c:	e037883a 	mov	sp,fp
   2b370:	dfc00117 	ldw	ra,4(sp)
   2b374:	df000017 	ldw	fp,0(sp)
   2b378:	dec00204 	addi	sp,sp,8
   2b37c:	f800283a 	ret

0002b380 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2b380:	defffa04 	addi	sp,sp,-24
   2b384:	dfc00515 	stw	ra,20(sp)
   2b388:	df000415 	stw	fp,16(sp)
   2b38c:	df000404 	addi	fp,sp,16
   2b390:	e13ffd15 	stw	r4,-12(fp)
   2b394:	e17ffe15 	stw	r5,-8(fp)
   2b398:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b39c:	e0bffd17 	ldw	r2,-12(fp)
   2b3a0:	10800017 	ldw	r2,0(r2)
   2b3a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2b3a8:	e0bffc17 	ldw	r2,-16(fp)
   2b3ac:	11000a04 	addi	r4,r2,40
   2b3b0:	e0bffd17 	ldw	r2,-12(fp)
   2b3b4:	11c00217 	ldw	r7,8(r2)
   2b3b8:	e17ffe17 	ldw	r5,-8(fp)
   2b3bc:	e1bfff17 	ldw	r6,-4(fp)
   2b3c0:	002bb940 	call	2bb94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2b3c4:	e037883a 	mov	sp,fp
   2b3c8:	dfc00117 	ldw	ra,4(sp)
   2b3cc:	df000017 	ldw	fp,0(sp)
   2b3d0:	dec00204 	addi	sp,sp,8
   2b3d4:	f800283a 	ret

0002b3d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2b3d8:	defffc04 	addi	sp,sp,-16
   2b3dc:	dfc00315 	stw	ra,12(sp)
   2b3e0:	df000215 	stw	fp,8(sp)
   2b3e4:	df000204 	addi	fp,sp,8
   2b3e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b3ec:	e0bfff17 	ldw	r2,-4(fp)
   2b3f0:	10800017 	ldw	r2,0(r2)
   2b3f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2b3f8:	e0bffe17 	ldw	r2,-8(fp)
   2b3fc:	11000a04 	addi	r4,r2,40
   2b400:	e0bfff17 	ldw	r2,-4(fp)
   2b404:	11400217 	ldw	r5,8(r2)
   2b408:	002b8080 	call	2b808 <altera_avalon_jtag_uart_close>
}
   2b40c:	e037883a 	mov	sp,fp
   2b410:	dfc00117 	ldw	ra,4(sp)
   2b414:	df000017 	ldw	fp,0(sp)
   2b418:	dec00204 	addi	sp,sp,8
   2b41c:	f800283a 	ret

0002b420 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2b420:	defffa04 	addi	sp,sp,-24
   2b424:	dfc00515 	stw	ra,20(sp)
   2b428:	df000415 	stw	fp,16(sp)
   2b42c:	df000404 	addi	fp,sp,16
   2b430:	e13ffd15 	stw	r4,-12(fp)
   2b434:	e17ffe15 	stw	r5,-8(fp)
   2b438:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2b43c:	e0bffd17 	ldw	r2,-12(fp)
   2b440:	10800017 	ldw	r2,0(r2)
   2b444:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2b448:	e0bffc17 	ldw	r2,-16(fp)
   2b44c:	11000a04 	addi	r4,r2,40
   2b450:	e17ffe17 	ldw	r5,-8(fp)
   2b454:	e1bfff17 	ldw	r6,-4(fp)
   2b458:	002b87c0 	call	2b87c <altera_avalon_jtag_uart_ioctl>
}
   2b45c:	e037883a 	mov	sp,fp
   2b460:	dfc00117 	ldw	ra,4(sp)
   2b464:	df000017 	ldw	fp,0(sp)
   2b468:	dec00204 	addi	sp,sp,8
   2b46c:	f800283a 	ret

0002b470 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2b470:	defffa04 	addi	sp,sp,-24
   2b474:	dfc00515 	stw	ra,20(sp)
   2b478:	df000415 	stw	fp,16(sp)
   2b47c:	df000404 	addi	fp,sp,16
   2b480:	e13ffd15 	stw	r4,-12(fp)
   2b484:	e17ffe15 	stw	r5,-8(fp)
   2b488:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b48c:	e0fffd17 	ldw	r3,-12(fp)
   2b490:	00800044 	movi	r2,1
   2b494:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2b498:	e0bffd17 	ldw	r2,-12(fp)
   2b49c:	10800017 	ldw	r2,0(r2)
   2b4a0:	11000104 	addi	r4,r2,4
   2b4a4:	e0bffd17 	ldw	r2,-12(fp)
   2b4a8:	10800817 	ldw	r2,32(r2)
   2b4ac:	1007883a 	mov	r3,r2
   2b4b0:	2005883a 	mov	r2,r4
   2b4b4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2b4b8:	e13ffe17 	ldw	r4,-8(fp)
   2b4bc:	e17fff17 	ldw	r5,-4(fp)
   2b4c0:	d8000015 	stw	zero,0(sp)
   2b4c4:	018000f4 	movhi	r6,3
   2b4c8:	31ad4c04 	addi	r6,r6,-19152
   2b4cc:	e1fffd17 	ldw	r7,-12(fp)
   2b4d0:	002ddd40 	call	2ddd4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2b4d4:	e0bffd17 	ldw	r2,-12(fp)
   2b4d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2b4dc:	e0bffd17 	ldw	r2,-12(fp)
   2b4e0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2b4e4:	008000f4 	movhi	r2,3
   2b4e8:	108a5c04 	addi	r2,r2,10608
   2b4ec:	10800017 	ldw	r2,0(r2)
   2b4f0:	100b883a 	mov	r5,r2
   2b4f4:	018000f4 	movhi	r6,3
   2b4f8:	31add604 	addi	r6,r6,-18600
   2b4fc:	e1fffd17 	ldw	r7,-12(fp)
   2b500:	002d7c40 	call	2d7c4 <alt_alarm_start>
   2b504:	1004403a 	cmpge	r2,r2,zero
   2b508:	1000041e 	bne	r2,zero,2b51c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2b50c:	e0fffd17 	ldw	r3,-12(fp)
   2b510:	00a00034 	movhi	r2,32768
   2b514:	10bfffc4 	addi	r2,r2,-1
   2b518:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2b51c:	e037883a 	mov	sp,fp
   2b520:	dfc00117 	ldw	ra,4(sp)
   2b524:	df000017 	ldw	fp,0(sp)
   2b528:	dec00204 	addi	sp,sp,8
   2b52c:	f800283a 	ret

0002b530 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2b530:	defff804 	addi	sp,sp,-32
   2b534:	df000715 	stw	fp,28(sp)
   2b538:	df000704 	addi	fp,sp,28
   2b53c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2b540:	e0bfff17 	ldw	r2,-4(fp)
   2b544:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   2b548:	e0bffe17 	ldw	r2,-8(fp)
   2b54c:	10800017 	ldw	r2,0(r2)
   2b550:	e0bffd15 	stw	r2,-12(fp)
   2b554:	00000006 	br	2b558 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b558:	e0bffd17 	ldw	r2,-12(fp)
   2b55c:	10800104 	addi	r2,r2,4
   2b560:	10800037 	ldwio	r2,0(r2)
   2b564:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2b568:	e0bffc17 	ldw	r2,-16(fp)
   2b56c:	1080c00c 	andi	r2,r2,768
   2b570:	1005003a 	cmpeq	r2,r2,zero
   2b574:	1000741e 	bne	r2,zero,2b748 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2b578:	e0bffc17 	ldw	r2,-16(fp)
   2b57c:	1080400c 	andi	r2,r2,256
   2b580:	1005003a 	cmpeq	r2,r2,zero
   2b584:	1000351e 	bne	r2,zero,2b65c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2b588:	00800074 	movhi	r2,1
   2b58c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b590:	e0bffe17 	ldw	r2,-8(fp)
   2b594:	10800a17 	ldw	r2,40(r2)
   2b598:	10800044 	addi	r2,r2,1
   2b59c:	1081ffcc 	andi	r2,r2,2047
   2b5a0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   2b5a4:	e0bffe17 	ldw	r2,-8(fp)
   2b5a8:	10c00b17 	ldw	r3,44(r2)
   2b5ac:	e0bffa17 	ldw	r2,-24(fp)
   2b5b0:	18801626 	beq	r3,r2,2b60c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2b5b4:	e0bffd17 	ldw	r2,-12(fp)
   2b5b8:	10800037 	ldwio	r2,0(r2)
   2b5bc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2b5c0:	e0bffb17 	ldw	r2,-20(fp)
   2b5c4:	10a0000c 	andi	r2,r2,32768
   2b5c8:	1005003a 	cmpeq	r2,r2,zero
   2b5cc:	10000f1e 	bne	r2,zero,2b60c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2b5d0:	e0bffe17 	ldw	r2,-8(fp)
   2b5d4:	10c00a17 	ldw	r3,40(r2)
   2b5d8:	e0bffb17 	ldw	r2,-20(fp)
   2b5dc:	1009883a 	mov	r4,r2
   2b5e0:	e0bffe17 	ldw	r2,-8(fp)
   2b5e4:	1885883a 	add	r2,r3,r2
   2b5e8:	10800e04 	addi	r2,r2,56
   2b5ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b5f0:	e0bffe17 	ldw	r2,-8(fp)
   2b5f4:	10800a17 	ldw	r2,40(r2)
   2b5f8:	10800044 	addi	r2,r2,1
   2b5fc:	10c1ffcc 	andi	r3,r2,2047
   2b600:	e0bffe17 	ldw	r2,-8(fp)
   2b604:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2b608:	003fe106 	br	2b590 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2b60c:	e0bffb17 	ldw	r2,-20(fp)
   2b610:	10bfffec 	andhi	r2,r2,65535
   2b614:	1005003a 	cmpeq	r2,r2,zero
   2b618:	1000101e 	bne	r2,zero,2b65c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b61c:	e0bffe17 	ldw	r2,-8(fp)
   2b620:	10c00817 	ldw	r3,32(r2)
   2b624:	00bfff84 	movi	r2,-2
   2b628:	1886703a 	and	r3,r3,r2
   2b62c:	e0bffe17 	ldw	r2,-8(fp)
   2b630:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2b634:	e0bffd17 	ldw	r2,-12(fp)
   2b638:	11000104 	addi	r4,r2,4
   2b63c:	e0bffe17 	ldw	r2,-8(fp)
   2b640:	10800817 	ldw	r2,32(r2)
   2b644:	1007883a 	mov	r3,r2
   2b648:	2005883a 	mov	r2,r4
   2b64c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b650:	e0bffd17 	ldw	r2,-12(fp)
   2b654:	10800104 	addi	r2,r2,4
   2b658:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2b65c:	e0bffc17 	ldw	r2,-16(fp)
   2b660:	1080800c 	andi	r2,r2,512
   2b664:	1005003a 	cmpeq	r2,r2,zero
   2b668:	103fbb1e 	bne	r2,zero,2b558 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2b66c:	e0bffc17 	ldw	r2,-16(fp)
   2b670:	10bfffec 	andhi	r2,r2,65535
   2b674:	1004d43a 	srli	r2,r2,16
   2b678:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2b67c:	00001506 	br	2b6d4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2b680:	e13ffd17 	ldw	r4,-12(fp)
   2b684:	e0bffe17 	ldw	r2,-8(fp)
   2b688:	10c00d17 	ldw	r3,52(r2)
   2b68c:	e0bffe17 	ldw	r2,-8(fp)
   2b690:	1885883a 	add	r2,r3,r2
   2b694:	10820e04 	addi	r2,r2,2104
   2b698:	10800003 	ldbu	r2,0(r2)
   2b69c:	10c03fcc 	andi	r3,r2,255
   2b6a0:	18c0201c 	xori	r3,r3,128
   2b6a4:	18ffe004 	addi	r3,r3,-128
   2b6a8:	2005883a 	mov	r2,r4
   2b6ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b6b0:	e0bffe17 	ldw	r2,-8(fp)
   2b6b4:	10800d17 	ldw	r2,52(r2)
   2b6b8:	10800044 	addi	r2,r2,1
   2b6bc:	10c1ffcc 	andi	r3,r2,2047
   2b6c0:	e0bffe17 	ldw	r2,-8(fp)
   2b6c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2b6c8:	e0bff917 	ldw	r2,-28(fp)
   2b6cc:	10bfffc4 	addi	r2,r2,-1
   2b6d0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2b6d4:	e0bff917 	ldw	r2,-28(fp)
   2b6d8:	1005003a 	cmpeq	r2,r2,zero
   2b6dc:	1000051e 	bne	r2,zero,2b6f4 <altera_avalon_jtag_uart_irq+0x1c4>
   2b6e0:	e0bffe17 	ldw	r2,-8(fp)
   2b6e4:	10c00d17 	ldw	r3,52(r2)
   2b6e8:	e0bffe17 	ldw	r2,-8(fp)
   2b6ec:	10800c17 	ldw	r2,48(r2)
   2b6f0:	18bfe31e 	bne	r3,r2,2b680 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2b6f4:	e0bff917 	ldw	r2,-28(fp)
   2b6f8:	1005003a 	cmpeq	r2,r2,zero
   2b6fc:	103f961e 	bne	r2,zero,2b558 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2b700:	e0bffe17 	ldw	r2,-8(fp)
   2b704:	10c00817 	ldw	r3,32(r2)
   2b708:	00bfff44 	movi	r2,-3
   2b70c:	1886703a 	and	r3,r3,r2
   2b710:	e0bffe17 	ldw	r2,-8(fp)
   2b714:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b718:	e0bffe17 	ldw	r2,-8(fp)
   2b71c:	10800017 	ldw	r2,0(r2)
   2b720:	11000104 	addi	r4,r2,4
   2b724:	e0bffe17 	ldw	r2,-8(fp)
   2b728:	10800817 	ldw	r2,32(r2)
   2b72c:	1007883a 	mov	r3,r2
   2b730:	2005883a 	mov	r2,r4
   2b734:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b738:	e0bffd17 	ldw	r2,-12(fp)
   2b73c:	10800104 	addi	r2,r2,4
   2b740:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2b744:	003f8406 	br	2b558 <altera_avalon_jtag_uart_irq+0x28>
}
   2b748:	e037883a 	mov	sp,fp
   2b74c:	df000017 	ldw	fp,0(sp)
   2b750:	dec00104 	addi	sp,sp,4
   2b754:	f800283a 	ret

0002b758 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2b758:	defffc04 	addi	sp,sp,-16
   2b75c:	df000315 	stw	fp,12(sp)
   2b760:	df000304 	addi	fp,sp,12
   2b764:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2b768:	e0bfff17 	ldw	r2,-4(fp)
   2b76c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2b770:	e0bffe17 	ldw	r2,-8(fp)
   2b774:	10800017 	ldw	r2,0(r2)
   2b778:	10800104 	addi	r2,r2,4
   2b77c:	10800037 	ldwio	r2,0(r2)
   2b780:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2b784:	e0bffd17 	ldw	r2,-12(fp)
   2b788:	1081000c 	andi	r2,r2,1024
   2b78c:	1005003a 	cmpeq	r2,r2,zero
   2b790:	10000c1e 	bne	r2,zero,2b7c4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2b794:	e0bffe17 	ldw	r2,-8(fp)
   2b798:	10800017 	ldw	r2,0(r2)
   2b79c:	11000104 	addi	r4,r2,4
   2b7a0:	e0bffe17 	ldw	r2,-8(fp)
   2b7a4:	10800817 	ldw	r2,32(r2)
   2b7a8:	10810014 	ori	r2,r2,1024
   2b7ac:	1007883a 	mov	r3,r2
   2b7b0:	2005883a 	mov	r2,r4
   2b7b4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2b7b8:	e0bffe17 	ldw	r2,-8(fp)
   2b7bc:	10000915 	stw	zero,36(r2)
   2b7c0:	00000a06 	br	2b7ec <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2b7c4:	e0bffe17 	ldw	r2,-8(fp)
   2b7c8:	10c00917 	ldw	r3,36(r2)
   2b7cc:	00a00034 	movhi	r2,32768
   2b7d0:	10bfff04 	addi	r2,r2,-4
   2b7d4:	10c00536 	bltu	r2,r3,2b7ec <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   2b7d8:	e0bffe17 	ldw	r2,-8(fp)
   2b7dc:	10800917 	ldw	r2,36(r2)
   2b7e0:	10c00044 	addi	r3,r2,1
   2b7e4:	e0bffe17 	ldw	r2,-8(fp)
   2b7e8:	10c00915 	stw	r3,36(r2)
   2b7ec:	008000f4 	movhi	r2,3
   2b7f0:	108a5c04 	addi	r2,r2,10608
   2b7f4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2b7f8:	e037883a 	mov	sp,fp
   2b7fc:	df000017 	ldw	fp,0(sp)
   2b800:	dec00104 	addi	sp,sp,4
   2b804:	f800283a 	ret

0002b808 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2b808:	defffc04 	addi	sp,sp,-16
   2b80c:	df000315 	stw	fp,12(sp)
   2b810:	df000304 	addi	fp,sp,12
   2b814:	e13ffd15 	stw	r4,-12(fp)
   2b818:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2b81c:	00000706 	br	2b83c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   2b820:	e0bffe17 	ldw	r2,-8(fp)
   2b824:	1090000c 	andi	r2,r2,16384
   2b828:	1005003a 	cmpeq	r2,r2,zero
   2b82c:	1000031e 	bne	r2,zero,2b83c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   2b830:	00bffd44 	movi	r2,-11
   2b834:	e0bfff15 	stw	r2,-4(fp)
   2b838:	00000b06 	br	2b868 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2b83c:	e0bffd17 	ldw	r2,-12(fp)
   2b840:	10c00d17 	ldw	r3,52(r2)
   2b844:	e0bffd17 	ldw	r2,-12(fp)
   2b848:	10800c17 	ldw	r2,48(r2)
   2b84c:	18800526 	beq	r3,r2,2b864 <altera_avalon_jtag_uart_close+0x5c>
   2b850:	e0bffd17 	ldw	r2,-12(fp)
   2b854:	10c00917 	ldw	r3,36(r2)
   2b858:	e0bffd17 	ldw	r2,-12(fp)
   2b85c:	10800117 	ldw	r2,4(r2)
   2b860:	18bfef36 	bltu	r3,r2,2b820 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2b864:	e03fff15 	stw	zero,-4(fp)
   2b868:	e0bfff17 	ldw	r2,-4(fp)
}
   2b86c:	e037883a 	mov	sp,fp
   2b870:	df000017 	ldw	fp,0(sp)
   2b874:	dec00104 	addi	sp,sp,4
   2b878:	f800283a 	ret

0002b87c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2b87c:	defff804 	addi	sp,sp,-32
   2b880:	df000715 	stw	fp,28(sp)
   2b884:	df000704 	addi	fp,sp,28
   2b888:	e13ffb15 	stw	r4,-20(fp)
   2b88c:	e17ffc15 	stw	r5,-16(fp)
   2b890:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   2b894:	00bff9c4 	movi	r2,-25
   2b898:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   2b89c:	e0bffc17 	ldw	r2,-16(fp)
   2b8a0:	e0bfff15 	stw	r2,-4(fp)
   2b8a4:	e0ffff17 	ldw	r3,-4(fp)
   2b8a8:	189a8060 	cmpeqi	r2,r3,27137
   2b8ac:	1000041e 	bne	r2,zero,2b8c0 <altera_avalon_jtag_uart_ioctl+0x44>
   2b8b0:	e0ffff17 	ldw	r3,-4(fp)
   2b8b4:	189a80a0 	cmpeqi	r2,r3,27138
   2b8b8:	10001b1e 	bne	r2,zero,2b928 <altera_avalon_jtag_uart_ioctl+0xac>
   2b8bc:	00002706 	br	2b95c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2b8c0:	e0bffb17 	ldw	r2,-20(fp)
   2b8c4:	10c00117 	ldw	r3,4(r2)
   2b8c8:	00a00034 	movhi	r2,32768
   2b8cc:	10bfffc4 	addi	r2,r2,-1
   2b8d0:	18802226 	beq	r3,r2,2b95c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   2b8d4:	e0bffd17 	ldw	r2,-12(fp)
   2b8d8:	10800017 	ldw	r2,0(r2)
   2b8dc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2b8e0:	e0bff917 	ldw	r2,-28(fp)
   2b8e4:	10800090 	cmplti	r2,r2,2
   2b8e8:	1000071e 	bne	r2,zero,2b908 <altera_avalon_jtag_uart_ioctl+0x8c>
   2b8ec:	e0fff917 	ldw	r3,-28(fp)
   2b8f0:	00a00034 	movhi	r2,32768
   2b8f4:	10bfffc4 	addi	r2,r2,-1
   2b8f8:	18800326 	beq	r3,r2,2b908 <altera_avalon_jtag_uart_ioctl+0x8c>
   2b8fc:	e0bff917 	ldw	r2,-28(fp)
   2b900:	e0bffe15 	stw	r2,-8(fp)
   2b904:	00000306 	br	2b914 <altera_avalon_jtag_uart_ioctl+0x98>
   2b908:	00e00034 	movhi	r3,32768
   2b90c:	18ffff84 	addi	r3,r3,-2
   2b910:	e0fffe15 	stw	r3,-8(fp)
   2b914:	e0bffb17 	ldw	r2,-20(fp)
   2b918:	e0fffe17 	ldw	r3,-8(fp)
   2b91c:	10c00115 	stw	r3,4(r2)
      rc = 0;
   2b920:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   2b924:	00000d06 	br	2b95c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2b928:	e0bffb17 	ldw	r2,-20(fp)
   2b92c:	10c00117 	ldw	r3,4(r2)
   2b930:	00a00034 	movhi	r2,32768
   2b934:	10bfffc4 	addi	r2,r2,-1
   2b938:	18800826 	beq	r3,r2,2b95c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2b93c:	e13ffd17 	ldw	r4,-12(fp)
   2b940:	e0bffb17 	ldw	r2,-20(fp)
   2b944:	10c00917 	ldw	r3,36(r2)
   2b948:	e0bffb17 	ldw	r2,-20(fp)
   2b94c:	10800117 	ldw	r2,4(r2)
   2b950:	1885803a 	cmpltu	r2,r3,r2
   2b954:	20800015 	stw	r2,0(r4)
      rc = 0;
   2b958:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   2b95c:	e0bffa17 	ldw	r2,-24(fp)
}
   2b960:	e037883a 	mov	sp,fp
   2b964:	df000017 	ldw	fp,0(sp)
   2b968:	dec00104 	addi	sp,sp,4
   2b96c:	f800283a 	ret

0002b970 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2b970:	defff204 	addi	sp,sp,-56
   2b974:	dfc00d15 	stw	ra,52(sp)
   2b978:	df000c15 	stw	fp,48(sp)
   2b97c:	df000c04 	addi	fp,sp,48
   2b980:	e13ffb15 	stw	r4,-20(fp)
   2b984:	e17ffc15 	stw	r5,-16(fp)
   2b988:	e1bffd15 	stw	r6,-12(fp)
   2b98c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   2b990:	e0bffc17 	ldw	r2,-16(fp)
   2b994:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b998:	00004806 	br	2babc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2b99c:	e0bffb17 	ldw	r2,-20(fp)
   2b9a0:	10800a17 	ldw	r2,40(r2)
   2b9a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2b9a8:	e0bffb17 	ldw	r2,-20(fp)
   2b9ac:	10800b17 	ldw	r2,44(r2)
   2b9b0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   2b9b4:	e0fff717 	ldw	r3,-36(fp)
   2b9b8:	e0bff617 	ldw	r2,-40(fp)
   2b9bc:	18800536 	bltu	r3,r2,2b9d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2b9c0:	e0bff717 	ldw	r2,-36(fp)
   2b9c4:	e0fff617 	ldw	r3,-40(fp)
   2b9c8:	10c5c83a 	sub	r2,r2,r3
   2b9cc:	e0bff815 	stw	r2,-32(fp)
   2b9d0:	00000406 	br	2b9e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2b9d4:	00820004 	movi	r2,2048
   2b9d8:	e0fff617 	ldw	r3,-40(fp)
   2b9dc:	10c5c83a 	sub	r2,r2,r3
   2b9e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   2b9e4:	e0bff817 	ldw	r2,-32(fp)
   2b9e8:	1005003a 	cmpeq	r2,r2,zero
   2b9ec:	10001f1e 	bne	r2,zero,2ba6c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   2b9f0:	e0fffd17 	ldw	r3,-12(fp)
   2b9f4:	e0bff817 	ldw	r2,-32(fp)
   2b9f8:	1880022e 	bgeu	r3,r2,2ba04 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   2b9fc:	e0bffd17 	ldw	r2,-12(fp)
   2ba00:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2ba04:	e0bffb17 	ldw	r2,-20(fp)
   2ba08:	10c00e04 	addi	r3,r2,56
   2ba0c:	e0bff617 	ldw	r2,-40(fp)
   2ba10:	1887883a 	add	r3,r3,r2
   2ba14:	e0bffa17 	ldw	r2,-24(fp)
   2ba18:	1009883a 	mov	r4,r2
   2ba1c:	180b883a 	mov	r5,r3
   2ba20:	e1bff817 	ldw	r6,-32(fp)
   2ba24:	00264d80 	call	264d8 <memcpy>
      ptr   += n;
   2ba28:	e0fff817 	ldw	r3,-32(fp)
   2ba2c:	e0bffa17 	ldw	r2,-24(fp)
   2ba30:	10c5883a 	add	r2,r2,r3
   2ba34:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   2ba38:	e0fffd17 	ldw	r3,-12(fp)
   2ba3c:	e0bff817 	ldw	r2,-32(fp)
   2ba40:	1885c83a 	sub	r2,r3,r2
   2ba44:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ba48:	e0fff617 	ldw	r3,-40(fp)
   2ba4c:	e0bff817 	ldw	r2,-32(fp)
   2ba50:	1885883a 	add	r2,r3,r2
   2ba54:	10c1ffcc 	andi	r3,r2,2047
   2ba58:	e0bffb17 	ldw	r2,-20(fp)
   2ba5c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2ba60:	e0bffd17 	ldw	r2,-12(fp)
   2ba64:	10800048 	cmpgei	r2,r2,1
   2ba68:	103fcc1e 	bne	r2,zero,2b99c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   2ba6c:	e0fffa17 	ldw	r3,-24(fp)
   2ba70:	e0bffc17 	ldw	r2,-16(fp)
   2ba74:	1880141e 	bne	r3,r2,2bac8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2ba78:	e0bffe17 	ldw	r2,-8(fp)
   2ba7c:	1090000c 	andi	r2,r2,16384
   2ba80:	1004c03a 	cmpne	r2,r2,zero
   2ba84:	1000101e 	bne	r2,zero,2bac8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2ba88:	e0bffb17 	ldw	r2,-20(fp)
   2ba8c:	10c00a17 	ldw	r3,40(r2)
   2ba90:	e0bff717 	ldw	r2,-36(fp)
   2ba94:	1880051e 	bne	r3,r2,2baac <altera_avalon_jtag_uart_read+0x13c>
   2ba98:	e0bffb17 	ldw	r2,-20(fp)
   2ba9c:	10c00917 	ldw	r3,36(r2)
   2baa0:	e0bffb17 	ldw	r2,-20(fp)
   2baa4:	10800117 	ldw	r2,4(r2)
   2baa8:	18bff736 	bltu	r3,r2,2ba88 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2baac:	e0bffb17 	ldw	r2,-20(fp)
   2bab0:	10c00a17 	ldw	r3,40(r2)
   2bab4:	e0bff717 	ldw	r2,-36(fp)
   2bab8:	18800326 	beq	r3,r2,2bac8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2babc:	e0bffd17 	ldw	r2,-12(fp)
   2bac0:	10800048 	cmpgei	r2,r2,1
   2bac4:	103fb51e 	bne	r2,zero,2b99c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2bac8:	e0fffa17 	ldw	r3,-24(fp)
   2bacc:	e0bffc17 	ldw	r2,-16(fp)
   2bad0:	18801926 	beq	r3,r2,2bb38 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bad4:	0005303a 	rdctl	r2,status
   2bad8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2badc:	e0fff517 	ldw	r3,-44(fp)
   2bae0:	00bfff84 	movi	r2,-2
   2bae4:	1884703a 	and	r2,r3,r2
   2bae8:	1001703a 	wrctl	status,r2
  
  return context;
   2baec:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2baf0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2baf4:	e0bffb17 	ldw	r2,-20(fp)
   2baf8:	10800817 	ldw	r2,32(r2)
   2bafc:	10c00054 	ori	r3,r2,1
   2bb00:	e0bffb17 	ldw	r2,-20(fp)
   2bb04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2bb08:	e0bffb17 	ldw	r2,-20(fp)
   2bb0c:	10800017 	ldw	r2,0(r2)
   2bb10:	11000104 	addi	r4,r2,4
   2bb14:	e0bffb17 	ldw	r2,-20(fp)
   2bb18:	10800817 	ldw	r2,32(r2)
   2bb1c:	1007883a 	mov	r3,r2
   2bb20:	2005883a 	mov	r2,r4
   2bb24:	10c00035 	stwio	r3,0(r2)
   2bb28:	e0bff917 	ldw	r2,-28(fp)
   2bb2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bb30:	e0bff417 	ldw	r2,-48(fp)
   2bb34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2bb38:	e0fffa17 	ldw	r3,-24(fp)
   2bb3c:	e0bffc17 	ldw	r2,-16(fp)
   2bb40:	18800526 	beq	r3,r2,2bb58 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   2bb44:	e0fffa17 	ldw	r3,-24(fp)
   2bb48:	e0bffc17 	ldw	r2,-16(fp)
   2bb4c:	1887c83a 	sub	r3,r3,r2
   2bb50:	e0ffff15 	stw	r3,-4(fp)
   2bb54:	00000906 	br	2bb7c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   2bb58:	e0bffe17 	ldw	r2,-8(fp)
   2bb5c:	1090000c 	andi	r2,r2,16384
   2bb60:	1005003a 	cmpeq	r2,r2,zero
   2bb64:	1000031e 	bne	r2,zero,2bb74 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2bb68:	00bffd44 	movi	r2,-11
   2bb6c:	e0bfff15 	stw	r2,-4(fp)
   2bb70:	00000206 	br	2bb7c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   2bb74:	00bffec4 	movi	r2,-5
   2bb78:	e0bfff15 	stw	r2,-4(fp)
   2bb7c:	e0bfff17 	ldw	r2,-4(fp)
}
   2bb80:	e037883a 	mov	sp,fp
   2bb84:	dfc00117 	ldw	ra,4(sp)
   2bb88:	df000017 	ldw	fp,0(sp)
   2bb8c:	dec00204 	addi	sp,sp,8
   2bb90:	f800283a 	ret

0002bb94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2bb94:	defff204 	addi	sp,sp,-56
   2bb98:	dfc00d15 	stw	ra,52(sp)
   2bb9c:	df000c15 	stw	fp,48(sp)
   2bba0:	df000c04 	addi	fp,sp,48
   2bba4:	e13ffb15 	stw	r4,-20(fp)
   2bba8:	e17ffc15 	stw	r5,-16(fp)
   2bbac:	e1bffd15 	stw	r6,-12(fp)
   2bbb0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2bbb4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2bbb8:	e0bffc17 	ldw	r2,-16(fp)
   2bbbc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2bbc0:	00003a06 	br	2bcac <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2bbc4:	e0bffb17 	ldw	r2,-20(fp)
   2bbc8:	10800c17 	ldw	r2,48(r2)
   2bbcc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   2bbd0:	e0bffb17 	ldw	r2,-20(fp)
   2bbd4:	10800d17 	ldw	r2,52(r2)
   2bbd8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   2bbdc:	e0fffa17 	ldw	r3,-24(fp)
   2bbe0:	e0bff917 	ldw	r2,-28(fp)
   2bbe4:	1880062e 	bgeu	r3,r2,2bc00 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2bbe8:	e0fff917 	ldw	r3,-28(fp)
   2bbec:	e0bffa17 	ldw	r2,-24(fp)
   2bbf0:	1885c83a 	sub	r2,r3,r2
   2bbf4:	10bfffc4 	addi	r2,r2,-1
   2bbf8:	e0bff815 	stw	r2,-32(fp)
   2bbfc:	00000c06 	br	2bc30 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   2bc00:	e0bff917 	ldw	r2,-28(fp)
   2bc04:	1005003a 	cmpeq	r2,r2,zero
   2bc08:	1000051e 	bne	r2,zero,2bc20 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2bc0c:	00820004 	movi	r2,2048
   2bc10:	e0fffa17 	ldw	r3,-24(fp)
   2bc14:	10c5c83a 	sub	r2,r2,r3
   2bc18:	e0bff815 	stw	r2,-32(fp)
   2bc1c:	00000406 	br	2bc30 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2bc20:	0081ffc4 	movi	r2,2047
   2bc24:	e0fffa17 	ldw	r3,-24(fp)
   2bc28:	10c5c83a 	sub	r2,r2,r3
   2bc2c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   2bc30:	e0bff817 	ldw	r2,-32(fp)
   2bc34:	1005003a 	cmpeq	r2,r2,zero
   2bc38:	10001f1e 	bne	r2,zero,2bcb8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   2bc3c:	e0fffd17 	ldw	r3,-12(fp)
   2bc40:	e0bff817 	ldw	r2,-32(fp)
   2bc44:	1880022e 	bgeu	r3,r2,2bc50 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   2bc48:	e0bffd17 	ldw	r2,-12(fp)
   2bc4c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2bc50:	e0bffb17 	ldw	r2,-20(fp)
   2bc54:	10c20e04 	addi	r3,r2,2104
   2bc58:	e0bffa17 	ldw	r2,-24(fp)
   2bc5c:	1885883a 	add	r2,r3,r2
   2bc60:	e0fffc17 	ldw	r3,-16(fp)
   2bc64:	1009883a 	mov	r4,r2
   2bc68:	180b883a 	mov	r5,r3
   2bc6c:	e1bff817 	ldw	r6,-32(fp)
   2bc70:	00264d80 	call	264d8 <memcpy>
      ptr   += n;
   2bc74:	e0fff817 	ldw	r3,-32(fp)
   2bc78:	e0bffc17 	ldw	r2,-16(fp)
   2bc7c:	10c5883a 	add	r2,r2,r3
   2bc80:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   2bc84:	e0fffd17 	ldw	r3,-12(fp)
   2bc88:	e0bff817 	ldw	r2,-32(fp)
   2bc8c:	1885c83a 	sub	r2,r3,r2
   2bc90:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2bc94:	e0fffa17 	ldw	r3,-24(fp)
   2bc98:	e0bff817 	ldw	r2,-32(fp)
   2bc9c:	1885883a 	add	r2,r3,r2
   2bca0:	10c1ffcc 	andi	r3,r2,2047
   2bca4:	e0bffb17 	ldw	r2,-20(fp)
   2bca8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2bcac:	e0bffd17 	ldw	r2,-12(fp)
   2bcb0:	10800048 	cmpgei	r2,r2,1
   2bcb4:	103fc31e 	bne	r2,zero,2bbc4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bcb8:	0005303a 	rdctl	r2,status
   2bcbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bcc0:	e0fff517 	ldw	r3,-44(fp)
   2bcc4:	00bfff84 	movi	r2,-2
   2bcc8:	1884703a 	and	r2,r3,r2
   2bccc:	1001703a 	wrctl	status,r2
  
  return context;
   2bcd0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2bcd4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2bcd8:	e0bffb17 	ldw	r2,-20(fp)
   2bcdc:	10800817 	ldw	r2,32(r2)
   2bce0:	10c00094 	ori	r3,r2,2
   2bce4:	e0bffb17 	ldw	r2,-20(fp)
   2bce8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2bcec:	e0bffb17 	ldw	r2,-20(fp)
   2bcf0:	10800017 	ldw	r2,0(r2)
   2bcf4:	11000104 	addi	r4,r2,4
   2bcf8:	e0bffb17 	ldw	r2,-20(fp)
   2bcfc:	10800817 	ldw	r2,32(r2)
   2bd00:	1007883a 	mov	r3,r2
   2bd04:	2005883a 	mov	r2,r4
   2bd08:	10c00035 	stwio	r3,0(r2)
   2bd0c:	e0bff717 	ldw	r2,-36(fp)
   2bd10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bd14:	e0bff417 	ldw	r2,-48(fp)
   2bd18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2bd1c:	e0bffd17 	ldw	r2,-12(fp)
   2bd20:	10800050 	cmplti	r2,r2,1
   2bd24:	1000111e 	bne	r2,zero,2bd6c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   2bd28:	e0bffe17 	ldw	r2,-8(fp)
   2bd2c:	1090000c 	andi	r2,r2,16384
   2bd30:	1004c03a 	cmpne	r2,r2,zero
   2bd34:	1000101e 	bne	r2,zero,2bd78 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2bd38:	e0bffb17 	ldw	r2,-20(fp)
   2bd3c:	10c00d17 	ldw	r3,52(r2)
   2bd40:	e0bff917 	ldw	r2,-28(fp)
   2bd44:	1880051e 	bne	r3,r2,2bd5c <altera_avalon_jtag_uart_write+0x1c8>
   2bd48:	e0bffb17 	ldw	r2,-20(fp)
   2bd4c:	10c00917 	ldw	r3,36(r2)
   2bd50:	e0bffb17 	ldw	r2,-20(fp)
   2bd54:	10800117 	ldw	r2,4(r2)
   2bd58:	18bff736 	bltu	r3,r2,2bd38 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2bd5c:	e0bffb17 	ldw	r2,-20(fp)
   2bd60:	10c00d17 	ldw	r3,52(r2)
   2bd64:	e0bff917 	ldw	r2,-28(fp)
   2bd68:	18800326 	beq	r3,r2,2bd78 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   2bd6c:	e0bffd17 	ldw	r2,-12(fp)
   2bd70:	10800048 	cmpgei	r2,r2,1
   2bd74:	103fcd1e 	bne	r2,zero,2bcac <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2bd78:	e0fffc17 	ldw	r3,-16(fp)
   2bd7c:	e0bff617 	ldw	r2,-40(fp)
   2bd80:	18800526 	beq	r3,r2,2bd98 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   2bd84:	e0fffc17 	ldw	r3,-16(fp)
   2bd88:	e0bff617 	ldw	r2,-40(fp)
   2bd8c:	1887c83a 	sub	r3,r3,r2
   2bd90:	e0ffff15 	stw	r3,-4(fp)
   2bd94:	00000906 	br	2bdbc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   2bd98:	e0bffe17 	ldw	r2,-8(fp)
   2bd9c:	1090000c 	andi	r2,r2,16384
   2bda0:	1005003a 	cmpeq	r2,r2,zero
   2bda4:	1000031e 	bne	r2,zero,2bdb4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   2bda8:	00bffd44 	movi	r2,-11
   2bdac:	e0bfff15 	stw	r2,-4(fp)
   2bdb0:	00000206 	br	2bdbc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   2bdb4:	00bffec4 	movi	r2,-5
   2bdb8:	e0bfff15 	stw	r2,-4(fp)
   2bdbc:	e0bfff17 	ldw	r2,-4(fp)
}
   2bdc0:	e037883a 	mov	sp,fp
   2bdc4:	dfc00117 	ldw	ra,4(sp)
   2bdc8:	df000017 	ldw	fp,0(sp)
   2bdcc:	dec00204 	addi	sp,sp,8
   2bdd0:	f800283a 	ret

0002bdd4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   2bdd4:	defffa04 	addi	sp,sp,-24
   2bdd8:	dfc00515 	stw	ra,20(sp)
   2bddc:	df000415 	stw	fp,16(sp)
   2bde0:	df000404 	addi	fp,sp,16
   2bde4:	e13ffe15 	stw	r4,-8(fp)
   2bde8:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   2bdec:	e0bffe17 	ldw	r2,-8(fp)
   2bdf0:	10800017 	ldw	r2,0(r2)
   2bdf4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   2bdf8:	008003f4 	movhi	r2,15
   2bdfc:	10909004 	addi	r2,r2,16960
   2be00:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   2be04:	e0bffe17 	ldw	r2,-8(fp)
   2be08:	10800803 	ldbu	r2,32(r2)
   2be0c:	10803fcc 	andi	r2,r2,255
   2be10:	1080201c 	xori	r2,r2,128
   2be14:	10bfe004 	addi	r2,r2,-128
   2be18:	1004c03a 	cmpne	r2,r2,zero
   2be1c:	1000161e 	bne	r2,zero,2be78 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2be20:	00000a06 	br	2be4c <lcd_write_command+0x78>
    if (--i == 0)
   2be24:	e0bffc17 	ldw	r2,-16(fp)
   2be28:	10bfffc4 	addi	r2,r2,-1
   2be2c:	e0bffc15 	stw	r2,-16(fp)
   2be30:	e0bffc17 	ldw	r2,-16(fp)
   2be34:	1004c03a 	cmpne	r2,r2,zero
   2be38:	1000041e 	bne	r2,zero,2be4c <lcd_write_command+0x78>
    {
      sp->broken = 1;
   2be3c:	e0fffe17 	ldw	r3,-8(fp)
   2be40:	00800044 	movi	r2,1
   2be44:	18800805 	stb	r2,32(r3)
      return;
   2be48:	00000b06 	br	2be78 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2be4c:	e0bffd17 	ldw	r2,-12(fp)
   2be50:	10800104 	addi	r2,r2,4
   2be54:	10800037 	ldwio	r2,0(r2)
   2be58:	1080200c 	andi	r2,r2,128
   2be5c:	1004c03a 	cmpne	r2,r2,zero
   2be60:	103ff01e 	bne	r2,zero,2be24 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   2be64:	01001904 	movi	r4,100
   2be68:	002e3800 	call	2e380 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   2be6c:	e0bffd17 	ldw	r2,-12(fp)
   2be70:	e0ffff03 	ldbu	r3,-4(fp)
   2be74:	10c00035 	stwio	r3,0(r2)
}
   2be78:	e037883a 	mov	sp,fp
   2be7c:	dfc00117 	ldw	ra,4(sp)
   2be80:	df000017 	ldw	fp,0(sp)
   2be84:	dec00204 	addi	sp,sp,8
   2be88:	f800283a 	ret

0002be8c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   2be8c:	defffa04 	addi	sp,sp,-24
   2be90:	dfc00515 	stw	ra,20(sp)
   2be94:	df000415 	stw	fp,16(sp)
   2be98:	df000404 	addi	fp,sp,16
   2be9c:	e13ffe15 	stw	r4,-8(fp)
   2bea0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
   2bea4:	e0bffe17 	ldw	r2,-8(fp)
   2bea8:	10800017 	ldw	r2,0(r2)
   2beac:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   2beb0:	008003f4 	movhi	r2,15
   2beb4:	10909004 	addi	r2,r2,16960
   2beb8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   2bebc:	e0bffe17 	ldw	r2,-8(fp)
   2bec0:	10800803 	ldbu	r2,32(r2)
   2bec4:	10803fcc 	andi	r2,r2,255
   2bec8:	1080201c 	xori	r2,r2,128
   2becc:	10bfe004 	addi	r2,r2,-128
   2bed0:	1004c03a 	cmpne	r2,r2,zero
   2bed4:	10001d1e 	bne	r2,zero,2bf4c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2bed8:	00000a06 	br	2bf04 <lcd_write_data+0x78>
    if (--i == 0)
   2bedc:	e0bffc17 	ldw	r2,-16(fp)
   2bee0:	10bfffc4 	addi	r2,r2,-1
   2bee4:	e0bffc15 	stw	r2,-16(fp)
   2bee8:	e0bffc17 	ldw	r2,-16(fp)
   2beec:	1004c03a 	cmpne	r2,r2,zero
   2bef0:	1000041e 	bne	r2,zero,2bf04 <lcd_write_data+0x78>
    {
      sp->broken = 1;
   2bef4:	e0fffe17 	ldw	r3,-8(fp)
   2bef8:	00800044 	movi	r2,1
   2befc:	18800805 	stb	r2,32(r3)
      return;
   2bf00:	00001206 	br	2bf4c <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   2bf04:	e0bffd17 	ldw	r2,-12(fp)
   2bf08:	10800104 	addi	r2,r2,4
   2bf0c:	10800037 	ldwio	r2,0(r2)
   2bf10:	1080200c 	andi	r2,r2,128
   2bf14:	1004c03a 	cmpne	r2,r2,zero
   2bf18:	103ff01e 	bne	r2,zero,2bedc <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   2bf1c:	01001904 	movi	r4,100
   2bf20:	002e3800 	call	2e380 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   2bf24:	e0bffd17 	ldw	r2,-12(fp)
   2bf28:	10800204 	addi	r2,r2,8
   2bf2c:	e0ffff03 	ldbu	r3,-4(fp)
   2bf30:	10c00035 	stwio	r3,0(r2)

  sp->address++;
   2bf34:	e0bffe17 	ldw	r2,-8(fp)
   2bf38:	108008c3 	ldbu	r2,35(r2)
   2bf3c:	10800044 	addi	r2,r2,1
   2bf40:	1007883a 	mov	r3,r2
   2bf44:	e0bffe17 	ldw	r2,-8(fp)
   2bf48:	10c008c5 	stb	r3,35(r2)
}
   2bf4c:	e037883a 	mov	sp,fp
   2bf50:	dfc00117 	ldw	ra,4(sp)
   2bf54:	df000017 	ldw	fp,0(sp)
   2bf58:	dec00204 	addi	sp,sp,8
   2bf5c:	f800283a 	ret

0002bf60 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   2bf60:	defffc04 	addi	sp,sp,-16
   2bf64:	dfc00315 	stw	ra,12(sp)
   2bf68:	df000215 	stw	fp,8(sp)
   2bf6c:	df000204 	addi	fp,sp,8
   2bf70:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   2bf74:	e13fff17 	ldw	r4,-4(fp)
   2bf78:	01400044 	movi	r5,1
   2bf7c:	002bdd40 	call	2bdd4 <lcd_write_command>

  sp->x = 0;
   2bf80:	e0bfff17 	ldw	r2,-4(fp)
   2bf84:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   2bf88:	e0bfff17 	ldw	r2,-4(fp)
   2bf8c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   2bf90:	e0bfff17 	ldw	r2,-4(fp)
   2bf94:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2bf98:	e03ffe15 	stw	zero,-8(fp)
   2bf9c:	00001906 	br	2c004 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   2bfa0:	e0bffe17 	ldw	r2,-8(fp)
   2bfa4:	108018e4 	muli	r2,r2,99
   2bfa8:	10c01004 	addi	r3,r2,64
   2bfac:	e0bfff17 	ldw	r2,-4(fp)
   2bfb0:	1889883a 	add	r4,r3,r2
   2bfb4:	01400804 	movi	r5,32
   2bfb8:	01801444 	movi	r6,81
   2bfbc:	00266580 	call	26658 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   2bfc0:	e0bffe17 	ldw	r2,-8(fp)
   2bfc4:	108018e4 	muli	r2,r2,99
   2bfc8:	10c00c04 	addi	r3,r2,48
   2bfcc:	e0bfff17 	ldw	r2,-4(fp)
   2bfd0:	1889883a 	add	r4,r3,r2
   2bfd4:	01400804 	movi	r5,32
   2bfd8:	01800404 	movi	r6,16
   2bfdc:	00266580 	call	26658 <memset>
    sp->line[y].width = 0;
   2bfe0:	e0bffe17 	ldw	r2,-8(fp)
   2bfe4:	e0ffff17 	ldw	r3,-4(fp)
   2bfe8:	108018e4 	muli	r2,r2,99
   2bfec:	10c5883a 	add	r2,r2,r3
   2bff0:	10802404 	addi	r2,r2,144
   2bff4:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2bff8:	e0bffe17 	ldw	r2,-8(fp)
   2bffc:	10800044 	addi	r2,r2,1
   2c000:	e0bffe15 	stw	r2,-8(fp)
   2c004:	e0bffe17 	ldw	r2,-8(fp)
   2c008:	10800090 	cmplti	r2,r2,2
   2c00c:	103fe41e 	bne	r2,zero,2bfa0 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   2c010:	e037883a 	mov	sp,fp
   2c014:	dfc00117 	ldw	ra,4(sp)
   2c018:	df000017 	ldw	fp,0(sp)
   2c01c:	dec00204 	addi	sp,sp,8
   2c020:	f800283a 	ret

0002c024 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   2c024:	defff604 	addi	sp,sp,-40
   2c028:	dfc00915 	stw	ra,36(sp)
   2c02c:	df000815 	stw	fp,32(sp)
   2c030:	dc000715 	stw	r16,28(sp)
   2c034:	df000704 	addi	fp,sp,28
   2c038:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   2c03c:	e0bfff17 	ldw	r2,-4(fp)
   2c040:	10800943 	ldbu	r2,37(r2)
   2c044:	10803fcc 	andi	r2,r2,255
   2c048:	1080201c 	xori	r2,r2,128
   2c04c:	10bfe004 	addi	r2,r2,-128
   2c050:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2c054:	e03ffe15 	stw	zero,-8(fp)
   2c058:	00006406 	br	2c1ec <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
   2c05c:	e0bffe17 	ldw	r2,-8(fp)
   2c060:	e0ffff17 	ldw	r3,-4(fp)
   2c064:	108018e4 	muli	r2,r2,99
   2c068:	10c5883a 	add	r2,r2,r3
   2c06c:	10802404 	addi	r2,r2,144
   2c070:	10800043 	ldbu	r2,1(r2)
   2c074:	10803fcc 	andi	r2,r2,255
   2c078:	1080201c 	xori	r2,r2,128
   2c07c:	10bfe004 	addi	r2,r2,-128
   2c080:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   2c084:	e0bffe17 	ldw	r2,-8(fp)
   2c088:	e0ffff17 	ldw	r3,-4(fp)
   2c08c:	108018e4 	muli	r2,r2,99
   2c090:	10c5883a 	add	r2,r2,r3
   2c094:	10802404 	addi	r2,r2,144
   2c098:	10800083 	ldbu	r2,2(r2)
   2c09c:	10c03fcc 	andi	r3,r2,255
   2c0a0:	e0bffc17 	ldw	r2,-16(fp)
   2c0a4:	1885383a 	mul	r2,r3,r2
   2c0a8:	1005d23a 	srai	r2,r2,8
   2c0ac:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
   2c0b0:	e0fffa17 	ldw	r3,-24(fp)
   2c0b4:	e0bffb17 	ldw	r2,-20(fp)
   2c0b8:	18800116 	blt	r3,r2,2c0c0 <lcd_repaint_screen+0x9c>
      offset = 0;
   2c0bc:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   2c0c0:	e03ffd15 	stw	zero,-12(fp)
   2c0c4:	00004306 	br	2c1d4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
   2c0c8:	e43ffe17 	ldw	r16,-8(fp)
   2c0cc:	e0fffd17 	ldw	r3,-12(fp)
   2c0d0:	e0bffa17 	ldw	r2,-24(fp)
   2c0d4:	1889883a 	add	r4,r3,r2
   2c0d8:	e17ffb17 	ldw	r5,-20(fp)
   2c0dc:	0029de80 	call	29de8 <__modsi3>
   2c0e0:	1009883a 	mov	r4,r2
   2c0e4:	e0ffff17 	ldw	r3,-4(fp)
   2c0e8:	808018e4 	muli	r2,r16,99
   2c0ec:	10c5883a 	add	r2,r2,r3
   2c0f0:	1105883a 	add	r2,r2,r4
   2c0f4:	10801004 	addi	r2,r2,64
   2c0f8:	10800003 	ldbu	r2,0(r2)
   2c0fc:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   2c100:	e0bffe17 	ldw	r2,-8(fp)
   2c104:	e13ffd17 	ldw	r4,-12(fp)
   2c108:	e0ffff17 	ldw	r3,-4(fp)
   2c10c:	108018e4 	muli	r2,r2,99
   2c110:	10c5883a 	add	r2,r2,r3
   2c114:	1105883a 	add	r2,r2,r4
   2c118:	10800c04 	addi	r2,r2,48
   2c11c:	10800003 	ldbu	r2,0(r2)
   2c120:	10c03fcc 	andi	r3,r2,255
   2c124:	18c0201c 	xori	r3,r3,128
   2c128:	18ffe004 	addi	r3,r3,-128
   2c12c:	e0bff947 	ldb	r2,-27(fp)
   2c130:	18802526 	beq	r3,r2,2c1c8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
   2c134:	e0fffe17 	ldw	r3,-8(fp)
   2c138:	d0a00d04 	addi	r2,gp,-32716
   2c13c:	1885883a 	add	r2,r3,r2
   2c140:	10800003 	ldbu	r2,0(r2)
   2c144:	1007883a 	mov	r3,r2
   2c148:	e0bffd17 	ldw	r2,-12(fp)
   2c14c:	1885883a 	add	r2,r3,r2
   2c150:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
   2c154:	e0fff903 	ldbu	r3,-28(fp)
   2c158:	e0bfff17 	ldw	r2,-4(fp)
   2c15c:	108008c3 	ldbu	r2,35(r2)
   2c160:	10803fcc 	andi	r2,r2,255
   2c164:	1080201c 	xori	r2,r2,128
   2c168:	10bfe004 	addi	r2,r2,-128
   2c16c:	18800926 	beq	r3,r2,2c194 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   2c170:	e0fff903 	ldbu	r3,-28(fp)
   2c174:	00bfe004 	movi	r2,-128
   2c178:	1884b03a 	or	r2,r3,r2
   2c17c:	11403fcc 	andi	r5,r2,255
   2c180:	e13fff17 	ldw	r4,-4(fp)
   2c184:	002bdd40 	call	2bdd4 <lcd_write_command>
          sp->address = address;
   2c188:	e0fff903 	ldbu	r3,-28(fp)
   2c18c:	e0bfff17 	ldw	r2,-4(fp)
   2c190:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   2c194:	e0bff943 	ldbu	r2,-27(fp)
   2c198:	11403fcc 	andi	r5,r2,255
   2c19c:	e13fff17 	ldw	r4,-4(fp)
   2c1a0:	002be8c0 	call	2be8c <lcd_write_data>
        sp->line[y].visible[x] = c;
   2c1a4:	e0bffe17 	ldw	r2,-8(fp)
   2c1a8:	e13ffd17 	ldw	r4,-12(fp)
   2c1ac:	e0ffff17 	ldw	r3,-4(fp)
   2c1b0:	108018e4 	muli	r2,r2,99
   2c1b4:	10c5883a 	add	r2,r2,r3
   2c1b8:	1105883a 	add	r2,r2,r4
   2c1bc:	10c00c04 	addi	r3,r2,48
   2c1c0:	e0bff943 	ldbu	r2,-27(fp)
   2c1c4:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   2c1c8:	e0bffd17 	ldw	r2,-12(fp)
   2c1cc:	10800044 	addi	r2,r2,1
   2c1d0:	e0bffd15 	stw	r2,-12(fp)
   2c1d4:	e0bffd17 	ldw	r2,-12(fp)
   2c1d8:	10800410 	cmplti	r2,r2,16
   2c1dc:	103fba1e 	bne	r2,zero,2c0c8 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2c1e0:	e0bffe17 	ldw	r2,-8(fp)
   2c1e4:	10800044 	addi	r2,r2,1
   2c1e8:	e0bffe15 	stw	r2,-8(fp)
   2c1ec:	e0bffe17 	ldw	r2,-8(fp)
   2c1f0:	10800090 	cmplti	r2,r2,2
   2c1f4:	103f991e 	bne	r2,zero,2c05c <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   2c1f8:	e037883a 	mov	sp,fp
   2c1fc:	dfc00217 	ldw	ra,8(sp)
   2c200:	df000117 	ldw	fp,4(sp)
   2c204:	dc000017 	ldw	r16,0(sp)
   2c208:	dec00304 	addi	sp,sp,12
   2c20c:	f800283a 	ret

0002c210 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   2c210:	defffc04 	addi	sp,sp,-16
   2c214:	dfc00315 	stw	ra,12(sp)
   2c218:	df000215 	stw	fp,8(sp)
   2c21c:	df000204 	addi	fp,sp,8
   2c220:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2c224:	e03ffe15 	stw	zero,-8(fp)
   2c228:	00001d06 	br	2c2a0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
   2c22c:	e0bffe17 	ldw	r2,-8(fp)
   2c230:	10800048 	cmpgei	r2,r2,1
   2c234:	10000f1e 	bne	r2,zero,2c274 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   2c238:	e0bffe17 	ldw	r2,-8(fp)
   2c23c:	108018e4 	muli	r2,r2,99
   2c240:	10c01004 	addi	r3,r2,64
   2c244:	e0bfff17 	ldw	r2,-4(fp)
   2c248:	1889883a 	add	r4,r3,r2
   2c24c:	e0bffe17 	ldw	r2,-8(fp)
   2c250:	10800044 	addi	r2,r2,1
   2c254:	108018e4 	muli	r2,r2,99
   2c258:	10c01004 	addi	r3,r2,64
   2c25c:	e0bfff17 	ldw	r2,-4(fp)
   2c260:	1885883a 	add	r2,r3,r2
   2c264:	100b883a 	mov	r5,r2
   2c268:	01801404 	movi	r6,80
   2c26c:	00264d80 	call	264d8 <memcpy>
   2c270:	00000806 	br	2c294 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   2c274:	e0bffe17 	ldw	r2,-8(fp)
   2c278:	108018e4 	muli	r2,r2,99
   2c27c:	10c01004 	addi	r3,r2,64
   2c280:	e0bfff17 	ldw	r2,-4(fp)
   2c284:	1889883a 	add	r4,r3,r2
   2c288:	01400804 	movi	r5,32
   2c28c:	01801404 	movi	r6,80
   2c290:	00266580 	call	26658 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2c294:	e0bffe17 	ldw	r2,-8(fp)
   2c298:	10800044 	addi	r2,r2,1
   2c29c:	e0bffe15 	stw	r2,-8(fp)
   2c2a0:	e0bffe17 	ldw	r2,-8(fp)
   2c2a4:	10800090 	cmplti	r2,r2,2
   2c2a8:	103fe01e 	bne	r2,zero,2c22c <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   2c2ac:	e0bfff17 	ldw	r2,-4(fp)
   2c2b0:	10800883 	ldbu	r2,34(r2)
   2c2b4:	10bfffc4 	addi	r2,r2,-1
   2c2b8:	1007883a 	mov	r3,r2
   2c2bc:	e0bfff17 	ldw	r2,-4(fp)
   2c2c0:	10c00885 	stb	r3,34(r2)
}
   2c2c4:	e037883a 	mov	sp,fp
   2c2c8:	dfc00117 	ldw	ra,4(sp)
   2c2cc:	df000017 	ldw	fp,0(sp)
   2c2d0:	dec00204 	addi	sp,sp,8
   2c2d4:	f800283a 	ret

0002c2d8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   2c2d8:	defff804 	addi	sp,sp,-32
   2c2dc:	dfc00715 	stw	ra,28(sp)
   2c2e0:	df000615 	stw	fp,24(sp)
   2c2e4:	df000604 	addi	fp,sp,24
   2c2e8:	e13ffd15 	stw	r4,-12(fp)
   2c2ec:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
   2c2f0:	e03ffc15 	stw	zero,-16(fp)
   2c2f4:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
   2c2f8:	e0bffd17 	ldw	r2,-12(fp)
   2c2fc:	10800a03 	ldbu	r2,40(r2)
   2c300:	10803fcc 	andi	r2,r2,255
   2c304:	1080201c 	xori	r2,r2,128
   2c308:	10bfe004 	addi	r2,r2,-128
   2c30c:	108016d8 	cmpnei	r2,r2,91
   2c310:	1000491e 	bne	r2,zero,2c438 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
   2c314:	e0bffd17 	ldw	r2,-12(fp)
   2c318:	10800a04 	addi	r2,r2,40
   2c31c:	10800044 	addi	r2,r2,1
   2c320:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
   2c324:	00000d06 	br	2c35c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   2c328:	e0bffc17 	ldw	r2,-16(fp)
   2c32c:	10c002a4 	muli	r3,r2,10
   2c330:	e0bffa17 	ldw	r2,-24(fp)
   2c334:	10800003 	ldbu	r2,0(r2)
   2c338:	10803fcc 	andi	r2,r2,255
   2c33c:	1080201c 	xori	r2,r2,128
   2c340:	10bfe004 	addi	r2,r2,-128
   2c344:	1885883a 	add	r2,r3,r2
   2c348:	10bff404 	addi	r2,r2,-48
   2c34c:	e0bffc15 	stw	r2,-16(fp)
   2c350:	e0bffa17 	ldw	r2,-24(fp)
   2c354:	10800044 	addi	r2,r2,1
   2c358:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   2c35c:	e0bffa17 	ldw	r2,-24(fp)
   2c360:	10800003 	ldbu	r2,0(r2)
   2c364:	10803fcc 	andi	r2,r2,255
   2c368:	1080201c 	xori	r2,r2,128
   2c36c:	10bfe004 	addi	r2,r2,-128
   2c370:	1007883a 	mov	r3,r2
   2c374:	008000f4 	movhi	r2,3
   2c378:	10833e04 	addi	r2,r2,3320
   2c37c:	10800017 	ldw	r2,0(r2)
   2c380:	1885883a 	add	r2,r3,r2
   2c384:	10800003 	ldbu	r2,0(r2)
   2c388:	10803fcc 	andi	r2,r2,255
   2c38c:	1080010c 	andi	r2,r2,4
   2c390:	1004c03a 	cmpne	r2,r2,zero
   2c394:	103fe41e 	bne	r2,zero,2c328 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   2c398:	e0bffa17 	ldw	r2,-24(fp)
   2c39c:	10800003 	ldbu	r2,0(r2)
   2c3a0:	10803fcc 	andi	r2,r2,255
   2c3a4:	1080201c 	xori	r2,r2,128
   2c3a8:	10bfe004 	addi	r2,r2,-128
   2c3ac:	10800ed8 	cmpnei	r2,r2,59
   2c3b0:	1000231e 	bne	r2,zero,2c440 <lcd_handle_escape+0x168>
    {
      ptr++;
   2c3b4:	e0bffa17 	ldw	r2,-24(fp)
   2c3b8:	10800044 	addi	r2,r2,1
   2c3bc:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
   2c3c0:	00000d06 	br	2c3f8 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   2c3c4:	e0bffb17 	ldw	r2,-20(fp)
   2c3c8:	10c002a4 	muli	r3,r2,10
   2c3cc:	e0bffa17 	ldw	r2,-24(fp)
   2c3d0:	10800003 	ldbu	r2,0(r2)
   2c3d4:	10803fcc 	andi	r2,r2,255
   2c3d8:	1080201c 	xori	r2,r2,128
   2c3dc:	10bfe004 	addi	r2,r2,-128
   2c3e0:	1885883a 	add	r2,r3,r2
   2c3e4:	10bff404 	addi	r2,r2,-48
   2c3e8:	e0bffb15 	stw	r2,-20(fp)
   2c3ec:	e0bffa17 	ldw	r2,-24(fp)
   2c3f0:	10800044 	addi	r2,r2,1
   2c3f4:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   2c3f8:	e0bffa17 	ldw	r2,-24(fp)
   2c3fc:	10800003 	ldbu	r2,0(r2)
   2c400:	10803fcc 	andi	r2,r2,255
   2c404:	1080201c 	xori	r2,r2,128
   2c408:	10bfe004 	addi	r2,r2,-128
   2c40c:	1007883a 	mov	r3,r2
   2c410:	008000f4 	movhi	r2,3
   2c414:	10833e04 	addi	r2,r2,3320
   2c418:	10800017 	ldw	r2,0(r2)
   2c41c:	1885883a 	add	r2,r3,r2
   2c420:	10800003 	ldbu	r2,0(r2)
   2c424:	10803fcc 	andi	r2,r2,255
   2c428:	1080010c 	andi	r2,r2,4
   2c42c:	1004c03a 	cmpne	r2,r2,zero
   2c430:	103fe41e 	bne	r2,zero,2c3c4 <lcd_handle_escape+0xec>
   2c434:	00000206 	br	2c440 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   2c438:	00bfffc4 	movi	r2,-1
   2c43c:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
   2c440:	e0bffe07 	ldb	r2,-8(fp)
   2c444:	e0bfff15 	stw	r2,-4(fp)
   2c448:	e0ffff17 	ldw	r3,-4(fp)
   2c44c:	188012a0 	cmpeqi	r2,r3,74
   2c450:	10002f1e 	bne	r2,zero,2c510 <lcd_handle_escape+0x238>
   2c454:	e0ffff17 	ldw	r3,-4(fp)
   2c458:	188012c8 	cmpgei	r2,r3,75
   2c45c:	1000041e 	bne	r2,zero,2c470 <lcd_handle_escape+0x198>
   2c460:	e0ffff17 	ldw	r3,-4(fp)
   2c464:	18801220 	cmpeqi	r2,r3,72
   2c468:	1000081e 	bne	r2,zero,2c48c <lcd_handle_escape+0x1b4>
   2c46c:	00004906 	br	2c594 <lcd_handle_escape+0x2bc>
   2c470:	e0ffff17 	ldw	r3,-4(fp)
   2c474:	188012e0 	cmpeqi	r2,r3,75
   2c478:	10002b1e 	bne	r2,zero,2c528 <lcd_handle_escape+0x250>
   2c47c:	e0ffff17 	ldw	r3,-4(fp)
   2c480:	188019a0 	cmpeqi	r2,r3,102
   2c484:	1000011e 	bne	r2,zero,2c48c <lcd_handle_escape+0x1b4>
   2c488:	00004206 	br	2c594 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   2c48c:	e0bffb17 	ldw	r2,-20(fp)
   2c490:	10800050 	cmplti	r2,r2,1
   2c494:	1000051e 	bne	r2,zero,2c4ac <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
   2c498:	e0bffb17 	ldw	r2,-20(fp)
   2c49c:	10bfffc4 	addi	r2,r2,-1
   2c4a0:	1007883a 	mov	r3,r2
   2c4a4:	e0bffd17 	ldw	r2,-12(fp)
   2c4a8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   2c4ac:	e0bffc17 	ldw	r2,-16(fp)
   2c4b0:	10800050 	cmplti	r2,r2,1
   2c4b4:	1000371e 	bne	r2,zero,2c594 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
   2c4b8:	e0bffc17 	ldw	r2,-16(fp)
   2c4bc:	10bfffc4 	addi	r2,r2,-1
   2c4c0:	1007883a 	mov	r3,r2
   2c4c4:	e0bffd17 	ldw	r2,-12(fp)
   2c4c8:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   2c4cc:	e0bffd17 	ldw	r2,-12(fp)
   2c4d0:	10800883 	ldbu	r2,34(r2)
   2c4d4:	10803fcc 	andi	r2,r2,255
   2c4d8:	10800170 	cmpltui	r2,r2,5
   2c4dc:	1000061e 	bne	r2,zero,2c4f8 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
   2c4e0:	e0fffd17 	ldw	r3,-12(fp)
   2c4e4:	00800104 	movi	r2,4
   2c4e8:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
   2c4ec:	00000206 	br	2c4f8 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
   2c4f0:	e13ffd17 	ldw	r4,-12(fp)
   2c4f4:	002c2100 	call	2c210 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   2c4f8:	e0bffd17 	ldw	r2,-12(fp)
   2c4fc:	10800883 	ldbu	r2,34(r2)
   2c500:	10803fcc 	andi	r2,r2,255
   2c504:	108000e8 	cmpgeui	r2,r2,3
   2c508:	103ff91e 	bne	r2,zero,2c4f0 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
   2c50c:	00002106 	br	2c594 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   2c510:	e0bffc17 	ldw	r2,-16(fp)
   2c514:	10800098 	cmpnei	r2,r2,2
   2c518:	10001e1e 	bne	r2,zero,2c594 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
   2c51c:	e13ffd17 	ldw	r4,-12(fp)
   2c520:	002bf600 	call	2bf60 <lcd_clear_screen>
    break;
   2c524:	00001b06 	br	2c594 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   2c528:	e0bffc17 	ldw	r2,-16(fp)
   2c52c:	10800048 	cmpgei	r2,r2,1
   2c530:	1000181e 	bne	r2,zero,2c594 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   2c534:	e0bffd17 	ldw	r2,-12(fp)
   2c538:	10800843 	ldbu	r2,33(r2)
   2c53c:	10803fcc 	andi	r2,r2,255
   2c540:	10801428 	cmpgeui	r2,r2,80
   2c544:	1000131e 	bne	r2,zero,2c594 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   2c548:	e0bffd17 	ldw	r2,-12(fp)
   2c54c:	10800883 	ldbu	r2,34(r2)
   2c550:	10803fcc 	andi	r2,r2,255
   2c554:	108018e4 	muli	r2,r2,99
   2c558:	10c01004 	addi	r3,r2,64
   2c55c:	e0bffd17 	ldw	r2,-12(fp)
   2c560:	1887883a 	add	r3,r3,r2
   2c564:	e0bffd17 	ldw	r2,-12(fp)
   2c568:	10800843 	ldbu	r2,33(r2)
   2c56c:	10803fcc 	andi	r2,r2,255
   2c570:	1889883a 	add	r4,r3,r2
   2c574:	e0bffd17 	ldw	r2,-12(fp)
   2c578:	10800843 	ldbu	r2,33(r2)
   2c57c:	10c03fcc 	andi	r3,r2,255
   2c580:	00801404 	movi	r2,80
   2c584:	10c5c83a 	sub	r2,r2,r3
   2c588:	100d883a 	mov	r6,r2
   2c58c:	01400804 	movi	r5,32
   2c590:	00266580 	call	26658 <memset>
    }
    break;
  }
}
   2c594:	e037883a 	mov	sp,fp
   2c598:	dfc00117 	ldw	ra,4(sp)
   2c59c:	df000017 	ldw	fp,0(sp)
   2c5a0:	dec00204 	addi	sp,sp,8
   2c5a4:	f800283a 	ret

0002c5a8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   2c5a8:	defff204 	addi	sp,sp,-56
   2c5ac:	dfc00d15 	stw	ra,52(sp)
   2c5b0:	df000c15 	stw	fp,48(sp)
   2c5b4:	dc000b15 	stw	r16,44(sp)
   2c5b8:	df000b04 	addi	fp,sp,44
   2c5bc:	e13ffc15 	stw	r4,-16(fp)
   2c5c0:	e17ffd15 	stw	r5,-12(fp)
   2c5c4:	e1bffe15 	stw	r6,-8(fp)
   2c5c8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   2c5cc:	e0bffe17 	ldw	r2,-8(fp)
   2c5d0:	1007883a 	mov	r3,r2
   2c5d4:	e0bffd17 	ldw	r2,-12(fp)
   2c5d8:	10c5883a 	add	r2,r2,r3
   2c5dc:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   2c5e0:	e0fffc17 	ldw	r3,-16(fp)
   2c5e4:	00800044 	movi	r2,1
   2c5e8:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
   2c5ec:	0000a206 	br	2c878 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
   2c5f0:	e0bffd17 	ldw	r2,-12(fp)
   2c5f4:	10800003 	ldbu	r2,0(r2)
   2c5f8:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
   2c5fc:	e0bffc17 	ldw	r2,-16(fp)
   2c600:	10800903 	ldbu	r2,36(r2)
   2c604:	10803fcc 	andi	r2,r2,255
   2c608:	1080201c 	xori	r2,r2,128
   2c60c:	10bfe004 	addi	r2,r2,-128
   2c610:	1004803a 	cmplt	r2,r2,zero
   2c614:	10003b1e 	bne	r2,zero,2c704 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
   2c618:	e0bffc17 	ldw	r2,-16(fp)
   2c61c:	10800903 	ldbu	r2,36(r2)
   2c620:	10803fcc 	andi	r2,r2,255
   2c624:	1080201c 	xori	r2,r2,128
   2c628:	10bfe004 	addi	r2,r2,-128
   2c62c:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   2c630:	e0bff717 	ldw	r2,-36(fp)
   2c634:	1004c03a 	cmpne	r2,r2,zero
   2c638:	1000031e 	bne	r2,zero,2c648 <altera_avalon_lcd_16207_write+0xa0>
   2c63c:	e0bff807 	ldb	r2,-32(fp)
   2c640:	108016d8 	cmpnei	r2,r2,91
   2c644:	1000111e 	bne	r2,zero,2c68c <altera_avalon_lcd_16207_write+0xe4>
   2c648:	e0bff717 	ldw	r2,-36(fp)
   2c64c:	1005003a 	cmpeq	r2,r2,zero
   2c650:	10001a1e 	bne	r2,zero,2c6bc <altera_avalon_lcd_16207_write+0x114>
   2c654:	e0bff807 	ldb	r2,-32(fp)
   2c658:	1007883a 	mov	r3,r2
   2c65c:	008000f4 	movhi	r2,3
   2c660:	10833e04 	addi	r2,r2,3320
   2c664:	10800017 	ldw	r2,0(r2)
   2c668:	1885883a 	add	r2,r3,r2
   2c66c:	10800003 	ldbu	r2,0(r2)
   2c670:	10803fcc 	andi	r2,r2,255
   2c674:	1080010c 	andi	r2,r2,4
   2c678:	1004c03a 	cmpne	r2,r2,zero
   2c67c:	10000f1e 	bne	r2,zero,2c6bc <altera_avalon_lcd_16207_write+0x114>
   2c680:	e0bff807 	ldb	r2,-32(fp)
   2c684:	10800ee0 	cmpeqi	r2,r2,59
   2c688:	10000c1e 	bne	r2,zero,2c6bc <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
   2c68c:	e0fff717 	ldw	r3,-36(fp)
   2c690:	e0bffc17 	ldw	r2,-16(fp)
   2c694:	1885883a 	add	r2,r3,r2
   2c698:	10800a04 	addi	r2,r2,40
   2c69c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   2c6a0:	e17ff807 	ldb	r5,-32(fp)
   2c6a4:	e13ffc17 	ldw	r4,-16(fp)
   2c6a8:	002c2d80 	call	2c2d8 <lcd_handle_escape>

        sp->esccount = -1;
   2c6ac:	e0fffc17 	ldw	r3,-16(fp)
   2c6b0:	00bfffc4 	movi	r2,-1
   2c6b4:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   2c6b8:	00006c06 	br	2c86c <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   2c6bc:	e0bffc17 	ldw	r2,-16(fp)
   2c6c0:	10800903 	ldbu	r2,36(r2)
   2c6c4:	10803fcc 	andi	r2,r2,255
   2c6c8:	108001e8 	cmpgeui	r2,r2,7
   2c6cc:	1000671e 	bne	r2,zero,2c86c <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
   2c6d0:	e0fff717 	ldw	r3,-36(fp)
   2c6d4:	e0bffc17 	ldw	r2,-16(fp)
   2c6d8:	1885883a 	add	r2,r3,r2
   2c6dc:	10c00a04 	addi	r3,r2,40
   2c6e0:	e0bff803 	ldbu	r2,-32(fp)
   2c6e4:	18800005 	stb	r2,0(r3)
        sp->esccount++;
   2c6e8:	e0bffc17 	ldw	r2,-16(fp)
   2c6ec:	10800903 	ldbu	r2,36(r2)
   2c6f0:	10800044 	addi	r2,r2,1
   2c6f4:	1007883a 	mov	r3,r2
   2c6f8:	e0bffc17 	ldw	r2,-16(fp)
   2c6fc:	10c00905 	stb	r3,36(r2)
   2c700:	00005a06 	br	2c86c <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
   2c704:	e0bff807 	ldb	r2,-32(fp)
   2c708:	108006d8 	cmpnei	r2,r2,27
   2c70c:	1000031e 	bne	r2,zero,2c71c <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
   2c710:	e0bffc17 	ldw	r2,-16(fp)
   2c714:	10000905 	stb	zero,36(r2)
   2c718:	00005406 	br	2c86c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
   2c71c:	e0bff807 	ldb	r2,-32(fp)
   2c720:	10800358 	cmpnei	r2,r2,13
   2c724:	1000031e 	bne	r2,zero,2c734 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
   2c728:	e0bffc17 	ldw	r2,-16(fp)
   2c72c:	10000845 	stb	zero,33(r2)
   2c730:	00004e06 	br	2c86c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
   2c734:	e0bff807 	ldb	r2,-32(fp)
   2c738:	10800298 	cmpnei	r2,r2,10
   2c73c:	1000101e 	bne	r2,zero,2c780 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
   2c740:	e0bffc17 	ldw	r2,-16(fp)
   2c744:	10000845 	stb	zero,33(r2)
      sp->y++;
   2c748:	e0bffc17 	ldw	r2,-16(fp)
   2c74c:	10800883 	ldbu	r2,34(r2)
   2c750:	10800044 	addi	r2,r2,1
   2c754:	1007883a 	mov	r3,r2
   2c758:	e0bffc17 	ldw	r2,-16(fp)
   2c75c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   2c760:	e0bffc17 	ldw	r2,-16(fp)
   2c764:	10800883 	ldbu	r2,34(r2)
   2c768:	10803fcc 	andi	r2,r2,255
   2c76c:	108000f0 	cmpltui	r2,r2,3
   2c770:	10003e1e 	bne	r2,zero,2c86c <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
   2c774:	e13ffc17 	ldw	r4,-16(fp)
   2c778:	002c2100 	call	2c210 <lcd_scroll_up>
   2c77c:	00003b06 	br	2c86c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
   2c780:	e0bff807 	ldb	r2,-32(fp)
   2c784:	10800218 	cmpnei	r2,r2,8
   2c788:	10000c1e 	bne	r2,zero,2c7bc <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
   2c78c:	e0bffc17 	ldw	r2,-16(fp)
   2c790:	10800843 	ldbu	r2,33(r2)
   2c794:	10803fcc 	andi	r2,r2,255
   2c798:	1005003a 	cmpeq	r2,r2,zero
   2c79c:	1000331e 	bne	r2,zero,2c86c <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
   2c7a0:	e0bffc17 	ldw	r2,-16(fp)
   2c7a4:	10800843 	ldbu	r2,33(r2)
   2c7a8:	10bfffc4 	addi	r2,r2,-1
   2c7ac:	1007883a 	mov	r3,r2
   2c7b0:	e0bffc17 	ldw	r2,-16(fp)
   2c7b4:	10c00845 	stb	r3,33(r2)
   2c7b8:	00002c06 	br	2c86c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
   2c7bc:	e0bff807 	ldb	r2,-32(fp)
   2c7c0:	1007883a 	mov	r3,r2
   2c7c4:	008000f4 	movhi	r2,3
   2c7c8:	10833e04 	addi	r2,r2,3320
   2c7cc:	10800017 	ldw	r2,0(r2)
   2c7d0:	1885883a 	add	r2,r3,r2
   2c7d4:	10800003 	ldbu	r2,0(r2)
   2c7d8:	10803fcc 	andi	r2,r2,255
   2c7dc:	1080201c 	xori	r2,r2,128
   2c7e0:	10bfe004 	addi	r2,r2,-128
   2c7e4:	108025cc 	andi	r2,r2,151
   2c7e8:	1005003a 	cmpeq	r2,r2,zero
   2c7ec:	10001f1e 	bne	r2,zero,2c86c <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   2c7f0:	e0bffc17 	ldw	r2,-16(fp)
   2c7f4:	10800883 	ldbu	r2,34(r2)
   2c7f8:	10803fcc 	andi	r2,r2,255
   2c7fc:	108000b0 	cmpltui	r2,r2,2
   2c800:	1000021e 	bne	r2,zero,2c80c <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
   2c804:	e13ffc17 	ldw	r4,-16(fp)
   2c808:	002c2100 	call	2c210 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   2c80c:	e0bffc17 	ldw	r2,-16(fp)
   2c810:	10800843 	ldbu	r2,33(r2)
   2c814:	10803fcc 	andi	r2,r2,255
   2c818:	10801428 	cmpgeui	r2,r2,80
   2c81c:	10000d1e 	bne	r2,zero,2c854 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
   2c820:	e0bffc17 	ldw	r2,-16(fp)
   2c824:	10800883 	ldbu	r2,34(r2)
   2c828:	11003fcc 	andi	r4,r2,255
   2c82c:	e0bffc17 	ldw	r2,-16(fp)
   2c830:	10800843 	ldbu	r2,33(r2)
   2c834:	11403fcc 	andi	r5,r2,255
   2c838:	e0fffc17 	ldw	r3,-16(fp)
   2c83c:	208018e4 	muli	r2,r4,99
   2c840:	10c5883a 	add	r2,r2,r3
   2c844:	1145883a 	add	r2,r2,r5
   2c848:	10c01004 	addi	r3,r2,64
   2c84c:	e0bff803 	ldbu	r2,-32(fp)
   2c850:	18800005 	stb	r2,0(r3)

      sp->x++;
   2c854:	e0bffc17 	ldw	r2,-16(fp)
   2c858:	10800843 	ldbu	r2,33(r2)
   2c85c:	10800044 	addi	r2,r2,1
   2c860:	1007883a 	mov	r3,r2
   2c864:	e0bffc17 	ldw	r2,-16(fp)
   2c868:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   2c86c:	e0bffd17 	ldw	r2,-12(fp)
   2c870:	10800044 	addi	r2,r2,1
   2c874:	e0bffd15 	stw	r2,-12(fp)
   2c878:	e0fffd17 	ldw	r3,-12(fp)
   2c87c:	e0bffb17 	ldw	r2,-20(fp)
   2c880:	18bf5b36 	bltu	r3,r2,2c5f0 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   2c884:	00800404 	movi	r2,16
   2c888:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2c88c:	e03ffa15 	stw	zero,-24(fp)
   2c890:	00003606 	br	2c96c <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   2c894:	00801404 	movi	r2,80
   2c898:	e0bff615 	stw	r2,-40(fp)
   2c89c:	00001106 	br	2c8e4 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
   2c8a0:	e13ffa17 	ldw	r4,-24(fp)
   2c8a4:	e0bff617 	ldw	r2,-40(fp)
   2c8a8:	117fffc4 	addi	r5,r2,-1
   2c8ac:	e0fffc17 	ldw	r3,-16(fp)
   2c8b0:	208018e4 	muli	r2,r4,99
   2c8b4:	10c5883a 	add	r2,r2,r3
   2c8b8:	1145883a 	add	r2,r2,r5
   2c8bc:	10801004 	addi	r2,r2,64
   2c8c0:	10800003 	ldbu	r2,0(r2)
   2c8c4:	10803fcc 	andi	r2,r2,255
   2c8c8:	1080201c 	xori	r2,r2,128
   2c8cc:	10bfe004 	addi	r2,r2,-128
   2c8d0:	10800818 	cmpnei	r2,r2,32
   2c8d4:	1000061e 	bne	r2,zero,2c8f0 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   2c8d8:	e0bff617 	ldw	r2,-40(fp)
   2c8dc:	10bfffc4 	addi	r2,r2,-1
   2c8e0:	e0bff615 	stw	r2,-40(fp)
   2c8e4:	e0bff617 	ldw	r2,-40(fp)
   2c8e8:	10800048 	cmpgei	r2,r2,1
   2c8ec:	103fec1e 	bne	r2,zero,2c8a0 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   2c8f0:	e0bff617 	ldw	r2,-40(fp)
   2c8f4:	10800448 	cmpgei	r2,r2,17
   2c8f8:	1000031e 	bne	r2,zero,2c908 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
   2c8fc:	00800404 	movi	r2,16
   2c900:	e0bff615 	stw	r2,-40(fp)
   2c904:	00000306 	br	2c914 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
   2c908:	e0bff617 	ldw	r2,-40(fp)
   2c90c:	10800044 	addi	r2,r2,1
   2c910:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
   2c914:	e13ffa17 	ldw	r4,-24(fp)
   2c918:	e0bff617 	ldw	r2,-40(fp)
   2c91c:	100b883a 	mov	r5,r2
   2c920:	e0fffc17 	ldw	r3,-16(fp)
   2c924:	208018e4 	muli	r2,r4,99
   2c928:	10c5883a 	add	r2,r2,r3
   2c92c:	10802404 	addi	r2,r2,144
   2c930:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
   2c934:	e0fff917 	ldw	r3,-28(fp)
   2c938:	e0bff617 	ldw	r2,-40(fp)
   2c93c:	1880020e 	bge	r3,r2,2c948 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
   2c940:	e0bff617 	ldw	r2,-40(fp)
   2c944:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   2c948:	e0bffa17 	ldw	r2,-24(fp)
   2c94c:	e0fffc17 	ldw	r3,-16(fp)
   2c950:	108018e4 	muli	r2,r2,99
   2c954:	10c5883a 	add	r2,r2,r3
   2c958:	10802404 	addi	r2,r2,144
   2c95c:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2c960:	e0bffa17 	ldw	r2,-24(fp)
   2c964:	10800044 	addi	r2,r2,1
   2c968:	e0bffa15 	stw	r2,-24(fp)
   2c96c:	e0bffa17 	ldw	r2,-24(fp)
   2c970:	10800090 	cmplti	r2,r2,2
   2c974:	103fc71e 	bne	r2,zero,2c894 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   2c978:	e0bff917 	ldw	r2,-28(fp)
   2c97c:	10800448 	cmpgei	r2,r2,17
   2c980:	1000031e 	bne	r2,zero,2c990 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
   2c984:	e0bffc17 	ldw	r2,-16(fp)
   2c988:	10000985 	stb	zero,38(r2)
   2c98c:	00002d06 	br	2ca44 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
   2c990:	e0bff917 	ldw	r2,-28(fp)
   2c994:	1085883a 	add	r2,r2,r2
   2c998:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
   2c99c:	e0bff917 	ldw	r2,-28(fp)
   2c9a0:	1007883a 	mov	r3,r2
   2c9a4:	e0bffc17 	ldw	r2,-16(fp)
   2c9a8:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2c9ac:	e03ffa15 	stw	zero,-24(fp)
   2c9b0:	00002106 	br	2ca38 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   2c9b4:	e0bffa17 	ldw	r2,-24(fp)
   2c9b8:	e0fffc17 	ldw	r3,-16(fp)
   2c9bc:	108018e4 	muli	r2,r2,99
   2c9c0:	10c5883a 	add	r2,r2,r3
   2c9c4:	10802404 	addi	r2,r2,144
   2c9c8:	10800043 	ldbu	r2,1(r2)
   2c9cc:	10803fcc 	andi	r2,r2,255
   2c9d0:	1080201c 	xori	r2,r2,128
   2c9d4:	10bfe004 	addi	r2,r2,-128
   2c9d8:	10800450 	cmplti	r2,r2,17
   2c9dc:	1000131e 	bne	r2,zero,2ca2c <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   2c9e0:	e43ffa17 	ldw	r16,-24(fp)
   2c9e4:	e0bffa17 	ldw	r2,-24(fp)
   2c9e8:	e0fffc17 	ldw	r3,-16(fp)
   2c9ec:	108018e4 	muli	r2,r2,99
   2c9f0:	10c5883a 	add	r2,r2,r3
   2c9f4:	10802404 	addi	r2,r2,144
   2c9f8:	10800043 	ldbu	r2,1(r2)
   2c9fc:	10803fcc 	andi	r2,r2,255
   2ca00:	1080201c 	xori	r2,r2,128
   2ca04:	10bfe004 	addi	r2,r2,-128
   2ca08:	1008923a 	slli	r4,r2,8
   2ca0c:	e17ff917 	ldw	r5,-28(fp)
   2ca10:	0029d880 	call	29d88 <__divsi3>
   2ca14:	1009883a 	mov	r4,r2
   2ca18:	e0fffc17 	ldw	r3,-16(fp)
   2ca1c:	808018e4 	muli	r2,r16,99
   2ca20:	10c5883a 	add	r2,r2,r3
   2ca24:	10802404 	addi	r2,r2,144
   2ca28:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2ca2c:	e0bffa17 	ldw	r2,-24(fp)
   2ca30:	10800044 	addi	r2,r2,1
   2ca34:	e0bffa15 	stw	r2,-24(fp)
   2ca38:	e0bffa17 	ldw	r2,-24(fp)
   2ca3c:	10800090 	cmplti	r2,r2,2
   2ca40:	103fdc1e 	bne	r2,zero,2c9b4 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   2ca44:	e0bffc17 	ldw	r2,-16(fp)
   2ca48:	10800943 	ldbu	r2,37(r2)
   2ca4c:	10803fcc 	andi	r2,r2,255
   2ca50:	1080201c 	xori	r2,r2,128
   2ca54:	10bfe004 	addi	r2,r2,-128
   2ca58:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
   2ca5c:	e13ffc17 	ldw	r4,-16(fp)
   2ca60:	002c0240 	call	2c024 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   2ca64:	e0bffc17 	ldw	r2,-16(fp)
   2ca68:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   2ca6c:	e0bffc17 	ldw	r2,-16(fp)
   2ca70:	10800943 	ldbu	r2,37(r2)
   2ca74:	10c03fcc 	andi	r3,r2,255
   2ca78:	18c0201c 	xori	r3,r3,128
   2ca7c:	18ffe004 	addi	r3,r3,-128
   2ca80:	e0bff517 	ldw	r2,-44(fp)
   2ca84:	18800426 	beq	r3,r2,2ca98 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   2ca88:	e0fffc17 	ldw	r3,-16(fp)
   2ca8c:	00800044 	movi	r2,1
   2ca90:	188009c5 	stb	r2,39(r3)
  }
   2ca94:	003feb06 	br	2ca44 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   2ca98:	e0bffe17 	ldw	r2,-8(fp)
}
   2ca9c:	e037883a 	mov	sp,fp
   2caa0:	dfc00217 	ldw	ra,8(sp)
   2caa4:	df000117 	ldw	fp,4(sp)
   2caa8:	dc000017 	ldw	r16,0(sp)
   2caac:	dec00304 	addi	sp,sp,12
   2cab0:	f800283a 	ret

0002cab4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   2cab4:	defffc04 	addi	sp,sp,-16
   2cab8:	dfc00315 	stw	ra,12(sp)
   2cabc:	df000215 	stw	fp,8(sp)
   2cac0:	df000204 	addi	fp,sp,8
   2cac4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   2cac8:	e0bfff17 	ldw	r2,-4(fp)
   2cacc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   2cad0:	e0bffe17 	ldw	r2,-8(fp)
   2cad4:	10800943 	ldbu	r2,37(r2)
   2cad8:	10803fcc 	andi	r2,r2,255
   2cadc:	1080201c 	xori	r2,r2,128
   2cae0:	10bfe004 	addi	r2,r2,-128
   2cae4:	10c00044 	addi	r3,r2,1
   2cae8:	e0bffe17 	ldw	r2,-8(fp)
   2caec:	10800983 	ldbu	r2,38(r2)
   2caf0:	10803fcc 	andi	r2,r2,255
   2caf4:	1080201c 	xori	r2,r2,128
   2caf8:	10bfe004 	addi	r2,r2,-128
   2cafc:	18800316 	blt	r3,r2,2cb0c <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
   2cb00:	e0bffe17 	ldw	r2,-8(fp)
   2cb04:	10000945 	stb	zero,37(r2)
   2cb08:	00000606 	br	2cb24 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
   2cb0c:	e0bffe17 	ldw	r2,-8(fp)
   2cb10:	10800943 	ldbu	r2,37(r2)
   2cb14:	10800044 	addi	r2,r2,1
   2cb18:	1007883a 	mov	r3,r2
   2cb1c:	e0bffe17 	ldw	r2,-8(fp)
   2cb20:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   2cb24:	e0bffe17 	ldw	r2,-8(fp)
   2cb28:	10800983 	ldbu	r2,38(r2)
   2cb2c:	10803fcc 	andi	r2,r2,255
   2cb30:	1080201c 	xori	r2,r2,128
   2cb34:	10bfe004 	addi	r2,r2,-128
   2cb38:	10800050 	cmplti	r2,r2,1
   2cb3c:	1000091e 	bne	r2,zero,2cb64 <alt_lcd_16207_timeout+0xb0>
   2cb40:	e0bffe17 	ldw	r2,-8(fp)
   2cb44:	108009c3 	ldbu	r2,39(r2)
   2cb48:	10803fcc 	andi	r2,r2,255
   2cb4c:	1080201c 	xori	r2,r2,128
   2cb50:	10bfe004 	addi	r2,r2,-128
   2cb54:	1004c03a 	cmpne	r2,r2,zero
   2cb58:	1000021e 	bne	r2,zero,2cb64 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
   2cb5c:	e13ffe17 	ldw	r4,-8(fp)
   2cb60:	002c0240 	call	2c024 <lcd_repaint_screen>

  return sp->period;
   2cb64:	e0bffe17 	ldw	r2,-8(fp)
   2cb68:	10800717 	ldw	r2,28(r2)
}
   2cb6c:	e037883a 	mov	sp,fp
   2cb70:	dfc00117 	ldw	ra,4(sp)
   2cb74:	df000017 	ldw	fp,0(sp)
   2cb78:	dec00204 	addi	sp,sp,8
   2cb7c:	f800283a 	ret

0002cb80 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   2cb80:	defffc04 	addi	sp,sp,-16
   2cb84:	dfc00315 	stw	ra,12(sp)
   2cb88:	df000215 	stw	fp,8(sp)
   2cb8c:	df000204 	addi	fp,sp,8
   2cb90:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   2cb94:	e0bfff17 	ldw	r2,-4(fp)
   2cb98:	10800017 	ldw	r2,0(r2)
   2cb9c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   2cba0:	e0bfff17 	ldw	r2,-4(fp)
   2cba4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   2cba8:	010ea604 	movi	r4,15000
   2cbac:	002e3800 	call	2e380 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2cbb0:	e0bffe17 	ldw	r2,-8(fp)
   2cbb4:	1007883a 	mov	r3,r2
   2cbb8:	00800c04 	movi	r2,48
   2cbbc:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   2cbc0:	01040104 	movi	r4,4100
   2cbc4:	002e3800 	call	2e380 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2cbc8:	e0bffe17 	ldw	r2,-8(fp)
   2cbcc:	1007883a 	mov	r3,r2
   2cbd0:	00800c04 	movi	r2,48
   2cbd4:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   2cbd8:	0100fa04 	movi	r4,1000
   2cbdc:	002e3800 	call	2e380 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2cbe0:	e0bffe17 	ldw	r2,-8(fp)
   2cbe4:	1007883a 	mov	r3,r2
   2cbe8:	00800c04 	movi	r2,48
   2cbec:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   2cbf0:	e13fff17 	ldw	r4,-4(fp)
   2cbf4:	01400e04 	movi	r5,56
   2cbf8:	002bdd40 	call	2bdd4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   2cbfc:	e13fff17 	ldw	r4,-4(fp)
   2cc00:	01400204 	movi	r5,8
   2cc04:	002bdd40 	call	2bdd4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   2cc08:	e13fff17 	ldw	r4,-4(fp)
   2cc0c:	002bf600 	call	2bf60 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   2cc10:	e13fff17 	ldw	r4,-4(fp)
   2cc14:	01400184 	movi	r5,6
   2cc18:	002bdd40 	call	2bdd4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   2cc1c:	e13fff17 	ldw	r4,-4(fp)
   2cc20:	01400304 	movi	r5,12
   2cc24:	002bdd40 	call	2bdd4 <lcd_write_command>

  sp->esccount = -1;
   2cc28:	e0ffff17 	ldw	r3,-4(fp)
   2cc2c:	00bfffc4 	movi	r2,-1
   2cc30:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
   2cc34:	e0bfff17 	ldw	r2,-4(fp)
   2cc38:	11000a04 	addi	r4,r2,40
   2cc3c:	000b883a 	mov	r5,zero
   2cc40:	01800204 	movi	r6,8
   2cc44:	00266580 	call	26658 <memset>

  sp->scrollpos = 0;
   2cc48:	e0bfff17 	ldw	r2,-4(fp)
   2cc4c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   2cc50:	e0bfff17 	ldw	r2,-4(fp)
   2cc54:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   2cc58:	e0bfff17 	ldw	r2,-4(fp)
   2cc5c:	100009c5 	stb	zero,39(r2)
   2cc60:	008000f4 	movhi	r2,3
   2cc64:	108a5c04 	addi	r2,r2,10608
   2cc68:	10800017 	ldw	r2,0(r2)
   2cc6c:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   2cc70:	01400284 	movi	r5,10
   2cc74:	0029e480 	call	29e48 <__udivsi3>
   2cc78:	1007883a 	mov	r3,r2
   2cc7c:	e0bfff17 	ldw	r2,-4(fp)
   2cc80:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   2cc84:	e0bfff17 	ldw	r2,-4(fp)
   2cc88:	11000104 	addi	r4,r2,4
   2cc8c:	e0bfff17 	ldw	r2,-4(fp)
   2cc90:	10800717 	ldw	r2,28(r2)
   2cc94:	100b883a 	mov	r5,r2
   2cc98:	018000f4 	movhi	r6,3
   2cc9c:	31b2ad04 	addi	r6,r6,-13644
   2cca0:	e1ffff17 	ldw	r7,-4(fp)
   2cca4:	002d7c40 	call	2d7c4 <alt_alarm_start>
}
   2cca8:	e037883a 	mov	sp,fp
   2ccac:	dfc00117 	ldw	ra,4(sp)
   2ccb0:	df000017 	ldw	fp,0(sp)
   2ccb4:	dec00204 	addi	sp,sp,8
   2ccb8:	f800283a 	ret

0002ccbc <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2ccbc:	defffa04 	addi	sp,sp,-24
   2ccc0:	dfc00515 	stw	ra,20(sp)
   2ccc4:	df000415 	stw	fp,16(sp)
   2ccc8:	df000404 	addi	fp,sp,16
   2cccc:	e13ffd15 	stw	r4,-12(fp)
   2ccd0:	e17ffe15 	stw	r5,-8(fp)
   2ccd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   2ccd8:	e0bffd17 	ldw	r2,-12(fp)
   2ccdc:	10800017 	ldw	r2,0(r2)
   2cce0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   2cce4:	e0bffc17 	ldw	r2,-16(fp)
   2cce8:	11000a04 	addi	r4,r2,40
   2ccec:	e0bffd17 	ldw	r2,-12(fp)
   2ccf0:	11c00217 	ldw	r7,8(r2)
   2ccf4:	e17ffe17 	ldw	r5,-8(fp)
   2ccf8:	e1bfff17 	ldw	r6,-4(fp)
   2ccfc:	002c5a80 	call	2c5a8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   2cd00:	e037883a 	mov	sp,fp
   2cd04:	dfc00117 	ldw	ra,4(sp)
   2cd08:	df000017 	ldw	fp,0(sp)
   2cd0c:	dec00204 	addi	sp,sp,8
   2cd10:	f800283a 	ret

0002cd14 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2cd14:	defffa04 	addi	sp,sp,-24
   2cd18:	dfc00515 	stw	ra,20(sp)
   2cd1c:	df000415 	stw	fp,16(sp)
   2cd20:	df000404 	addi	fp,sp,16
   2cd24:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2cd28:	e0bfff17 	ldw	r2,-4(fp)
   2cd2c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2cd30:	e0bfff17 	ldw	r2,-4(fp)
   2cd34:	10800104 	addi	r2,r2,4
   2cd38:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2cd3c:	0005303a 	rdctl	r2,status
   2cd40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2cd44:	e0fffd17 	ldw	r3,-12(fp)
   2cd48:	00bfff84 	movi	r2,-2
   2cd4c:	1884703a 	and	r2,r3,r2
   2cd50:	1001703a 	wrctl	status,r2
  
  return context;
   2cd54:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2cd58:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   2cd5c:	002e2740 	call	2e274 <alt_tick>
   2cd60:	e0bffe17 	ldw	r2,-8(fp)
   2cd64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2cd68:	e0bffc17 	ldw	r2,-16(fp)
   2cd6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2cd70:	e037883a 	mov	sp,fp
   2cd74:	dfc00117 	ldw	ra,4(sp)
   2cd78:	df000017 	ldw	fp,0(sp)
   2cd7c:	dec00204 	addi	sp,sp,8
   2cd80:	f800283a 	ret

0002cd84 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2cd84:	defff804 	addi	sp,sp,-32
   2cd88:	dfc00715 	stw	ra,28(sp)
   2cd8c:	df000615 	stw	fp,24(sp)
   2cd90:	df000604 	addi	fp,sp,24
   2cd94:	e13ffc15 	stw	r4,-16(fp)
   2cd98:	e17ffd15 	stw	r5,-12(fp)
   2cd9c:	e1bffe15 	stw	r6,-8(fp)
   2cda0:	e1ffff15 	stw	r7,-4(fp)
   2cda4:	e0bfff17 	ldw	r2,-4(fp)
   2cda8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2cdac:	008000f4 	movhi	r2,3
   2cdb0:	108a5c04 	addi	r2,r2,10608
   2cdb4:	10800017 	ldw	r2,0(r2)
   2cdb8:	1004c03a 	cmpne	r2,r2,zero
   2cdbc:	1000041e 	bne	r2,zero,2cdd0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   2cdc0:	00c000f4 	movhi	r3,3
   2cdc4:	18ca5c04 	addi	r3,r3,10608
   2cdc8:	e0bffb17 	ldw	r2,-20(fp)
   2cdcc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2cdd0:	e0bffc17 	ldw	r2,-16(fp)
   2cdd4:	10800104 	addi	r2,r2,4
   2cdd8:	1007883a 	mov	r3,r2
   2cddc:	008001c4 	movi	r2,7
   2cde0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2cde4:	d8000015 	stw	zero,0(sp)
   2cde8:	e13ffd17 	ldw	r4,-12(fp)
   2cdec:	e17ffe17 	ldw	r5,-8(fp)
   2cdf0:	018000f4 	movhi	r6,3
   2cdf4:	31b34504 	addi	r6,r6,-13036
   2cdf8:	e1fffc17 	ldw	r7,-16(fp)
   2cdfc:	002ddd40 	call	2ddd4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2ce00:	e037883a 	mov	sp,fp
   2ce04:	dfc00117 	ldw	ra,4(sp)
   2ce08:	df000017 	ldw	fp,0(sp)
   2ce0c:	dec00204 	addi	sp,sp,8
   2ce10:	f800283a 	ret

0002ce14 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2ce14:	defffa04 	addi	sp,sp,-24
   2ce18:	dfc00515 	stw	ra,20(sp)
   2ce1c:	df000415 	stw	fp,16(sp)
   2ce20:	df000404 	addi	fp,sp,16
   2ce24:	e13ffd15 	stw	r4,-12(fp)
   2ce28:	e17ffe15 	stw	r5,-8(fp)
   2ce2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2ce30:	e0bffd17 	ldw	r2,-12(fp)
   2ce34:	10800017 	ldw	r2,0(r2)
   2ce38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2ce3c:	e0bffc17 	ldw	r2,-16(fp)
   2ce40:	11000a04 	addi	r4,r2,40
   2ce44:	e0bffd17 	ldw	r2,-12(fp)
   2ce48:	11c00217 	ldw	r7,8(r2)
   2ce4c:	e17ffe17 	ldw	r5,-8(fp)
   2ce50:	e1bfff17 	ldw	r6,-4(fp)
   2ce54:	002d30c0 	call	2d30c <altera_avalon_uart_read>
      fd->fd_flags);
}
   2ce58:	e037883a 	mov	sp,fp
   2ce5c:	dfc00117 	ldw	ra,4(sp)
   2ce60:	df000017 	ldw	fp,0(sp)
   2ce64:	dec00204 	addi	sp,sp,8
   2ce68:	f800283a 	ret

0002ce6c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2ce6c:	defffa04 	addi	sp,sp,-24
   2ce70:	dfc00515 	stw	ra,20(sp)
   2ce74:	df000415 	stw	fp,16(sp)
   2ce78:	df000404 	addi	fp,sp,16
   2ce7c:	e13ffd15 	stw	r4,-12(fp)
   2ce80:	e17ffe15 	stw	r5,-8(fp)
   2ce84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2ce88:	e0bffd17 	ldw	r2,-12(fp)
   2ce8c:	10800017 	ldw	r2,0(r2)
   2ce90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2ce94:	e0bffc17 	ldw	r2,-16(fp)
   2ce98:	11000a04 	addi	r4,r2,40
   2ce9c:	e0bffd17 	ldw	r2,-12(fp)
   2cea0:	11c00217 	ldw	r7,8(r2)
   2cea4:	e17ffe17 	ldw	r5,-8(fp)
   2cea8:	e1bfff17 	ldw	r6,-4(fp)
   2ceac:	002d59c0 	call	2d59c <altera_avalon_uart_write>
      fd->fd_flags);
}
   2ceb0:	e037883a 	mov	sp,fp
   2ceb4:	dfc00117 	ldw	ra,4(sp)
   2ceb8:	df000017 	ldw	fp,0(sp)
   2cebc:	dec00204 	addi	sp,sp,8
   2cec0:	f800283a 	ret

0002cec4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2cec4:	defffc04 	addi	sp,sp,-16
   2cec8:	dfc00315 	stw	ra,12(sp)
   2cecc:	df000215 	stw	fp,8(sp)
   2ced0:	df000204 	addi	fp,sp,8
   2ced4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2ced8:	e0bfff17 	ldw	r2,-4(fp)
   2cedc:	10800017 	ldw	r2,0(r2)
   2cee0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2cee4:	e0bffe17 	ldw	r2,-8(fp)
   2cee8:	11000a04 	addi	r4,r2,40
   2ceec:	e0bfff17 	ldw	r2,-4(fp)
   2cef0:	11400217 	ldw	r5,8(r2)
   2cef4:	002d2ac0 	call	2d2ac <altera_avalon_uart_close>
}
   2cef8:	e037883a 	mov	sp,fp
   2cefc:	dfc00117 	ldw	ra,4(sp)
   2cf00:	df000017 	ldw	fp,0(sp)
   2cf04:	dec00204 	addi	sp,sp,8
   2cf08:	f800283a 	ret

0002cf0c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2cf0c:	defff704 	addi	sp,sp,-36
   2cf10:	dfc00815 	stw	ra,32(sp)
   2cf14:	df000715 	stw	fp,28(sp)
   2cf18:	df000704 	addi	fp,sp,28
   2cf1c:	e13ffc15 	stw	r4,-16(fp)
   2cf20:	e17ffd15 	stw	r5,-12(fp)
   2cf24:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
   2cf28:	e0bffc17 	ldw	r2,-16(fp)
   2cf2c:	10800017 	ldw	r2,0(r2)
   2cf30:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2cf34:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2cf38:	1004c03a 	cmpne	r2,r2,zero
   2cf3c:	1000061e 	bne	r2,zero,2cf58 <altera_avalon_uart_init+0x4c>
   2cf40:	0005883a 	mov	r2,zero
   2cf44:	1004c03a 	cmpne	r2,r2,zero
   2cf48:	1000031e 	bne	r2,zero,2cf58 <altera_avalon_uart_init+0x4c>
   2cf4c:	0005883a 	mov	r2,zero
   2cf50:	1005003a 	cmpeq	r2,r2,zero
   2cf54:	1000031e 	bne	r2,zero,2cf64 <altera_avalon_uart_init+0x58>
   2cf58:	00800044 	movi	r2,1
   2cf5c:	e0bfff15 	stw	r2,-4(fp)
   2cf60:	00000106 	br	2cf68 <altera_avalon_uart_init+0x5c>
   2cf64:	e03fff15 	stw	zero,-4(fp)
   2cf68:	e0bfff17 	ldw	r2,-4(fp)
   2cf6c:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2cf70:	e0bffa17 	ldw	r2,-24(fp)
   2cf74:	1004c03a 	cmpne	r2,r2,zero
   2cf78:	1000111e 	bne	r2,zero,2cfc0 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   2cf7c:	e0fffc17 	ldw	r3,-16(fp)
   2cf80:	00832004 	movi	r2,3200
   2cf84:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   2cf88:	e0bffb17 	ldw	r2,-20(fp)
   2cf8c:	11000304 	addi	r4,r2,12
   2cf90:	e0bffc17 	ldw	r2,-16(fp)
   2cf94:	10800117 	ldw	r2,4(r2)
   2cf98:	1007883a 	mov	r3,r2
   2cf9c:	2005883a 	mov	r2,r4
   2cfa0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   2cfa4:	d8000015 	stw	zero,0(sp)
   2cfa8:	e13ffd17 	ldw	r4,-12(fp)
   2cfac:	e17ffe17 	ldw	r5,-8(fp)
   2cfb0:	018000f4 	movhi	r6,3
   2cfb4:	31b3f504 	addi	r6,r6,-12332
   2cfb8:	e1fffc17 	ldw	r7,-16(fp)
   2cfbc:	002ddd40 	call	2ddd4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   2cfc0:	e037883a 	mov	sp,fp
   2cfc4:	dfc00117 	ldw	ra,4(sp)
   2cfc8:	df000017 	ldw	fp,0(sp)
   2cfcc:	dec00204 	addi	sp,sp,8
   2cfd0:	f800283a 	ret

0002cfd4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2cfd4:	defffa04 	addi	sp,sp,-24
   2cfd8:	dfc00515 	stw	ra,20(sp)
   2cfdc:	df000415 	stw	fp,16(sp)
   2cfe0:	df000404 	addi	fp,sp,16
   2cfe4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2cfe8:	e0bfff17 	ldw	r2,-4(fp)
   2cfec:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
   2cff0:	e0bffd17 	ldw	r2,-12(fp)
   2cff4:	10800017 	ldw	r2,0(r2)
   2cff8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2cffc:	e0bffc17 	ldw	r2,-16(fp)
   2d000:	10800204 	addi	r2,r2,8
   2d004:	10800037 	ldwio	r2,0(r2)
   2d008:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   2d00c:	e0bffc17 	ldw	r2,-16(fp)
   2d010:	10800204 	addi	r2,r2,8
   2d014:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   2d018:	e0bffc17 	ldw	r2,-16(fp)
   2d01c:	10800204 	addi	r2,r2,8
   2d020:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2d024:	e0bffe17 	ldw	r2,-8(fp)
   2d028:	1080200c 	andi	r2,r2,128
   2d02c:	1005003a 	cmpeq	r2,r2,zero
   2d030:	1000031e 	bne	r2,zero,2d040 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2d034:	e13ffd17 	ldw	r4,-12(fp)
   2d038:	e17ffe17 	ldw	r5,-8(fp)
   2d03c:	002d0700 	call	2d070 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2d040:	e0bffe17 	ldw	r2,-8(fp)
   2d044:	1081100c 	andi	r2,r2,1088
   2d048:	1005003a 	cmpeq	r2,r2,zero
   2d04c:	1000031e 	bne	r2,zero,2d05c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   2d050:	e13ffd17 	ldw	r4,-12(fp)
   2d054:	e17ffe17 	ldw	r5,-8(fp)
   2d058:	002d1500 	call	2d150 <altera_avalon_uart_txirq>
  }
  

}
   2d05c:	e037883a 	mov	sp,fp
   2d060:	dfc00117 	ldw	ra,4(sp)
   2d064:	df000017 	ldw	fp,0(sp)
   2d068:	dec00204 	addi	sp,sp,8
   2d06c:	f800283a 	ret

0002d070 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2d070:	defffc04 	addi	sp,sp,-16
   2d074:	df000315 	stw	fp,12(sp)
   2d078:	df000304 	addi	fp,sp,12
   2d07c:	e13ffe15 	stw	r4,-8(fp)
   2d080:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2d084:	e0bfff17 	ldw	r2,-4(fp)
   2d088:	108000cc 	andi	r2,r2,3
   2d08c:	1004c03a 	cmpne	r2,r2,zero
   2d090:	10002b1e 	bne	r2,zero,2d140 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2d094:	e0bffe17 	ldw	r2,-8(fp)
   2d098:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2d09c:	e0bffe17 	ldw	r2,-8(fp)
   2d0a0:	10800317 	ldw	r2,12(r2)
   2d0a4:	10800044 	addi	r2,r2,1
   2d0a8:	10800fcc 	andi	r2,r2,63
   2d0ac:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2d0b0:	e0bffe17 	ldw	r2,-8(fp)
   2d0b4:	11000317 	ldw	r4,12(r2)
   2d0b8:	e0bffe17 	ldw	r2,-8(fp)
   2d0bc:	10800017 	ldw	r2,0(r2)
   2d0c0:	10800037 	ldwio	r2,0(r2)
   2d0c4:	1007883a 	mov	r3,r2
   2d0c8:	e0bffe17 	ldw	r2,-8(fp)
   2d0cc:	2085883a 	add	r2,r4,r2
   2d0d0:	10800704 	addi	r2,r2,28
   2d0d4:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   2d0d8:	e0fffe17 	ldw	r3,-8(fp)
   2d0dc:	e0bffd17 	ldw	r2,-12(fp)
   2d0e0:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2d0e4:	e0bffe17 	ldw	r2,-8(fp)
   2d0e8:	10800317 	ldw	r2,12(r2)
   2d0ec:	10800044 	addi	r2,r2,1
   2d0f0:	10800fcc 	andi	r2,r2,63
   2d0f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2d0f8:	e0bffe17 	ldw	r2,-8(fp)
   2d0fc:	10c00217 	ldw	r3,8(r2)
   2d100:	e0bffd17 	ldw	r2,-12(fp)
   2d104:	18800e1e 	bne	r3,r2,2d140 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2d108:	e0bffe17 	ldw	r2,-8(fp)
   2d10c:	10c00117 	ldw	r3,4(r2)
   2d110:	00bfdfc4 	movi	r2,-129
   2d114:	1886703a 	and	r3,r3,r2
   2d118:	e0bffe17 	ldw	r2,-8(fp)
   2d11c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2d120:	e0bffe17 	ldw	r2,-8(fp)
   2d124:	10800017 	ldw	r2,0(r2)
   2d128:	11000304 	addi	r4,r2,12
   2d12c:	e0bffe17 	ldw	r2,-8(fp)
   2d130:	10800117 	ldw	r2,4(r2)
   2d134:	1007883a 	mov	r3,r2
   2d138:	2005883a 	mov	r2,r4
   2d13c:	10c00035 	stwio	r3,0(r2)
  }   
}
   2d140:	e037883a 	mov	sp,fp
   2d144:	df000017 	ldw	fp,0(sp)
   2d148:	dec00104 	addi	sp,sp,4
   2d14c:	f800283a 	ret

0002d150 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2d150:	defffd04 	addi	sp,sp,-12
   2d154:	df000215 	stw	fp,8(sp)
   2d158:	df000204 	addi	fp,sp,8
   2d15c:	e13ffe15 	stw	r4,-8(fp)
   2d160:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2d164:	e0bffe17 	ldw	r2,-8(fp)
   2d168:	10c00417 	ldw	r3,16(r2)
   2d16c:	e0bffe17 	ldw	r2,-8(fp)
   2d170:	10800517 	ldw	r2,20(r2)
   2d174:	18803626 	beq	r3,r2,2d250 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2d178:	e0bffe17 	ldw	r2,-8(fp)
   2d17c:	10800617 	ldw	r2,24(r2)
   2d180:	1080008c 	andi	r2,r2,2
   2d184:	1005003a 	cmpeq	r2,r2,zero
   2d188:	1000041e 	bne	r2,zero,2d19c <altera_avalon_uart_txirq+0x4c>
   2d18c:	e0bfff17 	ldw	r2,-4(fp)
   2d190:	1082000c 	andi	r2,r2,2048
   2d194:	1005003a 	cmpeq	r2,r2,zero
   2d198:	10001e1e 	bne	r2,zero,2d214 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2d19c:	e0bffe17 	ldw	r2,-8(fp)
   2d1a0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2d1a4:	e0bffe17 	ldw	r2,-8(fp)
   2d1a8:	10800017 	ldw	r2,0(r2)
   2d1ac:	11000104 	addi	r4,r2,4
   2d1b0:	e0bffe17 	ldw	r2,-8(fp)
   2d1b4:	10c00417 	ldw	r3,16(r2)
   2d1b8:	e0bffe17 	ldw	r2,-8(fp)
   2d1bc:	1885883a 	add	r2,r3,r2
   2d1c0:	10801704 	addi	r2,r2,92
   2d1c4:	10800003 	ldbu	r2,0(r2)
   2d1c8:	10c03fcc 	andi	r3,r2,255
   2d1cc:	2005883a 	mov	r2,r4
   2d1d0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2d1d4:	e0bffe17 	ldw	r2,-8(fp)
   2d1d8:	10800417 	ldw	r2,16(r2)
   2d1dc:	10c00044 	addi	r3,r2,1
   2d1e0:	e0bffe17 	ldw	r2,-8(fp)
   2d1e4:	10c00415 	stw	r3,16(r2)
   2d1e8:	e0bffe17 	ldw	r2,-8(fp)
   2d1ec:	10800417 	ldw	r2,16(r2)
   2d1f0:	10c00fcc 	andi	r3,r2,63
   2d1f4:	e0bffe17 	ldw	r2,-8(fp)
   2d1f8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2d1fc:	e0bffe17 	ldw	r2,-8(fp)
   2d200:	10800117 	ldw	r2,4(r2)
   2d204:	10c01014 	ori	r3,r2,64
   2d208:	e0bffe17 	ldw	r2,-8(fp)
   2d20c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2d210:	00000f06 	br	2d250 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   2d214:	e0bffe17 	ldw	r2,-8(fp)
   2d218:	10800017 	ldw	r2,0(r2)
   2d21c:	10800204 	addi	r2,r2,8
   2d220:	10800037 	ldwio	r2,0(r2)
   2d224:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2d228:	e0bfff17 	ldw	r2,-4(fp)
   2d22c:	1082000c 	andi	r2,r2,2048
   2d230:	1004c03a 	cmpne	r2,r2,zero
   2d234:	1000061e 	bne	r2,zero,2d250 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2d238:	e0bffe17 	ldw	r2,-8(fp)
   2d23c:	10c00117 	ldw	r3,4(r2)
   2d240:	00bfefc4 	movi	r2,-65
   2d244:	1886703a 	and	r3,r3,r2
   2d248:	e0bffe17 	ldw	r2,-8(fp)
   2d24c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   2d250:	e0bffe17 	ldw	r2,-8(fp)
   2d254:	10c00417 	ldw	r3,16(r2)
   2d258:	e0bffe17 	ldw	r2,-8(fp)
   2d25c:	10800517 	ldw	r2,20(r2)
   2d260:	1880061e 	bne	r3,r2,2d27c <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2d264:	e0bffe17 	ldw	r2,-8(fp)
   2d268:	10c00117 	ldw	r3,4(r2)
   2d26c:	00beefc4 	movi	r2,-1089
   2d270:	1886703a 	and	r3,r3,r2
   2d274:	e0bffe17 	ldw	r2,-8(fp)
   2d278:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2d27c:	e0bffe17 	ldw	r2,-8(fp)
   2d280:	10800017 	ldw	r2,0(r2)
   2d284:	11000304 	addi	r4,r2,12
   2d288:	e0bffe17 	ldw	r2,-8(fp)
   2d28c:	10800117 	ldw	r2,4(r2)
   2d290:	1007883a 	mov	r3,r2
   2d294:	2005883a 	mov	r2,r4
   2d298:	10c00035 	stwio	r3,0(r2)
}
   2d29c:	e037883a 	mov	sp,fp
   2d2a0:	df000017 	ldw	fp,0(sp)
   2d2a4:	dec00104 	addi	sp,sp,4
   2d2a8:	f800283a 	ret

0002d2ac <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   2d2ac:	defffc04 	addi	sp,sp,-16
   2d2b0:	df000315 	stw	fp,12(sp)
   2d2b4:	df000304 	addi	fp,sp,12
   2d2b8:	e13ffd15 	stw	r4,-12(fp)
   2d2bc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2d2c0:	00000706 	br	2d2e0 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   2d2c4:	e0bffe17 	ldw	r2,-8(fp)
   2d2c8:	1090000c 	andi	r2,r2,16384
   2d2cc:	1005003a 	cmpeq	r2,r2,zero
   2d2d0:	1000031e 	bne	r2,zero,2d2e0 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
   2d2d4:	00bffd44 	movi	r2,-11
   2d2d8:	e0bfff15 	stw	r2,-4(fp)
   2d2dc:	00000606 	br	2d2f8 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2d2e0:	e0bffd17 	ldw	r2,-12(fp)
   2d2e4:	10c00417 	ldw	r3,16(r2)
   2d2e8:	e0bffd17 	ldw	r2,-12(fp)
   2d2ec:	10800517 	ldw	r2,20(r2)
   2d2f0:	18bff41e 	bne	r3,r2,2d2c4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2d2f4:	e03fff15 	stw	zero,-4(fp)
   2d2f8:	e0bfff17 	ldw	r2,-4(fp)
}
   2d2fc:	e037883a 	mov	sp,fp
   2d300:	df000017 	ldw	fp,0(sp)
   2d304:	dec00104 	addi	sp,sp,4
   2d308:	f800283a 	ret

0002d30c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   2d30c:	defff004 	addi	sp,sp,-64
   2d310:	dfc00f15 	stw	ra,60(sp)
   2d314:	df000e15 	stw	fp,56(sp)
   2d318:	df000e04 	addi	fp,sp,56
   2d31c:	e13ffb15 	stw	r4,-20(fp)
   2d320:	e17ffc15 	stw	r5,-16(fp)
   2d324:	e1bffd15 	stw	r6,-12(fp)
   2d328:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   2d32c:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
   2d330:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   2d334:	e0bffe17 	ldw	r2,-8(fp)
   2d338:	1090000c 	andi	r2,r2,16384
   2d33c:	1005003a 	cmpeq	r2,r2,zero
   2d340:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   2d344:	e0bffb17 	ldw	r2,-20(fp)
   2d348:	10800217 	ldw	r2,8(r2)
   2d34c:	10800044 	addi	r2,r2,1
   2d350:	10800fcc 	andi	r2,r2,63
   2d354:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2d358:	00001906 	br	2d3c0 <altera_avalon_uart_read+0xb4>
    {
      count++;
   2d35c:	e0bff617 	ldw	r2,-40(fp)
   2d360:	10800044 	addi	r2,r2,1
   2d364:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   2d368:	e0bffb17 	ldw	r2,-20(fp)
   2d36c:	10c00217 	ldw	r3,8(r2)
   2d370:	e0bffb17 	ldw	r2,-20(fp)
   2d374:	1885883a 	add	r2,r3,r2
   2d378:	10800704 	addi	r2,r2,28
   2d37c:	10800003 	ldbu	r2,0(r2)
   2d380:	1007883a 	mov	r3,r2
   2d384:	e0bffc17 	ldw	r2,-16(fp)
   2d388:	10c00005 	stb	r3,0(r2)
   2d38c:	e0bffc17 	ldw	r2,-16(fp)
   2d390:	10800044 	addi	r2,r2,1
   2d394:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   2d398:	e0bffb17 	ldw	r2,-20(fp)
   2d39c:	10800217 	ldw	r2,8(r2)
   2d3a0:	10c00044 	addi	r3,r2,1
   2d3a4:	e0bffb17 	ldw	r2,-20(fp)
   2d3a8:	10c00215 	stw	r3,8(r2)
   2d3ac:	e0bffb17 	ldw	r2,-20(fp)
   2d3b0:	10800217 	ldw	r2,8(r2)
   2d3b4:	10c00fcc 	andi	r3,r2,63
   2d3b8:	e0bffb17 	ldw	r2,-20(fp)
   2d3bc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2d3c0:	e0fff617 	ldw	r3,-40(fp)
   2d3c4:	e0bffd17 	ldw	r2,-12(fp)
   2d3c8:	1880050e 	bge	r3,r2,2d3e0 <altera_avalon_uart_read+0xd4>
   2d3cc:	e0bffb17 	ldw	r2,-20(fp)
   2d3d0:	10c00217 	ldw	r3,8(r2)
   2d3d4:	e0bffb17 	ldw	r2,-20(fp)
   2d3d8:	10800317 	ldw	r2,12(r2)
   2d3dc:	18bfdf1e 	bne	r3,r2,2d35c <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   2d3e0:	e0bff617 	ldw	r2,-40(fp)
   2d3e4:	1004c03a 	cmpne	r2,r2,zero
   2d3e8:	1000271e 	bne	r2,zero,2d488 <altera_avalon_uart_read+0x17c>
   2d3ec:	e0bffb17 	ldw	r2,-20(fp)
   2d3f0:	10c00217 	ldw	r3,8(r2)
   2d3f4:	e0bffb17 	ldw	r2,-20(fp)
   2d3f8:	10800317 	ldw	r2,12(r2)
   2d3fc:	1880221e 	bne	r3,r2,2d488 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
   2d400:	e0bff917 	ldw	r2,-28(fp)
   2d404:	1004c03a 	cmpne	r2,r2,zero
   2d408:	1000061e 	bne	r2,zero,2d424 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   2d40c:	002d53c0 	call	2d53c <alt_get_errno>
   2d410:	00c002c4 	movi	r3,11
   2d414:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   2d418:	00800044 	movi	r2,1
   2d41c:	e0bff705 	stb	r2,-36(fp)
        break;
   2d420:	00001f06 	br	2d4a0 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d424:	0005303a 	rdctl	r2,status
   2d428:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d42c:	e0fff517 	ldw	r3,-44(fp)
   2d430:	00bfff84 	movi	r2,-2
   2d434:	1884703a 	and	r2,r3,r2
   2d438:	1001703a 	wrctl	status,r2
  
  return context;
   2d43c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   2d440:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2d444:	e0bffb17 	ldw	r2,-20(fp)
   2d448:	10800117 	ldw	r2,4(r2)
   2d44c:	10c02014 	ori	r3,r2,128
   2d450:	e0bffb17 	ldw	r2,-20(fp)
   2d454:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2d458:	e0bffb17 	ldw	r2,-20(fp)
   2d45c:	10800017 	ldw	r2,0(r2)
   2d460:	11000304 	addi	r4,r2,12
   2d464:	e0bffb17 	ldw	r2,-20(fp)
   2d468:	10800117 	ldw	r2,4(r2)
   2d46c:	1007883a 	mov	r3,r2
   2d470:	2005883a 	mov	r2,r4
   2d474:	10c00035 	stwio	r3,0(r2)
   2d478:	e0bffa17 	ldw	r2,-24(fp)
   2d47c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d480:	e0bff417 	ldw	r2,-48(fp)
   2d484:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   2d488:	e0bff617 	ldw	r2,-40(fp)
   2d48c:	1004c03a 	cmpne	r2,r2,zero
   2d490:	1000031e 	bne	r2,zero,2d4a0 <altera_avalon_uart_read+0x194>
   2d494:	e0bffd17 	ldw	r2,-12(fp)
   2d498:	1004c03a 	cmpne	r2,r2,zero
   2d49c:	103fc81e 	bne	r2,zero,2d3c0 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d4a0:	0005303a 	rdctl	r2,status
   2d4a4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d4a8:	e0fff317 	ldw	r3,-52(fp)
   2d4ac:	00bfff84 	movi	r2,-2
   2d4b0:	1884703a 	and	r2,r3,r2
   2d4b4:	1001703a 	wrctl	status,r2
  
  return context;
   2d4b8:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   2d4bc:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2d4c0:	e0bffb17 	ldw	r2,-20(fp)
   2d4c4:	10800117 	ldw	r2,4(r2)
   2d4c8:	10c02014 	ori	r3,r2,128
   2d4cc:	e0bffb17 	ldw	r2,-20(fp)
   2d4d0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2d4d4:	e0bffb17 	ldw	r2,-20(fp)
   2d4d8:	10800017 	ldw	r2,0(r2)
   2d4dc:	11000304 	addi	r4,r2,12
   2d4e0:	e0bffb17 	ldw	r2,-20(fp)
   2d4e4:	10800117 	ldw	r2,4(r2)
   2d4e8:	1007883a 	mov	r3,r2
   2d4ec:	2005883a 	mov	r2,r4
   2d4f0:	10c00035 	stwio	r3,0(r2)
   2d4f4:	e0bffa17 	ldw	r2,-24(fp)
   2d4f8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d4fc:	e0bff217 	ldw	r2,-56(fp)
   2d500:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   2d504:	e0bff703 	ldbu	r2,-36(fp)
   2d508:	1005003a 	cmpeq	r2,r2,zero
   2d50c:	1000031e 	bne	r2,zero,2d51c <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
   2d510:	00bffd04 	movi	r2,-12
   2d514:	e0bfff15 	stw	r2,-4(fp)
   2d518:	00000206 	br	2d524 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
   2d51c:	e0bff617 	ldw	r2,-40(fp)
   2d520:	e0bfff15 	stw	r2,-4(fp)
   2d524:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   2d528:	e037883a 	mov	sp,fp
   2d52c:	dfc00117 	ldw	ra,4(sp)
   2d530:	df000017 	ldw	fp,0(sp)
   2d534:	dec00204 	addi	sp,sp,8
   2d538:	f800283a 	ret

0002d53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d53c:	defffd04 	addi	sp,sp,-12
   2d540:	dfc00215 	stw	ra,8(sp)
   2d544:	df000115 	stw	fp,4(sp)
   2d548:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2d54c:	008000f4 	movhi	r2,3
   2d550:	10833804 	addi	r2,r2,3296
   2d554:	10800017 	ldw	r2,0(r2)
   2d558:	1005003a 	cmpeq	r2,r2,zero
   2d55c:	1000061e 	bne	r2,zero,2d578 <alt_get_errno+0x3c>
   2d560:	008000f4 	movhi	r2,3
   2d564:	10833804 	addi	r2,r2,3296
   2d568:	10800017 	ldw	r2,0(r2)
   2d56c:	103ee83a 	callr	r2
   2d570:	e0bfff15 	stw	r2,-4(fp)
   2d574:	00000306 	br	2d584 <alt_get_errno+0x48>
   2d578:	008000f4 	movhi	r2,3
   2d57c:	108a5104 	addi	r2,r2,10564
   2d580:	e0bfff15 	stw	r2,-4(fp)
   2d584:	e0bfff17 	ldw	r2,-4(fp)
}
   2d588:	e037883a 	mov	sp,fp
   2d58c:	dfc00117 	ldw	ra,4(sp)
   2d590:	df000017 	ldw	fp,0(sp)
   2d594:	dec00204 	addi	sp,sp,8
   2d598:	f800283a 	ret

0002d59c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   2d59c:	defff204 	addi	sp,sp,-56
   2d5a0:	dfc00d15 	stw	ra,52(sp)
   2d5a4:	df000c15 	stw	fp,48(sp)
   2d5a8:	df000c04 	addi	fp,sp,48
   2d5ac:	e13ffc15 	stw	r4,-16(fp)
   2d5b0:	e17ffd15 	stw	r5,-12(fp)
   2d5b4:	e1bffe15 	stw	r6,-8(fp)
   2d5b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   2d5bc:	e0bffe17 	ldw	r2,-8(fp)
   2d5c0:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   2d5c4:	e0bfff17 	ldw	r2,-4(fp)
   2d5c8:	1090000c 	andi	r2,r2,16384
   2d5cc:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2d5d0:	00004006 	br	2d6d4 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2d5d4:	e0bffc17 	ldw	r2,-16(fp)
   2d5d8:	10800517 	ldw	r2,20(r2)
   2d5dc:	10800044 	addi	r2,r2,1
   2d5e0:	10800fcc 	andi	r2,r2,63
   2d5e4:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   2d5e8:	e0bffc17 	ldw	r2,-16(fp)
   2d5ec:	10c00417 	ldw	r3,16(r2)
   2d5f0:	e0bff917 	ldw	r2,-28(fp)
   2d5f4:	1880251e 	bne	r3,r2,2d68c <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
   2d5f8:	e0bffa17 	ldw	r2,-24(fp)
   2d5fc:	1005003a 	cmpeq	r2,r2,zero
   2d600:	1000051e 	bne	r2,zero,2d618 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   2d604:	002d7640 	call	2d764 <alt_get_errno>
   2d608:	1007883a 	mov	r3,r2
   2d60c:	008002c4 	movi	r2,11
   2d610:	18800015 	stw	r2,0(r3)
        break;
   2d614:	00003206 	br	2d6e0 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d618:	0005303a 	rdctl	r2,status
   2d61c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d620:	e0fff717 	ldw	r3,-36(fp)
   2d624:	00bfff84 	movi	r2,-2
   2d628:	1884703a 	and	r2,r3,r2
   2d62c:	1001703a 	wrctl	status,r2
  
  return context;
   2d630:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   2d634:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2d638:	e0bffc17 	ldw	r2,-16(fp)
   2d63c:	10800117 	ldw	r2,4(r2)
   2d640:	10c11014 	ori	r3,r2,1088
   2d644:	e0bffc17 	ldw	r2,-16(fp)
   2d648:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2d64c:	e0bffc17 	ldw	r2,-16(fp)
   2d650:	10800017 	ldw	r2,0(r2)
   2d654:	11000304 	addi	r4,r2,12
   2d658:	e0bffc17 	ldw	r2,-16(fp)
   2d65c:	10800117 	ldw	r2,4(r2)
   2d660:	1007883a 	mov	r3,r2
   2d664:	2005883a 	mov	r2,r4
   2d668:	10c00035 	stwio	r3,0(r2)
   2d66c:	e0bffb17 	ldw	r2,-20(fp)
   2d670:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d674:	e0bff617 	ldw	r2,-40(fp)
   2d678:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   2d67c:	e0bffc17 	ldw	r2,-16(fp)
   2d680:	10c00417 	ldw	r3,16(r2)
   2d684:	e0bff917 	ldw	r2,-28(fp)
   2d688:	18bffc26 	beq	r3,r2,2d67c <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
   2d68c:	e0bff817 	ldw	r2,-32(fp)
   2d690:	10bfffc4 	addi	r2,r2,-1
   2d694:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   2d698:	e0bffc17 	ldw	r2,-16(fp)
   2d69c:	10c00517 	ldw	r3,20(r2)
   2d6a0:	e0bffd17 	ldw	r2,-12(fp)
   2d6a4:	10800003 	ldbu	r2,0(r2)
   2d6a8:	1009883a 	mov	r4,r2
   2d6ac:	e0bffc17 	ldw	r2,-16(fp)
   2d6b0:	1885883a 	add	r2,r3,r2
   2d6b4:	10801704 	addi	r2,r2,92
   2d6b8:	11000005 	stb	r4,0(r2)
   2d6bc:	e0bffd17 	ldw	r2,-12(fp)
   2d6c0:	10800044 	addi	r2,r2,1
   2d6c4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   2d6c8:	e0fffc17 	ldw	r3,-16(fp)
   2d6cc:	e0bff917 	ldw	r2,-28(fp)
   2d6d0:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2d6d4:	e0bff817 	ldw	r2,-32(fp)
   2d6d8:	1004c03a 	cmpne	r2,r2,zero
   2d6dc:	103fbd1e 	bne	r2,zero,2d5d4 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d6e0:	0005303a 	rdctl	r2,status
   2d6e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d6e8:	e0fff517 	ldw	r3,-44(fp)
   2d6ec:	00bfff84 	movi	r2,-2
   2d6f0:	1884703a 	and	r2,r3,r2
   2d6f4:	1001703a 	wrctl	status,r2
  
  return context;
   2d6f8:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   2d6fc:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2d700:	e0bffc17 	ldw	r2,-16(fp)
   2d704:	10800117 	ldw	r2,4(r2)
   2d708:	10c11014 	ori	r3,r2,1088
   2d70c:	e0bffc17 	ldw	r2,-16(fp)
   2d710:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2d714:	e0bffc17 	ldw	r2,-16(fp)
   2d718:	10800017 	ldw	r2,0(r2)
   2d71c:	11000304 	addi	r4,r2,12
   2d720:	e0bffc17 	ldw	r2,-16(fp)
   2d724:	10800117 	ldw	r2,4(r2)
   2d728:	1007883a 	mov	r3,r2
   2d72c:	2005883a 	mov	r2,r4
   2d730:	10c00035 	stwio	r3,0(r2)
   2d734:	e0bffb17 	ldw	r2,-20(fp)
   2d738:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d73c:	e0bff417 	ldw	r2,-48(fp)
   2d740:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   2d744:	e0fffe17 	ldw	r3,-8(fp)
   2d748:	e0bff817 	ldw	r2,-32(fp)
   2d74c:	1885c83a 	sub	r2,r3,r2
}
   2d750:	e037883a 	mov	sp,fp
   2d754:	dfc00117 	ldw	ra,4(sp)
   2d758:	df000017 	ldw	fp,0(sp)
   2d75c:	dec00204 	addi	sp,sp,8
   2d760:	f800283a 	ret

0002d764 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d764:	defffd04 	addi	sp,sp,-12
   2d768:	dfc00215 	stw	ra,8(sp)
   2d76c:	df000115 	stw	fp,4(sp)
   2d770:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2d774:	008000f4 	movhi	r2,3
   2d778:	10833804 	addi	r2,r2,3296
   2d77c:	10800017 	ldw	r2,0(r2)
   2d780:	1005003a 	cmpeq	r2,r2,zero
   2d784:	1000061e 	bne	r2,zero,2d7a0 <alt_get_errno+0x3c>
   2d788:	008000f4 	movhi	r2,3
   2d78c:	10833804 	addi	r2,r2,3296
   2d790:	10800017 	ldw	r2,0(r2)
   2d794:	103ee83a 	callr	r2
   2d798:	e0bfff15 	stw	r2,-4(fp)
   2d79c:	00000306 	br	2d7ac <alt_get_errno+0x48>
   2d7a0:	008000f4 	movhi	r2,3
   2d7a4:	108a5104 	addi	r2,r2,10564
   2d7a8:	e0bfff15 	stw	r2,-4(fp)
   2d7ac:	e0bfff17 	ldw	r2,-4(fp)
}
   2d7b0:	e037883a 	mov	sp,fp
   2d7b4:	dfc00117 	ldw	ra,4(sp)
   2d7b8:	df000017 	ldw	fp,0(sp)
   2d7bc:	dec00204 	addi	sp,sp,8
   2d7c0:	f800283a 	ret

0002d7c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2d7c4:	defff404 	addi	sp,sp,-48
   2d7c8:	df000b15 	stw	fp,44(sp)
   2d7cc:	df000b04 	addi	fp,sp,44
   2d7d0:	e13ffb15 	stw	r4,-20(fp)
   2d7d4:	e17ffc15 	stw	r5,-16(fp)
   2d7d8:	e1bffd15 	stw	r6,-12(fp)
   2d7dc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2d7e0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2d7e4:	008000f4 	movhi	r2,3
   2d7e8:	108a5c04 	addi	r2,r2,10608
   2d7ec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2d7f0:	1005003a 	cmpeq	r2,r2,zero
   2d7f4:	1000411e 	bne	r2,zero,2d8fc <alt_alarm_start+0x138>
  {
    if (alarm)
   2d7f8:	e0bffb17 	ldw	r2,-20(fp)
   2d7fc:	1005003a 	cmpeq	r2,r2,zero
   2d800:	10003b1e 	bne	r2,zero,2d8f0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   2d804:	e0fffb17 	ldw	r3,-20(fp)
   2d808:	e0bffd17 	ldw	r2,-12(fp)
   2d80c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   2d810:	e0fffb17 	ldw	r3,-20(fp)
   2d814:	e0bffe17 	ldw	r2,-8(fp)
   2d818:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d81c:	0005303a 	rdctl	r2,status
   2d820:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d824:	e0fff817 	ldw	r3,-32(fp)
   2d828:	00bfff84 	movi	r2,-2
   2d82c:	1884703a 	and	r2,r3,r2
   2d830:	1001703a 	wrctl	status,r2
  
  return context;
   2d834:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2d838:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2d83c:	008000f4 	movhi	r2,3
   2d840:	108a5d04 	addi	r2,r2,10612
   2d844:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2d848:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2d84c:	e0fffc17 	ldw	r3,-16(fp)
   2d850:	e0bff917 	ldw	r2,-28(fp)
   2d854:	1885883a 	add	r2,r3,r2
   2d858:	10c00044 	addi	r3,r2,1
   2d85c:	e0bffb17 	ldw	r2,-20(fp)
   2d860:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2d864:	e0bffb17 	ldw	r2,-20(fp)
   2d868:	10c00217 	ldw	r3,8(r2)
   2d86c:	e0bff917 	ldw	r2,-28(fp)
   2d870:	1880042e 	bgeu	r3,r2,2d884 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   2d874:	e0fffb17 	ldw	r3,-20(fp)
   2d878:	00800044 	movi	r2,1
   2d87c:	18800405 	stb	r2,16(r3)
   2d880:	00000206 	br	2d88c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   2d884:	e0bffb17 	ldw	r2,-20(fp)
   2d888:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2d88c:	e0fffb17 	ldw	r3,-20(fp)
   2d890:	008000f4 	movhi	r2,3
   2d894:	10833c04 	addi	r2,r2,3312
   2d898:	e0bff615 	stw	r2,-40(fp)
   2d89c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2d8a0:	e0fff717 	ldw	r3,-36(fp)
   2d8a4:	e0bff617 	ldw	r2,-40(fp)
   2d8a8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   2d8ac:	e0bff617 	ldw	r2,-40(fp)
   2d8b0:	10c00017 	ldw	r3,0(r2)
   2d8b4:	e0bff717 	ldw	r2,-36(fp)
   2d8b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2d8bc:	e0bff617 	ldw	r2,-40(fp)
   2d8c0:	10c00017 	ldw	r3,0(r2)
   2d8c4:	e0bff717 	ldw	r2,-36(fp)
   2d8c8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   2d8cc:	e0fff617 	ldw	r3,-40(fp)
   2d8d0:	e0bff717 	ldw	r2,-36(fp)
   2d8d4:	18800015 	stw	r2,0(r3)
   2d8d8:	e0bffa17 	ldw	r2,-24(fp)
   2d8dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d8e0:	e0bff517 	ldw	r2,-44(fp)
   2d8e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2d8e8:	e03fff15 	stw	zero,-4(fp)
   2d8ec:	00000506 	br	2d904 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   2d8f0:	00bffa84 	movi	r2,-22
   2d8f4:	e0bfff15 	stw	r2,-4(fp)
   2d8f8:	00000206 	br	2d904 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   2d8fc:	00bfde84 	movi	r2,-134
   2d900:	e0bfff15 	stw	r2,-4(fp)
   2d904:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   2d908:	e037883a 	mov	sp,fp
   2d90c:	df000017 	ldw	fp,0(sp)
   2d910:	dec00104 	addi	sp,sp,4
   2d914:	f800283a 	ret

0002d918 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2d918:	defffe04 	addi	sp,sp,-8
   2d91c:	df000115 	stw	fp,4(sp)
   2d920:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2d924:	e03fff15 	stw	zero,-4(fp)
   2d928:	00000506 	br	2d940 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   2d92c:	e0bfff17 	ldw	r2,-4(fp)
   2d930:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2d934:	e0bfff17 	ldw	r2,-4(fp)
   2d938:	10800804 	addi	r2,r2,32
   2d93c:	e0bfff15 	stw	r2,-4(fp)
   2d940:	e0bfff17 	ldw	r2,-4(fp)
   2d944:	10820030 	cmpltui	r2,r2,2048
   2d948:	103ff81e 	bne	r2,zero,2d92c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2d94c:	e037883a 	mov	sp,fp
   2d950:	df000017 	ldw	fp,0(sp)
   2d954:	dec00104 	addi	sp,sp,4
   2d958:	f800283a 	ret

0002d95c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2d95c:	defff904 	addi	sp,sp,-28
   2d960:	dfc00615 	stw	ra,24(sp)
   2d964:	df000515 	stw	fp,20(sp)
   2d968:	df000504 	addi	fp,sp,20
   2d96c:	e13ffd15 	stw	r4,-12(fp)
   2d970:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2d974:	e0bffd17 	ldw	r2,-12(fp)
   2d978:	1005003a 	cmpeq	r2,r2,zero
   2d97c:	1000041e 	bne	r2,zero,2d990 <alt_dev_llist_insert+0x34>
   2d980:	e0bffd17 	ldw	r2,-12(fp)
   2d984:	10800217 	ldw	r2,8(r2)
   2d988:	1004c03a 	cmpne	r2,r2,zero
   2d98c:	1000071e 	bne	r2,zero,2d9ac <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   2d990:	002da100 	call	2da10 <alt_get_errno>
   2d994:	1007883a 	mov	r3,r2
   2d998:	00800584 	movi	r2,22
   2d99c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2d9a0:	00bffa84 	movi	r2,-22
   2d9a4:	e0bfff15 	stw	r2,-4(fp)
   2d9a8:	00001306 	br	2d9f8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2d9ac:	e0fffd17 	ldw	r3,-12(fp)
   2d9b0:	e0bffe17 	ldw	r2,-8(fp)
   2d9b4:	e0bffb15 	stw	r2,-20(fp)
   2d9b8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2d9bc:	e0fffc17 	ldw	r3,-16(fp)
   2d9c0:	e0bffb17 	ldw	r2,-20(fp)
   2d9c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   2d9c8:	e0bffb17 	ldw	r2,-20(fp)
   2d9cc:	10c00017 	ldw	r3,0(r2)
   2d9d0:	e0bffc17 	ldw	r2,-16(fp)
   2d9d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2d9d8:	e0bffb17 	ldw	r2,-20(fp)
   2d9dc:	10c00017 	ldw	r3,0(r2)
   2d9e0:	e0bffc17 	ldw	r2,-16(fp)
   2d9e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   2d9e8:	e0fffb17 	ldw	r3,-20(fp)
   2d9ec:	e0bffc17 	ldw	r2,-16(fp)
   2d9f0:	18800015 	stw	r2,0(r3)

  return 0;  
   2d9f4:	e03fff15 	stw	zero,-4(fp)
   2d9f8:	e0bfff17 	ldw	r2,-4(fp)
}
   2d9fc:	e037883a 	mov	sp,fp
   2da00:	dfc00117 	ldw	ra,4(sp)
   2da04:	df000017 	ldw	fp,0(sp)
   2da08:	dec00204 	addi	sp,sp,8
   2da0c:	f800283a 	ret

0002da10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2da10:	defffd04 	addi	sp,sp,-12
   2da14:	dfc00215 	stw	ra,8(sp)
   2da18:	df000115 	stw	fp,4(sp)
   2da1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2da20:	008000f4 	movhi	r2,3
   2da24:	10833804 	addi	r2,r2,3296
   2da28:	10800017 	ldw	r2,0(r2)
   2da2c:	1005003a 	cmpeq	r2,r2,zero
   2da30:	1000061e 	bne	r2,zero,2da4c <alt_get_errno+0x3c>
   2da34:	008000f4 	movhi	r2,3
   2da38:	10833804 	addi	r2,r2,3296
   2da3c:	10800017 	ldw	r2,0(r2)
   2da40:	103ee83a 	callr	r2
   2da44:	e0bfff15 	stw	r2,-4(fp)
   2da48:	00000306 	br	2da58 <alt_get_errno+0x48>
   2da4c:	008000f4 	movhi	r2,3
   2da50:	108a5104 	addi	r2,r2,10564
   2da54:	e0bfff15 	stw	r2,-4(fp)
   2da58:	e0bfff17 	ldw	r2,-4(fp)
}
   2da5c:	e037883a 	mov	sp,fp
   2da60:	dfc00117 	ldw	ra,4(sp)
   2da64:	df000017 	ldw	fp,0(sp)
   2da68:	dec00204 	addi	sp,sp,8
   2da6c:	f800283a 	ret

0002da70 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2da70:	defffd04 	addi	sp,sp,-12
   2da74:	dfc00215 	stw	ra,8(sp)
   2da78:	df000115 	stw	fp,4(sp)
   2da7c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2da80:	00bfff04 	movi	r2,-4
   2da84:	00c000f4 	movhi	r3,3
   2da88:	18fa8904 	addi	r3,r3,-5596
   2da8c:	1885883a 	add	r2,r3,r2
   2da90:	e0bfff15 	stw	r2,-4(fp)
   2da94:	00000606 	br	2dab0 <_do_ctors+0x40>
        (*ctor) (); 
   2da98:	e0bfff17 	ldw	r2,-4(fp)
   2da9c:	10800017 	ldw	r2,0(r2)
   2daa0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2daa4:	e0bfff17 	ldw	r2,-4(fp)
   2daa8:	10bfff04 	addi	r2,r2,-4
   2daac:	e0bfff15 	stw	r2,-4(fp)
   2dab0:	e0ffff17 	ldw	r3,-4(fp)
   2dab4:	008000f4 	movhi	r2,3
   2dab8:	10ba8804 	addi	r2,r2,-5600
   2dabc:	18bff62e 	bgeu	r3,r2,2da98 <_do_ctors+0x28>
        (*ctor) (); 
}
   2dac0:	e037883a 	mov	sp,fp
   2dac4:	dfc00117 	ldw	ra,4(sp)
   2dac8:	df000017 	ldw	fp,0(sp)
   2dacc:	dec00204 	addi	sp,sp,8
   2dad0:	f800283a 	ret

0002dad4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2dad4:	defffd04 	addi	sp,sp,-12
   2dad8:	dfc00215 	stw	ra,8(sp)
   2dadc:	df000115 	stw	fp,4(sp)
   2dae0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2dae4:	00bfff04 	movi	r2,-4
   2dae8:	00c000f4 	movhi	r3,3
   2daec:	18fa8904 	addi	r3,r3,-5596
   2daf0:	1885883a 	add	r2,r3,r2
   2daf4:	e0bfff15 	stw	r2,-4(fp)
   2daf8:	00000606 	br	2db14 <_do_dtors+0x40>
        (*dtor) (); 
   2dafc:	e0bfff17 	ldw	r2,-4(fp)
   2db00:	10800017 	ldw	r2,0(r2)
   2db04:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2db08:	e0bfff17 	ldw	r2,-4(fp)
   2db0c:	10bfff04 	addi	r2,r2,-4
   2db10:	e0bfff15 	stw	r2,-4(fp)
   2db14:	e0ffff17 	ldw	r3,-4(fp)
   2db18:	008000f4 	movhi	r2,3
   2db1c:	10ba8904 	addi	r2,r2,-5596
   2db20:	18bff62e 	bgeu	r3,r2,2dafc <_do_dtors+0x28>
        (*dtor) (); 
}
   2db24:	e037883a 	mov	sp,fp
   2db28:	dfc00117 	ldw	ra,4(sp)
   2db2c:	df000017 	ldw	fp,0(sp)
   2db30:	dec00204 	addi	sp,sp,8
   2db34:	f800283a 	ret

0002db38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2db38:	defff904 	addi	sp,sp,-28
   2db3c:	dfc00615 	stw	ra,24(sp)
   2db40:	df000515 	stw	fp,20(sp)
   2db44:	df000504 	addi	fp,sp,20
   2db48:	e13ffd15 	stw	r4,-12(fp)
   2db4c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2db50:	e0bffe17 	ldw	r2,-8(fp)
   2db54:	10800017 	ldw	r2,0(r2)
   2db58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2db5c:	e13ffd17 	ldw	r4,-12(fp)
   2db60:	00218d00 	call	218d0 <strlen>
   2db64:	10800044 	addi	r2,r2,1
   2db68:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2db6c:	00000d06 	br	2dba4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2db70:	e0bffc17 	ldw	r2,-16(fp)
   2db74:	11000217 	ldw	r4,8(r2)
   2db78:	e1bffb17 	ldw	r6,-20(fp)
   2db7c:	e17ffd17 	ldw	r5,-12(fp)
   2db80:	002e5f80 	call	2e5f8 <memcmp>
   2db84:	1004c03a 	cmpne	r2,r2,zero
   2db88:	1000031e 	bne	r2,zero,2db98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2db8c:	e0bffc17 	ldw	r2,-16(fp)
   2db90:	e0bfff15 	stw	r2,-4(fp)
   2db94:	00000706 	br	2dbb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2db98:	e0bffc17 	ldw	r2,-16(fp)
   2db9c:	10800017 	ldw	r2,0(r2)
   2dba0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2dba4:	e0fffe17 	ldw	r3,-8(fp)
   2dba8:	e0bffc17 	ldw	r2,-16(fp)
   2dbac:	10fff01e 	bne	r2,r3,2db70 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2dbb0:	e03fff15 	stw	zero,-4(fp)
   2dbb4:	e0bfff17 	ldw	r2,-4(fp)
}
   2dbb8:	e037883a 	mov	sp,fp
   2dbbc:	dfc00117 	ldw	ra,4(sp)
   2dbc0:	df000017 	ldw	fp,0(sp)
   2dbc4:	dec00204 	addi	sp,sp,8
   2dbc8:	f800283a 	ret

0002dbcc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2dbcc:	defffa04 	addi	sp,sp,-24
   2dbd0:	dfc00515 	stw	ra,20(sp)
   2dbd4:	df000415 	stw	fp,16(sp)
   2dbd8:	df000404 	addi	fp,sp,16
   2dbdc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2dbe0:	008000f4 	movhi	r2,3
   2dbe4:	10833304 	addi	r2,r2,3276
   2dbe8:	10800017 	ldw	r2,0(r2)
   2dbec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2dbf0:	00003306 	br	2dcc0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   2dbf4:	e0bffd17 	ldw	r2,-12(fp)
   2dbf8:	11000217 	ldw	r4,8(r2)
   2dbfc:	00218d00 	call	218d0 <strlen>
   2dc00:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   2dc04:	e0bffd17 	ldw	r2,-12(fp)
   2dc08:	10c00217 	ldw	r3,8(r2)
   2dc0c:	e0bffc17 	ldw	r2,-16(fp)
   2dc10:	1885883a 	add	r2,r3,r2
   2dc14:	10bfffc4 	addi	r2,r2,-1
   2dc18:	10800003 	ldbu	r2,0(r2)
   2dc1c:	10803fcc 	andi	r2,r2,255
   2dc20:	1080201c 	xori	r2,r2,128
   2dc24:	10bfe004 	addi	r2,r2,-128
   2dc28:	10800bd8 	cmpnei	r2,r2,47
   2dc2c:	1000031e 	bne	r2,zero,2dc3c <alt_find_file+0x70>
    {
      len -= 1;
   2dc30:	e0bffc17 	ldw	r2,-16(fp)
   2dc34:	10bfffc4 	addi	r2,r2,-1
   2dc38:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2dc3c:	e0bffc17 	ldw	r2,-16(fp)
   2dc40:	1007883a 	mov	r3,r2
   2dc44:	e0bffe17 	ldw	r2,-8(fp)
   2dc48:	1885883a 	add	r2,r3,r2
   2dc4c:	10800003 	ldbu	r2,0(r2)
   2dc50:	10803fcc 	andi	r2,r2,255
   2dc54:	1080201c 	xori	r2,r2,128
   2dc58:	10bfe004 	addi	r2,r2,-128
   2dc5c:	10800be0 	cmpeqi	r2,r2,47
   2dc60:	10000a1e 	bne	r2,zero,2dc8c <alt_find_file+0xc0>
   2dc64:	e0bffc17 	ldw	r2,-16(fp)
   2dc68:	1007883a 	mov	r3,r2
   2dc6c:	e0bffe17 	ldw	r2,-8(fp)
   2dc70:	1885883a 	add	r2,r3,r2
   2dc74:	10800003 	ldbu	r2,0(r2)
   2dc78:	10803fcc 	andi	r2,r2,255
   2dc7c:	1080201c 	xori	r2,r2,128
   2dc80:	10bfe004 	addi	r2,r2,-128
   2dc84:	1004c03a 	cmpne	r2,r2,zero
   2dc88:	10000a1e 	bne	r2,zero,2dcb4 <alt_find_file+0xe8>
   2dc8c:	e0bffd17 	ldw	r2,-12(fp)
   2dc90:	11000217 	ldw	r4,8(r2)
   2dc94:	e1bffc17 	ldw	r6,-16(fp)
   2dc98:	e17ffe17 	ldw	r5,-8(fp)
   2dc9c:	002e5f80 	call	2e5f8 <memcmp>
   2dca0:	1004c03a 	cmpne	r2,r2,zero
   2dca4:	1000031e 	bne	r2,zero,2dcb4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2dca8:	e0bffd17 	ldw	r2,-12(fp)
   2dcac:	e0bfff15 	stw	r2,-4(fp)
   2dcb0:	00000806 	br	2dcd4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   2dcb4:	e0bffd17 	ldw	r2,-12(fp)
   2dcb8:	10800017 	ldw	r2,0(r2)
   2dcbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2dcc0:	00c000f4 	movhi	r3,3
   2dcc4:	18c33304 	addi	r3,r3,3276
   2dcc8:	e0bffd17 	ldw	r2,-12(fp)
   2dccc:	10ffc91e 	bne	r2,r3,2dbf4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2dcd0:	e03fff15 	stw	zero,-4(fp)
   2dcd4:	e0bfff17 	ldw	r2,-4(fp)
}
   2dcd8:	e037883a 	mov	sp,fp
   2dcdc:	dfc00117 	ldw	ra,4(sp)
   2dce0:	df000017 	ldw	fp,0(sp)
   2dce4:	dec00204 	addi	sp,sp,8
   2dce8:	f800283a 	ret

0002dcec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2dcec:	defffc04 	addi	sp,sp,-16
   2dcf0:	df000315 	stw	fp,12(sp)
   2dcf4:	df000304 	addi	fp,sp,12
   2dcf8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2dcfc:	00bffa04 	movi	r2,-24
   2dd00:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2dd04:	e03ffe15 	stw	zero,-8(fp)
   2dd08:	00001e06 	br	2dd84 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   2dd0c:	e0bffe17 	ldw	r2,-8(fp)
   2dd10:	00c000f4 	movhi	r3,3
   2dd14:	18fe3c04 	addi	r3,r3,-1808
   2dd18:	10800324 	muli	r2,r2,12
   2dd1c:	10c5883a 	add	r2,r2,r3
   2dd20:	10800017 	ldw	r2,0(r2)
   2dd24:	1004c03a 	cmpne	r2,r2,zero
   2dd28:	1000131e 	bne	r2,zero,2dd78 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   2dd2c:	e0bffe17 	ldw	r2,-8(fp)
   2dd30:	00c000f4 	movhi	r3,3
   2dd34:	18fe3c04 	addi	r3,r3,-1808
   2dd38:	10800324 	muli	r2,r2,12
   2dd3c:	10c7883a 	add	r3,r2,r3
   2dd40:	e0bfff17 	ldw	r2,-4(fp)
   2dd44:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   2dd48:	008000f4 	movhi	r2,3
   2dd4c:	10833704 	addi	r2,r2,3292
   2dd50:	10c00017 	ldw	r3,0(r2)
   2dd54:	e0bffe17 	ldw	r2,-8(fp)
   2dd58:	1880040e 	bge	r3,r2,2dd6c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   2dd5c:	00c000f4 	movhi	r3,3
   2dd60:	18c33704 	addi	r3,r3,3292
   2dd64:	e0bffe17 	ldw	r2,-8(fp)
   2dd68:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   2dd6c:	e0bffe17 	ldw	r2,-8(fp)
   2dd70:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2dd74:	00000606 	br	2dd90 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2dd78:	e0bffe17 	ldw	r2,-8(fp)
   2dd7c:	10800044 	addi	r2,r2,1
   2dd80:	e0bffe15 	stw	r2,-8(fp)
   2dd84:	e0bffe17 	ldw	r2,-8(fp)
   2dd88:	10800810 	cmplti	r2,r2,32
   2dd8c:	103fdf1e 	bne	r2,zero,2dd0c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2dd90:	e0bffd17 	ldw	r2,-12(fp)
}
   2dd94:	e037883a 	mov	sp,fp
   2dd98:	df000017 	ldw	fp,0(sp)
   2dd9c:	dec00104 	addi	sp,sp,4
   2dda0:	f800283a 	ret

0002dda4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2dda4:	defffe04 	addi	sp,sp,-8
   2dda8:	dfc00115 	stw	ra,4(sp)
   2ddac:	df000015 	stw	fp,0(sp)
   2ddb0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2ddb4:	0009883a 	mov	r4,zero
   2ddb8:	01440004 	movi	r5,4096
   2ddbc:	002e51c0 	call	2e51c <alt_icache_flush>
#endif
}
   2ddc0:	e037883a 	mov	sp,fp
   2ddc4:	dfc00117 	ldw	ra,4(sp)
   2ddc8:	df000017 	ldw	fp,0(sp)
   2ddcc:	dec00204 	addi	sp,sp,8
   2ddd0:	f800283a 	ret

0002ddd4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2ddd4:	defff904 	addi	sp,sp,-28
   2ddd8:	dfc00615 	stw	ra,24(sp)
   2dddc:	df000515 	stw	fp,20(sp)
   2dde0:	df000504 	addi	fp,sp,20
   2dde4:	e13ffc15 	stw	r4,-16(fp)
   2dde8:	e17ffd15 	stw	r5,-12(fp)
   2ddec:	e1bffe15 	stw	r6,-8(fp)
   2ddf0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2ddf4:	e0800217 	ldw	r2,8(fp)
   2ddf8:	d8800015 	stw	r2,0(sp)
   2ddfc:	e13ffc17 	ldw	r4,-16(fp)
   2de00:	e17ffd17 	ldw	r5,-12(fp)
   2de04:	e1bffe17 	ldw	r6,-8(fp)
   2de08:	e1ffff17 	ldw	r7,-4(fp)
   2de0c:	002dfa80 	call	2dfa8 <alt_iic_isr_register>
}  
   2de10:	e037883a 	mov	sp,fp
   2de14:	dfc00117 	ldw	ra,4(sp)
   2de18:	df000017 	ldw	fp,0(sp)
   2de1c:	dec00204 	addi	sp,sp,8
   2de20:	f800283a 	ret

0002de24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2de24:	defff904 	addi	sp,sp,-28
   2de28:	df000615 	stw	fp,24(sp)
   2de2c:	df000604 	addi	fp,sp,24
   2de30:	e13ffe15 	stw	r4,-8(fp)
   2de34:	e17fff15 	stw	r5,-4(fp)
   2de38:	e0bfff17 	ldw	r2,-4(fp)
   2de3c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2de40:	0005303a 	rdctl	r2,status
   2de44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2de48:	e0fffb17 	ldw	r3,-20(fp)
   2de4c:	00bfff84 	movi	r2,-2
   2de50:	1884703a 	and	r2,r3,r2
   2de54:	1001703a 	wrctl	status,r2
  
  return context;
   2de58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2de5c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   2de60:	e0fffc17 	ldw	r3,-16(fp)
   2de64:	00800044 	movi	r2,1
   2de68:	10c4983a 	sll	r2,r2,r3
   2de6c:	1007883a 	mov	r3,r2
   2de70:	008000f4 	movhi	r2,3
   2de74:	108a5b04 	addi	r2,r2,10604
   2de78:	10800017 	ldw	r2,0(r2)
   2de7c:	1886b03a 	or	r3,r3,r2
   2de80:	008000f4 	movhi	r2,3
   2de84:	108a5b04 	addi	r2,r2,10604
   2de88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2de8c:	008000f4 	movhi	r2,3
   2de90:	108a5b04 	addi	r2,r2,10604
   2de94:	10800017 	ldw	r2,0(r2)
   2de98:	100170fa 	wrctl	ienable,r2
   2de9c:	e0bffd17 	ldw	r2,-12(fp)
   2dea0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dea4:	e0bffa17 	ldw	r2,-24(fp)
   2dea8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2deac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2deb0:	e037883a 	mov	sp,fp
   2deb4:	df000017 	ldw	fp,0(sp)
   2deb8:	dec00104 	addi	sp,sp,4
   2debc:	f800283a 	ret

0002dec0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2dec0:	defff904 	addi	sp,sp,-28
   2dec4:	df000615 	stw	fp,24(sp)
   2dec8:	df000604 	addi	fp,sp,24
   2decc:	e13ffe15 	stw	r4,-8(fp)
   2ded0:	e17fff15 	stw	r5,-4(fp)
   2ded4:	e0bfff17 	ldw	r2,-4(fp)
   2ded8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dedc:	0005303a 	rdctl	r2,status
   2dee0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dee4:	e0fffb17 	ldw	r3,-20(fp)
   2dee8:	00bfff84 	movi	r2,-2
   2deec:	1884703a 	and	r2,r3,r2
   2def0:	1001703a 	wrctl	status,r2
  
  return context;
   2def4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2def8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   2defc:	e0fffc17 	ldw	r3,-16(fp)
   2df00:	00800044 	movi	r2,1
   2df04:	10c4983a 	sll	r2,r2,r3
   2df08:	0084303a 	nor	r2,zero,r2
   2df0c:	1007883a 	mov	r3,r2
   2df10:	008000f4 	movhi	r2,3
   2df14:	108a5b04 	addi	r2,r2,10604
   2df18:	10800017 	ldw	r2,0(r2)
   2df1c:	1886703a 	and	r3,r3,r2
   2df20:	008000f4 	movhi	r2,3
   2df24:	108a5b04 	addi	r2,r2,10604
   2df28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2df2c:	008000f4 	movhi	r2,3
   2df30:	108a5b04 	addi	r2,r2,10604
   2df34:	10800017 	ldw	r2,0(r2)
   2df38:	100170fa 	wrctl	ienable,r2
   2df3c:	e0bffd17 	ldw	r2,-12(fp)
   2df40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2df44:	e0bffa17 	ldw	r2,-24(fp)
   2df48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2df4c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2df50:	e037883a 	mov	sp,fp
   2df54:	df000017 	ldw	fp,0(sp)
   2df58:	dec00104 	addi	sp,sp,4
   2df5c:	f800283a 	ret

0002df60 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2df60:	defffc04 	addi	sp,sp,-16
   2df64:	df000315 	stw	fp,12(sp)
   2df68:	df000304 	addi	fp,sp,12
   2df6c:	e13ffe15 	stw	r4,-8(fp)
   2df70:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2df74:	000530fa 	rdctl	r2,ienable
   2df78:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2df7c:	e0ffff17 	ldw	r3,-4(fp)
   2df80:	00800044 	movi	r2,1
   2df84:	10c4983a 	sll	r2,r2,r3
   2df88:	1007883a 	mov	r3,r2
   2df8c:	e0bffd17 	ldw	r2,-12(fp)
   2df90:	1884703a 	and	r2,r3,r2
   2df94:	1004c03a 	cmpne	r2,r2,zero
}
   2df98:	e037883a 	mov	sp,fp
   2df9c:	df000017 	ldw	fp,0(sp)
   2dfa0:	dec00104 	addi	sp,sp,4
   2dfa4:	f800283a 	ret

0002dfa8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2dfa8:	defff404 	addi	sp,sp,-48
   2dfac:	dfc00b15 	stw	ra,44(sp)
   2dfb0:	df000a15 	stw	fp,40(sp)
   2dfb4:	df000a04 	addi	fp,sp,40
   2dfb8:	e13ffb15 	stw	r4,-20(fp)
   2dfbc:	e17ffc15 	stw	r5,-16(fp)
   2dfc0:	e1bffd15 	stw	r6,-12(fp)
   2dfc4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   2dfc8:	00bffa84 	movi	r2,-22
   2dfcc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2dfd0:	e0bffc17 	ldw	r2,-16(fp)
   2dfd4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2dfd8:	e0bff917 	ldw	r2,-28(fp)
   2dfdc:	10800808 	cmpgei	r2,r2,32
   2dfe0:	1000291e 	bne	r2,zero,2e088 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dfe4:	0005303a 	rdctl	r2,status
   2dfe8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dfec:	e0fff717 	ldw	r3,-36(fp)
   2dff0:	00bfff84 	movi	r2,-2
   2dff4:	1884703a 	and	r2,r3,r2
   2dff8:	1001703a 	wrctl	status,r2
  
  return context;
   2dffc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2e000:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   2e004:	e0bff917 	ldw	r2,-28(fp)
   2e008:	00c000f4 	movhi	r3,3
   2e00c:	18ca6804 	addi	r3,r3,10656
   2e010:	100490fa 	slli	r2,r2,3
   2e014:	10c7883a 	add	r3,r2,r3
   2e018:	e0bffd17 	ldw	r2,-12(fp)
   2e01c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   2e020:	e0bff917 	ldw	r2,-28(fp)
   2e024:	00c000f4 	movhi	r3,3
   2e028:	18ca6804 	addi	r3,r3,10656
   2e02c:	100490fa 	slli	r2,r2,3
   2e030:	10c5883a 	add	r2,r2,r3
   2e034:	10c00104 	addi	r3,r2,4
   2e038:	e0bffe17 	ldw	r2,-8(fp)
   2e03c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2e040:	e0bffd17 	ldw	r2,-12(fp)
   2e044:	1005003a 	cmpeq	r2,r2,zero
   2e048:	1000051e 	bne	r2,zero,2e060 <alt_iic_isr_register+0xb8>
   2e04c:	e17ff917 	ldw	r5,-28(fp)
   2e050:	e13ffb17 	ldw	r4,-20(fp)
   2e054:	002de240 	call	2de24 <alt_ic_irq_enable>
   2e058:	e0bfff15 	stw	r2,-4(fp)
   2e05c:	00000406 	br	2e070 <alt_iic_isr_register+0xc8>
   2e060:	e17ff917 	ldw	r5,-28(fp)
   2e064:	e13ffb17 	ldw	r4,-20(fp)
   2e068:	002dec00 	call	2dec0 <alt_ic_irq_disable>
   2e06c:	e0bfff15 	stw	r2,-4(fp)
   2e070:	e0bfff17 	ldw	r2,-4(fp)
   2e074:	e0bffa15 	stw	r2,-24(fp)
   2e078:	e0bff817 	ldw	r2,-32(fp)
   2e07c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e080:	e0bff617 	ldw	r2,-40(fp)
   2e084:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2e088:	e0bffa17 	ldw	r2,-24(fp)
}
   2e08c:	e037883a 	mov	sp,fp
   2e090:	dfc00117 	ldw	ra,4(sp)
   2e094:	df000017 	ldw	fp,0(sp)
   2e098:	dec00204 	addi	sp,sp,8
   2e09c:	f800283a 	ret

0002e0a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2e0a0:	defff904 	addi	sp,sp,-28
   2e0a4:	dfc00615 	stw	ra,24(sp)
   2e0a8:	df000515 	stw	fp,20(sp)
   2e0ac:	df000504 	addi	fp,sp,20
   2e0b0:	e13ffc15 	stw	r4,-16(fp)
   2e0b4:	e17ffd15 	stw	r5,-12(fp)
   2e0b8:	e1bffe15 	stw	r6,-8(fp)
   2e0bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2e0c0:	e13ffd17 	ldw	r4,-12(fp)
   2e0c4:	e17ffe17 	ldw	r5,-8(fp)
   2e0c8:	e1bfff17 	ldw	r6,-4(fp)
   2e0cc:	002ac240 	call	2ac24 <open>
   2e0d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2e0d4:	e0bffb17 	ldw	r2,-20(fp)
   2e0d8:	1004803a 	cmplt	r2,r2,zero
   2e0dc:	10001c1e 	bne	r2,zero,2e150 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   2e0e0:	e0bffb17 	ldw	r2,-20(fp)
   2e0e4:	00c000f4 	movhi	r3,3
   2e0e8:	18fe3c04 	addi	r3,r3,-1808
   2e0ec:	10800324 	muli	r2,r2,12
   2e0f0:	10c5883a 	add	r2,r2,r3
   2e0f4:	10c00017 	ldw	r3,0(r2)
   2e0f8:	e0bffc17 	ldw	r2,-16(fp)
   2e0fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2e100:	e0bffb17 	ldw	r2,-20(fp)
   2e104:	00c000f4 	movhi	r3,3
   2e108:	18fe3c04 	addi	r3,r3,-1808
   2e10c:	10800324 	muli	r2,r2,12
   2e110:	10c5883a 	add	r2,r2,r3
   2e114:	10800104 	addi	r2,r2,4
   2e118:	10c00017 	ldw	r3,0(r2)
   2e11c:	e0bffc17 	ldw	r2,-16(fp)
   2e120:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2e124:	e0bffb17 	ldw	r2,-20(fp)
   2e128:	00c000f4 	movhi	r3,3
   2e12c:	18fe3c04 	addi	r3,r3,-1808
   2e130:	10800324 	muli	r2,r2,12
   2e134:	10c5883a 	add	r2,r2,r3
   2e138:	10800204 	addi	r2,r2,8
   2e13c:	10c00017 	ldw	r3,0(r2)
   2e140:	e0bffc17 	ldw	r2,-16(fp)
   2e144:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2e148:	e13ffb17 	ldw	r4,-20(fp)
   2e14c:	002af8c0 	call	2af8c <alt_release_fd>
  }
} 
   2e150:	e037883a 	mov	sp,fp
   2e154:	dfc00117 	ldw	ra,4(sp)
   2e158:	df000017 	ldw	fp,0(sp)
   2e15c:	dec00204 	addi	sp,sp,8
   2e160:	f800283a 	ret

0002e164 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2e164:	defffb04 	addi	sp,sp,-20
   2e168:	dfc00415 	stw	ra,16(sp)
   2e16c:	df000315 	stw	fp,12(sp)
   2e170:	df000304 	addi	fp,sp,12
   2e174:	e13ffd15 	stw	r4,-12(fp)
   2e178:	e17ffe15 	stw	r5,-8(fp)
   2e17c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2e180:	010000f4 	movhi	r4,3
   2e184:	213e3f04 	addi	r4,r4,-1796
   2e188:	e17ffd17 	ldw	r5,-12(fp)
   2e18c:	01800044 	movi	r6,1
   2e190:	01c07fc4 	movi	r7,511
   2e194:	002e0a00 	call	2e0a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2e198:	010000f4 	movhi	r4,3
   2e19c:	213e3c04 	addi	r4,r4,-1808
   2e1a0:	e17ffe17 	ldw	r5,-8(fp)
   2e1a4:	000d883a 	mov	r6,zero
   2e1a8:	01c07fc4 	movi	r7,511
   2e1ac:	002e0a00 	call	2e0a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2e1b0:	010000f4 	movhi	r4,3
   2e1b4:	213e4204 	addi	r4,r4,-1784
   2e1b8:	e17fff17 	ldw	r5,-4(fp)
   2e1bc:	01800044 	movi	r6,1
   2e1c0:	01c07fc4 	movi	r7,511
   2e1c4:	002e0a00 	call	2e0a0 <alt_open_fd>
}  
   2e1c8:	e037883a 	mov	sp,fp
   2e1cc:	dfc00117 	ldw	ra,4(sp)
   2e1d0:	df000017 	ldw	fp,0(sp)
   2e1d4:	dec00204 	addi	sp,sp,8
   2e1d8:	f800283a 	ret

0002e1dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2e1dc:	defffa04 	addi	sp,sp,-24
   2e1e0:	df000515 	stw	fp,20(sp)
   2e1e4:	df000504 	addi	fp,sp,20
   2e1e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e1ec:	0005303a 	rdctl	r2,status
   2e1f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e1f4:	e0fffd17 	ldw	r3,-12(fp)
   2e1f8:	00bfff84 	movi	r2,-2
   2e1fc:	1884703a 	and	r2,r3,r2
   2e200:	1001703a 	wrctl	status,r2
  
  return context;
   2e204:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2e208:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   2e20c:	e0bfff17 	ldw	r2,-4(fp)
   2e210:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2e214:	e0bffc17 	ldw	r2,-16(fp)
   2e218:	10c00017 	ldw	r3,0(r2)
   2e21c:	e0bffc17 	ldw	r2,-16(fp)
   2e220:	10800117 	ldw	r2,4(r2)
   2e224:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   2e228:	e0bffc17 	ldw	r2,-16(fp)
   2e22c:	10c00117 	ldw	r3,4(r2)
   2e230:	e0bffc17 	ldw	r2,-16(fp)
   2e234:	10800017 	ldw	r2,0(r2)
   2e238:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2e23c:	e0fffc17 	ldw	r3,-16(fp)
   2e240:	e0bffc17 	ldw	r2,-16(fp)
   2e244:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   2e248:	e0fffc17 	ldw	r3,-16(fp)
   2e24c:	e0bffc17 	ldw	r2,-16(fp)
   2e250:	18800015 	stw	r2,0(r3)
   2e254:	e0bffe17 	ldw	r2,-8(fp)
   2e258:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e25c:	e0bffb17 	ldw	r2,-20(fp)
   2e260:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2e264:	e037883a 	mov	sp,fp
   2e268:	df000017 	ldw	fp,0(sp)
   2e26c:	dec00104 	addi	sp,sp,4
   2e270:	f800283a 	ret

0002e274 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2e274:	defffb04 	addi	sp,sp,-20
   2e278:	dfc00415 	stw	ra,16(sp)
   2e27c:	df000315 	stw	fp,12(sp)
   2e280:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2e284:	d0a00f17 	ldw	r2,-32708(gp)
   2e288:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2e28c:	d0a73017 	ldw	r2,-25408(gp)
   2e290:	10800044 	addi	r2,r2,1
   2e294:	d0a73015 	stw	r2,-25408(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2e298:	00003106 	br	2e360 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   2e29c:	e0bffe17 	ldw	r2,-8(fp)
   2e2a0:	10800017 	ldw	r2,0(r2)
   2e2a4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2e2a8:	e0bffe17 	ldw	r2,-8(fp)
   2e2ac:	10800403 	ldbu	r2,16(r2)
   2e2b0:	10803fcc 	andi	r2,r2,255
   2e2b4:	1005003a 	cmpeq	r2,r2,zero
   2e2b8:	1000051e 	bne	r2,zero,2e2d0 <alt_tick+0x5c>
   2e2bc:	d0a73017 	ldw	r2,-25408(gp)
   2e2c0:	1004c03a 	cmpne	r2,r2,zero
   2e2c4:	1000021e 	bne	r2,zero,2e2d0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   2e2c8:	e0bffe17 	ldw	r2,-8(fp)
   2e2cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2e2d0:	e0bffe17 	ldw	r2,-8(fp)
   2e2d4:	10c00217 	ldw	r3,8(r2)
   2e2d8:	d0a73017 	ldw	r2,-25408(gp)
   2e2dc:	10c01e36 	bltu	r2,r3,2e358 <alt_tick+0xe4>
   2e2e0:	e0bffe17 	ldw	r2,-8(fp)
   2e2e4:	10800403 	ldbu	r2,16(r2)
   2e2e8:	10803fcc 	andi	r2,r2,255
   2e2ec:	1004c03a 	cmpne	r2,r2,zero
   2e2f0:	1000191e 	bne	r2,zero,2e358 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   2e2f4:	e0bffe17 	ldw	r2,-8(fp)
   2e2f8:	10c00317 	ldw	r3,12(r2)
   2e2fc:	e0bffe17 	ldw	r2,-8(fp)
   2e300:	11000517 	ldw	r4,20(r2)
   2e304:	183ee83a 	callr	r3
   2e308:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2e30c:	e0bffd17 	ldw	r2,-12(fp)
   2e310:	1004c03a 	cmpne	r2,r2,zero
   2e314:	1000031e 	bne	r2,zero,2e324 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   2e318:	e13ffe17 	ldw	r4,-8(fp)
   2e31c:	002e1dc0 	call	2e1dc <alt_alarm_stop>
   2e320:	00000d06 	br	2e358 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   2e324:	e0bffe17 	ldw	r2,-8(fp)
   2e328:	10c00217 	ldw	r3,8(r2)
   2e32c:	e0bffd17 	ldw	r2,-12(fp)
   2e330:	1887883a 	add	r3,r3,r2
   2e334:	e0bffe17 	ldw	r2,-8(fp)
   2e338:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2e33c:	e0bffe17 	ldw	r2,-8(fp)
   2e340:	10c00217 	ldw	r3,8(r2)
   2e344:	d0a73017 	ldw	r2,-25408(gp)
   2e348:	1880032e 	bgeu	r3,r2,2e358 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   2e34c:	e0fffe17 	ldw	r3,-8(fp)
   2e350:	00800044 	movi	r2,1
   2e354:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   2e358:	e0bfff17 	ldw	r2,-4(fp)
   2e35c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2e360:	d0e00f04 	addi	r3,gp,-32708
   2e364:	e0bffe17 	ldw	r2,-8(fp)
   2e368:	10ffcc1e 	bne	r2,r3,2e29c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   2e36c:	e037883a 	mov	sp,fp
   2e370:	dfc00117 	ldw	ra,4(sp)
   2e374:	df000017 	ldw	fp,0(sp)
   2e378:	dec00204 	addi	sp,sp,8
   2e37c:	f800283a 	ret

0002e380 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2e380:	defffd04 	addi	sp,sp,-12
   2e384:	dfc00215 	stw	ra,8(sp)
   2e388:	df000115 	stw	fp,4(sp)
   2e38c:	df000104 	addi	fp,sp,4
   2e390:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2e394:	e13fff17 	ldw	r4,-4(fp)
   2e398:	002e3d00 	call	2e3d0 <alt_busy_sleep>
}
   2e39c:	e037883a 	mov	sp,fp
   2e3a0:	dfc00117 	ldw	ra,4(sp)
   2e3a4:	df000017 	ldw	fp,0(sp)
   2e3a8:	dec00204 	addi	sp,sp,8
   2e3ac:	f800283a 	ret

0002e3b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2e3b0:	deffff04 	addi	sp,sp,-4
   2e3b4:	df000015 	stw	fp,0(sp)
   2e3b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2e3bc:	000170fa 	wrctl	ienable,zero
}
   2e3c0:	e037883a 	mov	sp,fp
   2e3c4:	df000017 	ldw	fp,0(sp)
   2e3c8:	dec00104 	addi	sp,sp,4
   2e3cc:	f800283a 	ret

0002e3d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2e3d0:	defffa04 	addi	sp,sp,-24
   2e3d4:	dfc00515 	stw	ra,20(sp)
   2e3d8:	df000415 	stw	fp,16(sp)
   2e3dc:	df000404 	addi	fp,sp,16
   2e3e0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   2e3e4:	008000c4 	movi	r2,3
   2e3e8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   2e3ec:	e0fffc17 	ldw	r3,-16(fp)
   2e3f0:	008003f4 	movhi	r2,15
   2e3f4:	10909004 	addi	r2,r2,16960
   2e3f8:	188b383a 	mul	r5,r3,r2
   2e3fc:	0100bef4 	movhi	r4,763
   2e400:	213c2004 	addi	r4,r4,-3968
   2e404:	0029e480 	call	29e48 <__udivsi3>
   2e408:	100b883a 	mov	r5,r2
   2e40c:	01200034 	movhi	r4,32768
   2e410:	213fffc4 	addi	r4,r4,-1
   2e414:	0029e480 	call	29e48 <__udivsi3>
   2e418:	100b883a 	mov	r5,r2
   2e41c:	e13fff17 	ldw	r4,-4(fp)
   2e420:	0029e480 	call	29e48 <__udivsi3>
   2e424:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2e428:	e0bffd17 	ldw	r2,-12(fp)
   2e42c:	1005003a 	cmpeq	r2,r2,zero
   2e430:	1000281e 	bne	r2,zero,2e4d4 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
   2e434:	e03ffe15 	stw	zero,-8(fp)
   2e438:	00001606 	br	2e494 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2e43c:	00a00034 	movhi	r2,32768
   2e440:	10bfffc4 	addi	r2,r2,-1
   2e444:	10bfffc4 	addi	r2,r2,-1
   2e448:	103ffe1e 	bne	r2,zero,2e444 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2e44c:	e0fffc17 	ldw	r3,-16(fp)
   2e450:	008003f4 	movhi	r2,15
   2e454:	10909004 	addi	r2,r2,16960
   2e458:	188b383a 	mul	r5,r3,r2
   2e45c:	0100bef4 	movhi	r4,763
   2e460:	213c2004 	addi	r4,r4,-3968
   2e464:	0029e480 	call	29e48 <__udivsi3>
   2e468:	100b883a 	mov	r5,r2
   2e46c:	01200034 	movhi	r4,32768
   2e470:	213fffc4 	addi	r4,r4,-1
   2e474:	0029e480 	call	29e48 <__udivsi3>
   2e478:	1007883a 	mov	r3,r2
   2e47c:	e0bfff17 	ldw	r2,-4(fp)
   2e480:	10c5c83a 	sub	r2,r2,r3
   2e484:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2e488:	e0bffe17 	ldw	r2,-8(fp)
   2e48c:	10800044 	addi	r2,r2,1
   2e490:	e0bffe15 	stw	r2,-8(fp)
   2e494:	e0fffe17 	ldw	r3,-8(fp)
   2e498:	e0bffd17 	ldw	r2,-12(fp)
   2e49c:	18bfe716 	blt	r3,r2,2e43c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2e4a0:	e0fffc17 	ldw	r3,-16(fp)
   2e4a4:	008003f4 	movhi	r2,15
   2e4a8:	10909004 	addi	r2,r2,16960
   2e4ac:	188b383a 	mul	r5,r3,r2
   2e4b0:	0100bef4 	movhi	r4,763
   2e4b4:	213c2004 	addi	r4,r4,-3968
   2e4b8:	0029e480 	call	29e48 <__udivsi3>
   2e4bc:	1007883a 	mov	r3,r2
   2e4c0:	e0bfff17 	ldw	r2,-4(fp)
   2e4c4:	1885383a 	mul	r2,r3,r2
   2e4c8:	10bfffc4 	addi	r2,r2,-1
   2e4cc:	103ffe1e 	bne	r2,zero,2e4c8 <alt_busy_sleep+0xf8>
   2e4d0:	00000c06 	br	2e504 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2e4d4:	e0fffc17 	ldw	r3,-16(fp)
   2e4d8:	008003f4 	movhi	r2,15
   2e4dc:	10909004 	addi	r2,r2,16960
   2e4e0:	188b383a 	mul	r5,r3,r2
   2e4e4:	0100bef4 	movhi	r4,763
   2e4e8:	213c2004 	addi	r4,r4,-3968
   2e4ec:	0029e480 	call	29e48 <__udivsi3>
   2e4f0:	1007883a 	mov	r3,r2
   2e4f4:	e0bfff17 	ldw	r2,-4(fp)
   2e4f8:	1885383a 	mul	r2,r3,r2
   2e4fc:	10bfffc4 	addi	r2,r2,-1
   2e500:	00bffe16 	blt	zero,r2,2e4fc <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2e504:	0005883a 	mov	r2,zero
}
   2e508:	e037883a 	mov	sp,fp
   2e50c:	dfc00117 	ldw	ra,4(sp)
   2e510:	df000017 	ldw	fp,0(sp)
   2e514:	dec00204 	addi	sp,sp,8
   2e518:	f800283a 	ret

0002e51c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   2e51c:	defffb04 	addi	sp,sp,-20
   2e520:	df000415 	stw	fp,16(sp)
   2e524:	df000404 	addi	fp,sp,16
   2e528:	e13ffe15 	stw	r4,-8(fp)
   2e52c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   2e530:	e0bfff17 	ldw	r2,-4(fp)
   2e534:	10840070 	cmpltui	r2,r2,4097
   2e538:	1000021e 	bne	r2,zero,2e544 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   2e53c:	00840004 	movi	r2,4096
   2e540:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2e544:	e0fffe17 	ldw	r3,-8(fp)
   2e548:	e0bfff17 	ldw	r2,-4(fp)
   2e54c:	1885883a 	add	r2,r3,r2
   2e550:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2e554:	e0bffe17 	ldw	r2,-8(fp)
   2e558:	e0bffd15 	stw	r2,-12(fp)
   2e55c:	00000506 	br	2e574 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2e560:	e0bffd17 	ldw	r2,-12(fp)
   2e564:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2e568:	e0bffd17 	ldw	r2,-12(fp)
   2e56c:	10800804 	addi	r2,r2,32
   2e570:	e0bffd15 	stw	r2,-12(fp)
   2e574:	e0fffd17 	ldw	r3,-12(fp)
   2e578:	e0bffc17 	ldw	r2,-16(fp)
   2e57c:	18bff836 	bltu	r3,r2,2e560 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2e580:	e0bffe17 	ldw	r2,-8(fp)
   2e584:	108007cc 	andi	r2,r2,31
   2e588:	1005003a 	cmpeq	r2,r2,zero
   2e58c:	1000021e 	bne	r2,zero,2e598 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2e590:	e0bffd17 	ldw	r2,-12(fp)
   2e594:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2e598:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2e59c:	e037883a 	mov	sp,fp
   2e5a0:	df000017 	ldw	fp,0(sp)
   2e5a4:	dec00104 	addi	sp,sp,4
   2e5a8:	f800283a 	ret

0002e5ac <atexit>:
   2e5ac:	200b883a 	mov	r5,r4
   2e5b0:	000d883a 	mov	r6,zero
   2e5b4:	0009883a 	mov	r4,zero
   2e5b8:	000f883a 	mov	r7,zero
   2e5bc:	002e66c1 	jmpi	2e66c <__register_exitproc>

0002e5c0 <exit>:
   2e5c0:	defffe04 	addi	sp,sp,-8
   2e5c4:	000b883a 	mov	r5,zero
   2e5c8:	dc000015 	stw	r16,0(sp)
   2e5cc:	dfc00115 	stw	ra,4(sp)
   2e5d0:	2021883a 	mov	r16,r4
   2e5d4:	002e7a40 	call	2e7a4 <__call_exitprocs>
   2e5d8:	008000f4 	movhi	r2,3
   2e5dc:	10832e04 	addi	r2,r2,3256
   2e5e0:	11000017 	ldw	r4,0(r2)
   2e5e4:	20800f17 	ldw	r2,60(r4)
   2e5e8:	10000126 	beq	r2,zero,2e5f0 <exit+0x30>
   2e5ec:	103ee83a 	callr	r2
   2e5f0:	8009883a 	mov	r4,r16
   2e5f4:	002e9940 	call	2e994 <_exit>

0002e5f8 <memcmp>:
   2e5f8:	00c000c4 	movi	r3,3
   2e5fc:	1980032e 	bgeu	r3,r6,2e60c <memcmp+0x14>
   2e600:	2144b03a 	or	r2,r4,r5
   2e604:	10c4703a 	and	r2,r2,r3
   2e608:	10000f26 	beq	r2,zero,2e648 <memcmp+0x50>
   2e60c:	31ffffc4 	addi	r7,r6,-1
   2e610:	3000061e 	bne	r6,zero,2e62c <memcmp+0x34>
   2e614:	00000a06 	br	2e640 <memcmp+0x48>
   2e618:	39ffffc4 	addi	r7,r7,-1
   2e61c:	00bfffc4 	movi	r2,-1
   2e620:	21000044 	addi	r4,r4,1
   2e624:	29400044 	addi	r5,r5,1
   2e628:	38800526 	beq	r7,r2,2e640 <memcmp+0x48>
   2e62c:	20c00003 	ldbu	r3,0(r4)
   2e630:	28800003 	ldbu	r2,0(r5)
   2e634:	18bff826 	beq	r3,r2,2e618 <memcmp+0x20>
   2e638:	1885c83a 	sub	r2,r3,r2
   2e63c:	f800283a 	ret
   2e640:	0005883a 	mov	r2,zero
   2e644:	f800283a 	ret
   2e648:	180f883a 	mov	r7,r3
   2e64c:	20c00017 	ldw	r3,0(r4)
   2e650:	28800017 	ldw	r2,0(r5)
   2e654:	18bfed1e 	bne	r3,r2,2e60c <memcmp+0x14>
   2e658:	31bfff04 	addi	r6,r6,-4
   2e65c:	21000104 	addi	r4,r4,4
   2e660:	29400104 	addi	r5,r5,4
   2e664:	39bff936 	bltu	r7,r6,2e64c <memcmp+0x54>
   2e668:	003fe806 	br	2e60c <memcmp+0x14>

0002e66c <__register_exitproc>:
   2e66c:	defffa04 	addi	sp,sp,-24
   2e670:	008000f4 	movhi	r2,3
   2e674:	10832e04 	addi	r2,r2,3256
   2e678:	dc000015 	stw	r16,0(sp)
   2e67c:	14000017 	ldw	r16,0(r2)
   2e680:	dd000415 	stw	r20,16(sp)
   2e684:	2829883a 	mov	r20,r5
   2e688:	81405217 	ldw	r5,328(r16)
   2e68c:	dcc00315 	stw	r19,12(sp)
   2e690:	dc800215 	stw	r18,8(sp)
   2e694:	dc400115 	stw	r17,4(sp)
   2e698:	dfc00515 	stw	ra,20(sp)
   2e69c:	2023883a 	mov	r17,r4
   2e6a0:	3027883a 	mov	r19,r6
   2e6a4:	3825883a 	mov	r18,r7
   2e6a8:	28002526 	beq	r5,zero,2e740 <__register_exitproc+0xd4>
   2e6ac:	29000117 	ldw	r4,4(r5)
   2e6b0:	008007c4 	movi	r2,31
   2e6b4:	11002716 	blt	r2,r4,2e754 <__register_exitproc+0xe8>
   2e6b8:	8800101e 	bne	r17,zero,2e6fc <__register_exitproc+0x90>
   2e6bc:	2105883a 	add	r2,r4,r4
   2e6c0:	1085883a 	add	r2,r2,r2
   2e6c4:	20c00044 	addi	r3,r4,1
   2e6c8:	1145883a 	add	r2,r2,r5
   2e6cc:	0009883a 	mov	r4,zero
   2e6d0:	15000215 	stw	r20,8(r2)
   2e6d4:	28c00115 	stw	r3,4(r5)
   2e6d8:	2005883a 	mov	r2,r4
   2e6dc:	dfc00517 	ldw	ra,20(sp)
   2e6e0:	dd000417 	ldw	r20,16(sp)
   2e6e4:	dcc00317 	ldw	r19,12(sp)
   2e6e8:	dc800217 	ldw	r18,8(sp)
   2e6ec:	dc400117 	ldw	r17,4(sp)
   2e6f0:	dc000017 	ldw	r16,0(sp)
   2e6f4:	dec00604 	addi	sp,sp,24
   2e6f8:	f800283a 	ret
   2e6fc:	29802204 	addi	r6,r5,136
   2e700:	00800044 	movi	r2,1
   2e704:	110e983a 	sll	r7,r2,r4
   2e708:	30c04017 	ldw	r3,256(r6)
   2e70c:	2105883a 	add	r2,r4,r4
   2e710:	1085883a 	add	r2,r2,r2
   2e714:	1185883a 	add	r2,r2,r6
   2e718:	19c6b03a 	or	r3,r3,r7
   2e71c:	14802015 	stw	r18,128(r2)
   2e720:	14c00015 	stw	r19,0(r2)
   2e724:	00800084 	movi	r2,2
   2e728:	30c04015 	stw	r3,256(r6)
   2e72c:	88bfe31e 	bne	r17,r2,2e6bc <__register_exitproc+0x50>
   2e730:	30804117 	ldw	r2,260(r6)
   2e734:	11c4b03a 	or	r2,r2,r7
   2e738:	30804115 	stw	r2,260(r6)
   2e73c:	003fdf06 	br	2e6bc <__register_exitproc+0x50>
   2e740:	008000f4 	movhi	r2,3
   2e744:	108aa804 	addi	r2,r2,10912
   2e748:	100b883a 	mov	r5,r2
   2e74c:	80805215 	stw	r2,328(r16)
   2e750:	003fd606 	br	2e6ac <__register_exitproc+0x40>
   2e754:	00800034 	movhi	r2,0
   2e758:	10800004 	addi	r2,r2,0
   2e75c:	1000021e 	bne	r2,zero,2e768 <__register_exitproc+0xfc>
   2e760:	013fffc4 	movi	r4,-1
   2e764:	003fdc06 	br	2e6d8 <__register_exitproc+0x6c>
   2e768:	01006404 	movi	r4,400
   2e76c:	103ee83a 	callr	r2
   2e770:	1007883a 	mov	r3,r2
   2e774:	103ffa26 	beq	r2,zero,2e760 <__register_exitproc+0xf4>
   2e778:	80805217 	ldw	r2,328(r16)
   2e77c:	180b883a 	mov	r5,r3
   2e780:	18000115 	stw	zero,4(r3)
   2e784:	18800015 	stw	r2,0(r3)
   2e788:	80c05215 	stw	r3,328(r16)
   2e78c:	18006215 	stw	zero,392(r3)
   2e790:	18006315 	stw	zero,396(r3)
   2e794:	0009883a 	mov	r4,zero
   2e798:	883fc826 	beq	r17,zero,2e6bc <__register_exitproc+0x50>
   2e79c:	003fd706 	br	2e6fc <__register_exitproc+0x90>

0002e7a0 <register_fini>:
   2e7a0:	f800283a 	ret

0002e7a4 <__call_exitprocs>:
   2e7a4:	008000f4 	movhi	r2,3
   2e7a8:	10832e04 	addi	r2,r2,3256
   2e7ac:	10800017 	ldw	r2,0(r2)
   2e7b0:	defff304 	addi	sp,sp,-52
   2e7b4:	df000b15 	stw	fp,44(sp)
   2e7b8:	d8800115 	stw	r2,4(sp)
   2e7bc:	00800034 	movhi	r2,0
   2e7c0:	10800004 	addi	r2,r2,0
   2e7c4:	1005003a 	cmpeq	r2,r2,zero
   2e7c8:	d8800215 	stw	r2,8(sp)
   2e7cc:	d8800117 	ldw	r2,4(sp)
   2e7d0:	dd400815 	stw	r21,32(sp)
   2e7d4:	dd000715 	stw	r20,28(sp)
   2e7d8:	10805204 	addi	r2,r2,328
   2e7dc:	dfc00c15 	stw	ra,48(sp)
   2e7e0:	ddc00a15 	stw	r23,40(sp)
   2e7e4:	dd800915 	stw	r22,36(sp)
   2e7e8:	dcc00615 	stw	r19,24(sp)
   2e7ec:	dc800515 	stw	r18,20(sp)
   2e7f0:	dc400415 	stw	r17,16(sp)
   2e7f4:	dc000315 	stw	r16,12(sp)
   2e7f8:	282b883a 	mov	r21,r5
   2e7fc:	2039883a 	mov	fp,r4
   2e800:	d8800015 	stw	r2,0(sp)
   2e804:	2829003a 	cmpeq	r20,r5,zero
   2e808:	d8800117 	ldw	r2,4(sp)
   2e80c:	14405217 	ldw	r17,328(r2)
   2e810:	88001026 	beq	r17,zero,2e854 <__call_exitprocs+0xb0>
   2e814:	ddc00017 	ldw	r23,0(sp)
   2e818:	88800117 	ldw	r2,4(r17)
   2e81c:	8c802204 	addi	r18,r17,136
   2e820:	143fffc4 	addi	r16,r2,-1
   2e824:	80000916 	blt	r16,zero,2e84c <__call_exitprocs+0xa8>
   2e828:	05bfffc4 	movi	r22,-1
   2e82c:	a000151e 	bne	r20,zero,2e884 <__call_exitprocs+0xe0>
   2e830:	8409883a 	add	r4,r16,r16
   2e834:	2105883a 	add	r2,r4,r4
   2e838:	1485883a 	add	r2,r2,r18
   2e83c:	10c02017 	ldw	r3,128(r2)
   2e840:	a8c01126 	beq	r21,r3,2e888 <__call_exitprocs+0xe4>
   2e844:	843fffc4 	addi	r16,r16,-1
   2e848:	85bff81e 	bne	r16,r22,2e82c <__call_exitprocs+0x88>
   2e84c:	d8800217 	ldw	r2,8(sp)
   2e850:	10003126 	beq	r2,zero,2e918 <__call_exitprocs+0x174>
   2e854:	dfc00c17 	ldw	ra,48(sp)
   2e858:	df000b17 	ldw	fp,44(sp)
   2e85c:	ddc00a17 	ldw	r23,40(sp)
   2e860:	dd800917 	ldw	r22,36(sp)
   2e864:	dd400817 	ldw	r21,32(sp)
   2e868:	dd000717 	ldw	r20,28(sp)
   2e86c:	dcc00617 	ldw	r19,24(sp)
   2e870:	dc800517 	ldw	r18,20(sp)
   2e874:	dc400417 	ldw	r17,16(sp)
   2e878:	dc000317 	ldw	r16,12(sp)
   2e87c:	dec00d04 	addi	sp,sp,52
   2e880:	f800283a 	ret
   2e884:	8409883a 	add	r4,r16,r16
   2e888:	88c00117 	ldw	r3,4(r17)
   2e88c:	2105883a 	add	r2,r4,r4
   2e890:	1445883a 	add	r2,r2,r17
   2e894:	18ffffc4 	addi	r3,r3,-1
   2e898:	11800217 	ldw	r6,8(r2)
   2e89c:	1c001526 	beq	r3,r16,2e8f4 <__call_exitprocs+0x150>
   2e8a0:	10000215 	stw	zero,8(r2)
   2e8a4:	303fe726 	beq	r6,zero,2e844 <__call_exitprocs+0xa0>
   2e8a8:	00c00044 	movi	r3,1
   2e8ac:	1c06983a 	sll	r3,r3,r16
   2e8b0:	90804017 	ldw	r2,256(r18)
   2e8b4:	8cc00117 	ldw	r19,4(r17)
   2e8b8:	1884703a 	and	r2,r3,r2
   2e8bc:	10001426 	beq	r2,zero,2e910 <__call_exitprocs+0x16c>
   2e8c0:	90804117 	ldw	r2,260(r18)
   2e8c4:	1884703a 	and	r2,r3,r2
   2e8c8:	10000c1e 	bne	r2,zero,2e8fc <__call_exitprocs+0x158>
   2e8cc:	2105883a 	add	r2,r4,r4
   2e8d0:	1485883a 	add	r2,r2,r18
   2e8d4:	11400017 	ldw	r5,0(r2)
   2e8d8:	e009883a 	mov	r4,fp
   2e8dc:	303ee83a 	callr	r6
   2e8e0:	88800117 	ldw	r2,4(r17)
   2e8e4:	98bfc81e 	bne	r19,r2,2e808 <__call_exitprocs+0x64>
   2e8e8:	b8800017 	ldw	r2,0(r23)
   2e8ec:	147fd526 	beq	r2,r17,2e844 <__call_exitprocs+0xa0>
   2e8f0:	003fc506 	br	2e808 <__call_exitprocs+0x64>
   2e8f4:	8c000115 	stw	r16,4(r17)
   2e8f8:	003fea06 	br	2e8a4 <__call_exitprocs+0x100>
   2e8fc:	2105883a 	add	r2,r4,r4
   2e900:	1485883a 	add	r2,r2,r18
   2e904:	11000017 	ldw	r4,0(r2)
   2e908:	303ee83a 	callr	r6
   2e90c:	003ff406 	br	2e8e0 <__call_exitprocs+0x13c>
   2e910:	303ee83a 	callr	r6
   2e914:	003ff206 	br	2e8e0 <__call_exitprocs+0x13c>
   2e918:	88800117 	ldw	r2,4(r17)
   2e91c:	1000081e 	bne	r2,zero,2e940 <__call_exitprocs+0x19c>
   2e920:	89000017 	ldw	r4,0(r17)
   2e924:	20000726 	beq	r4,zero,2e944 <__call_exitprocs+0x1a0>
   2e928:	b9000015 	stw	r4,0(r23)
   2e92c:	8809883a 	mov	r4,r17
   2e930:	00000000 	call	0 <__reset-0x20000>
   2e934:	bc400017 	ldw	r17,0(r23)
   2e938:	883fb71e 	bne	r17,zero,2e818 <__call_exitprocs+0x74>
   2e93c:	003fc506 	br	2e854 <__call_exitprocs+0xb0>
   2e940:	89000017 	ldw	r4,0(r17)
   2e944:	882f883a 	mov	r23,r17
   2e948:	2023883a 	mov	r17,r4
   2e94c:	883fb21e 	bne	r17,zero,2e818 <__call_exitprocs+0x74>
   2e950:	003fc006 	br	2e854 <__call_exitprocs+0xb0>

0002e954 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   2e954:	defffd04 	addi	sp,sp,-12
   2e958:	df000215 	stw	fp,8(sp)
   2e95c:	df000204 	addi	fp,sp,8
   2e960:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   2e964:	e0bfff17 	ldw	r2,-4(fp)
   2e968:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2e96c:	e0bffe17 	ldw	r2,-8(fp)
   2e970:	1005003a 	cmpeq	r2,r2,zero
   2e974:	1000021e 	bne	r2,zero,2e980 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   2e978:	002af070 	cmpltui	zero,zero,43969
   2e97c:	00000106 	br	2e984 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   2e980:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   2e984:	e037883a 	mov	sp,fp
   2e988:	df000017 	ldw	fp,0(sp)
   2e98c:	dec00104 	addi	sp,sp,4
   2e990:	f800283a 	ret

0002e994 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2e994:	defffd04 	addi	sp,sp,-12
   2e998:	dfc00215 	stw	ra,8(sp)
   2e99c:	df000115 	stw	fp,4(sp)
   2e9a0:	df000104 	addi	fp,sp,4
   2e9a4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   2e9a8:	e13fff17 	ldw	r4,-4(fp)
   2e9ac:	002e9540 	call	2e954 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2e9b0:	003fff06 	br	2e9b0 <_exit+0x1c>
   2e9b4:	00000010 	cmplti	zero,zero,0
   2e9b8:	00000000 	call	0 <__reset-0x20000>
   2e9bc:	00527a01 	jmpi	527a0 <__alt_data_end+0x133a0>
   2e9c0:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0xe03c0>
   2e9c4:	001b0c0b 	ldhu	zero,27696(zero)
   2e9c8:	00000028 	cmpgeui	zero,zero,0
   2e9cc:	00000018 	cmpnei	zero,zero,0
   2e9d0:	00028054 	movui	zero,2561
   2e9d4:	000005dc 	xori	zero,zero,23
   2e9d8:	400e4400 	call	400e440 <__alt_data_end+0x3fcf040>
   2e9dc:	92099170 	cmpltui	r8,r18,9797
   2e9e0:	95079308 	cmpgei	r20,r18,7756
   2e9e4:	97049605 	stb	fp,4696(r18)
   2e9e8:	90019f03 	ldbu	zero,1660(r18)
   2e9ec:	9c06940a 	0x9c06940a
   2e9f0:	00000002 	0x2
   2e9f4:	00000028 	cmpgeui	zero,zero,0
   2e9f8:	00000044 	movi	zero,1
   2e9fc:	00028630 	cmpltui	zero,zero,2584
   2ea00:	000005b0 	cmpltui	zero,zero,22
   2ea04:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3bcf040>
   2ea08:	92099168 	cmpgeui	r8,r18,9797
   2ea0c:	95079308 	cmpgei	r20,r18,7756
   2ea10:	9c039705 	stb	r16,3676(r19)
   2ea14:	90019f02 	0x90019f02
   2ea18:	9606940a 	0x9606940a
   2ea1c:	00000004 	movi	zero,0
   2ea20:	0002e7a0 	cmpeqi	zero,zero,2974
